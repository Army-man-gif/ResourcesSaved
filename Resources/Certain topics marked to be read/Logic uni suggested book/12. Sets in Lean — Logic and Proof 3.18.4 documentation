From: <Saved by Blink>
Snapshot-Content-Location: https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html
Subject: =?utf-8?Q?12.=20Sets=20in=20Lean=20=E2=80=94=20Logic=20and=20Proof=203.18?=
 =?utf-8?Q?.4=20documentation?=
Date: Thu, 24 Oct 2024 11:09:51 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----"


------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/html
Content-ID: <frame-06E3CB703B4AF295C9A374F7DD37E8FD@mhtml.blink>
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html

<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="cid:css-513356f8-25f8-4a80-a2b4-b41824467528@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-9ad1bb7b-4189-4395-967b-f9b397309254@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-0542aa98-c020-4796-ba2f-bbcce59000fd@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-5e916776-c983-45f0-9cdb-42b2956e553a@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-c11c74c7-1299-4900-a58d-2fd52ef55af3@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-170d35c3-566b-4045-8866-905b57c12f36@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-0754fe98-c7ff-4875-81c1-6922d045612d@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-18b6cf87-3807-4919-ac78-0a8c7bcbbc11@mhtml.blink" />
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>12. Sets in Lean — Logic and Proof 3.18.4 documentation</title>
    <link rel="stylesheet" href="https://leanprover-community.github.io/logic_and_proof/_static/pygments.css" type="text/css">
    <link rel="stylesheet" href="https://leanprover-community.github.io/logic_and_proof/_static/alabaster.css" type="text/css">
    
    
    
    
    
    <link rel="shortcut icon" href="https://leanprover-community.github.io/logic_and_proof/_static/favicon.ico">
    <link rel="index" title="Index" href="https://leanprover-community.github.io/logic_and_proof/genindex.html">
    <link rel="search" title="Search" href="https://leanprover-community.github.io/logic_and_proof/search.html">
    <link rel="next" title="13. Relations" href="https://leanprover-community.github.io/logic_and_proof/relations.html">
    <link rel="prev" title="11. Sets" href="https://leanprover-community.github.io/logic_and_proof/sets.html">
<!-- <link href="https://fonts.googleapis.com/css?family=Sorts+Mill+Goudy" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css?family=Average" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css?family=EB+Garamond" rel="stylesheet"> -->

  </head><body><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="sets-in-lean">
<h1><span class="section-number">12. </span>Sets in Lean<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#sets-in-lean" title="Permalink to this headline">¶</a></h1>
<p>In the last chapter, we noted that although in axiomatic set theory one considers sets of disparate objects, it is more common in mathematics to consider subsets of some fixed domain, <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mi class=&quot;MJX-tex-caligraphic&quot; mathvariant=&quot;script&quot;>U</mi></mrow></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 0.856em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.664em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.357em, 1000.66em, 2.352em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="texatom" id="MathJax-Span-3"><span class="mrow" id="MathJax-Span-4"><span class="mi" id="MathJax-Span-5" style="font-family: MathJax_Caligraphic;">U<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.061em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.094em; border-left: 0px solid; width: 0px; height: 0.999em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mrow class="MJX-TeXAtom-ORD"><mi class="MJX-tex-caligraphic" mathvariant="script">U</mi></mrow></math></span></span></span>. This is the way sets are handled in Lean. For any data type <code class="docutils literal notranslate"><span class="pre">U</span></code>, Lean gives us a new data type, <code class="docutils literal notranslate"><span class="pre">Set</span> <span class="pre">U</span></code>, consisting of the sets of elements of <code class="docutils literal notranslate"><span class="pre">U</span></code>. Thus, for example, we can reason about sets of natural numbers, or sets of integers, or sets of pairs of natural numbers.</p>
<div class="section" id="basics">
<span id="sets-in-lean-basics"></span><h2><span class="section-number">12.1. </span>Basics<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#basics" title="Permalink to this headline">¶</a></h2>
<p>Given <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">:</span> <span class="pre">Set</span> <span class="pre">U</span></code> and <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">:</span> <span class="pre">U</span></code>, we can write <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span></code> to state that <code class="docutils literal notranslate"><span class="pre">x</span></code> is a member of the set <code class="docutils literal notranslate"><span class="pre">A</span></code>. The character <code class="docutils literal notranslate"><span class="pre">∈</span></code> can be typed using <code class="docutils literal notranslate"><span class="pre">\in</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0Avariable%20(x%20%3A%20U)%0A%0A%23check%20x%20%E2%88%88%20A%0A%23check%20A%20%E2%88%AA%20B%0A%23check%20B%20%5C%20C%0A%23check%20C%20%E2%88%A9%20A%0A%23check%20C%E1%B6%9C%0A%23check%20%E2%88%85%20%E2%8A%86%20A%0A%23check%20B%20%E2%8A%86%20univ" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Set.Basic</span>
<span class="kn">open</span> <span class="n">Set</span>

<span class="kd">variable</span> <span class="o">{</span><span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="n">C</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span>

<span class="k">#check</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span>
<span class="k">#check</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span>
<span class="k">#check</span> <span class="n">B</span> <span class="bp">\</span> <span class="n">C</span>
<span class="k">#check</span> <span class="n">C</span> <span class="bp">∩</span> <span class="n">A</span>
<span class="k">#check</span> <span class="n">C</span><span class="bp">ᶜ</span>
<span class="k">#check</span> <span class="bp">∅</span> <span class="bp">⊆</span> <span class="n">A</span>
<span class="k">#check</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">univ</span>
</pre></div>
</div>
</div><p>You can type the symbols <code class="docutils literal notranslate"><span class="pre">⊆</span></code>, <code class="docutils literal notranslate"><span class="pre">∅</span></code>, <code class="docutils literal notranslate"><span class="pre">∪</span></code>, <code class="docutils literal notranslate"><span class="pre">∩</span></code>, <code class="docutils literal notranslate"><span class="pre">\</span></code> as <code class="docutils literal notranslate"><span class="pre">\subeq</span></code>
<code class="docutils literal notranslate"><span class="pre">\empty</span></code>, <code class="docutils literal notranslate"><span class="pre">\un</span></code>, <code class="docutils literal notranslate"><span class="pre">\i</span></code>, and <code class="docutils literal notranslate"><span class="pre">\\</span></code>, respectively.
We have made the type variable <code class="docutils literal notranslate"><span class="pre">U</span></code> implicit,
because it can typically be inferred from context.
The universal set is denoted <code class="docutils literal notranslate"><span class="pre">univ</span></code>,
and set complementation is denoted with the superscripted letter “c,”
which you can enter as <code class="docutils literal notranslate"><span class="pre">\^c</span></code> or <code class="docutils literal notranslate"><span class="pre">\compl</span></code>.
Basic set-theoretic notions like these are defined in Lean’s core library,
but additional theorems and notation are available in an auxiliary library that
we have loaded with the command <code class="docutils literal notranslate"><span class="pre">import</span> <span class="pre">Mathlib.Data.Set.Basic</span></code>,
which has to appear at the beginning of a file.
The command <code class="docutils literal notranslate"><span class="pre">open</span> <span class="pre">Set</span></code> lets us refer to a theorem named
<code class="docutils literal notranslate"><span class="pre">Set.mem_union</span></code> as <code class="docutils literal notranslate"><span class="pre">mem_union</span></code>.</p>
<p>The following patterns can be used to show that <code class="docutils literal notranslate"><span class="pre">A</span></code> is a subset of <code class="docutils literal notranslate"><span class="pre">B</span></code>:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0A--%20term%20mode%0Aexample%20%3A%20A%20%E2%8A%86%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20(h%20%3A%20x%20%E2%88%88%20A)%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20B%20from%20sorry%0A%0A--%20tactic%20mode%0Aexample%20%3A%20A%20%E2%8A%86%20B%20%3A%3D%20by%0Aintro%20x%0Aintro%20(h%20%3A%20x%20%E2%88%88%20A)%0Ashow%20x%20%E2%88%88%20B%0Asorry%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="c1">-- term mode</span>
<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">)</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="k">from</span> <span class="gr">sorry</span>

<span class="c1">-- tactic mode</span>
<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">B</span> <span class="o">:=</span> <span class="kd">by</span>
<span class="n">intro</span> <span class="n">x</span>
<span class="n">intro</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">)</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span>
<span class="gr">sorry</span>
</pre></div>
</div>
</div><p>The slogan is <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">⊆</span> <span class="pre">B</span></code> is the same as <code class="docutils literal notranslate"><span class="pre">∀</span> <span class="pre">x,</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">→</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">B</span></code>.
For Lean this is true <em>by definition</em>,
which is why the terms and tactics above are very familiar.</p>
<p>The following patterns can be used to show that <code class="docutils literal notranslate"><span class="pre">A</span></code> and <code class="docutils literal notranslate"><span class="pre">B</span></code> are equal:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0A--%20term%20mode%0Aexample%20%3A%20A%20%3D%20B%20%3A%3D%0Aeq_of_subset_of_subset%0A%20%20(fun%20x%20%E2%86%A6%0A%20%20%20%20fun%20(h%20%3A%20x%20%E2%88%88%20A)%20%E2%86%A6%0A%20%20%20%20show%20x%20%E2%88%88%20B%20from%20sorry)%0A%20%20(fun%20x%20%E2%86%A6%0A%20%20%20%20fun%20(h%20%3A%20x%20%E2%88%88%20B)%20%E2%86%A6%0A%20%20%20%20show%20x%20%E2%88%88%20A%20from%20sorry)%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="c1">-- term mode</span>
<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">=</span> <span class="n">B</span> <span class="o">:=</span>
<span class="n">eq_of_subset_of_subset</span>
  <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
    <span class="k">fun</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">)</span> <span class="bp">↦</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="k">from</span> <span class="gr">sorry</span><span class="o">)</span>
  <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
    <span class="k">fun</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="o">)</span> <span class="bp">↦</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="k">from</span> <span class="gr">sorry</span><span class="o">)</span>
</pre></div>
</div>
</div><p>The slogan is <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">=</span> <span class="pre">B</span></code> is the same as <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">⊆</span> <span class="pre">B</span> <span class="pre">∧</span> <span class="pre">B</span> <span class="pre">⊆</span> <span class="pre">A</span></code> is the same
as <code class="docutils literal notranslate"><span class="pre">∀</span> <span class="pre">x,</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">↔</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">B</span></code>.
Hence, we can use the following alternatives:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0A--%20term%20mode%0Aexample%20%3A%20A%20%3D%20B%20%3A%3D%0Aext%20(fun%20x%20%E2%86%A6%20Iff.intro%0A%20%20(fun%20h%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0A%20%20%20%20show%20x%20%E2%88%88%20B%20from%20sorry)%0A%20%20(fun%20h%20%3A%20x%20%E2%88%88%20B%20%E2%86%A6%0A%20%20%20%20show%20x%20%E2%88%88%20A%20from%20sorry))%0A%0A--%20tactic%20mode%0Aexample%20%3A%20A%20%3D%20B%20%3A%3D%20by%0A%20%20ext%20x%0A%20%20show%20x%20%E2%88%88%20A%20%E2%86%94%20x%20%E2%88%88%20B%0A%20%20apply%20Iff.intro%0A%20%20.%20show%20x%20%E2%88%88%20A%20%E2%86%92%20x%20%E2%88%88%20B%0A%20%20%20%20intro%20(h%20%3A%20x%20%E2%88%88%20A)%0A%20%20%20%20show%20x%20%E2%88%88%20B%0A%20%20%20%20sorry%0A%20%20.%20show%20x%20%E2%88%88%20B%20%E2%86%92%20x%20%E2%88%88%20A%0A%20%20%20%20intro%20(h%20%3A%20x%20%E2%88%88%20B)%0A%20%20%20%20show%20x%20%E2%88%88%20A%0A%20%20%20%20sorry%0A%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="c1">-- term mode</span>
<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">=</span> <span class="n">B</span> <span class="o">:=</span>
<span class="n">ext</span> <span class="o">(</span><span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span> <span class="n">Iff.intro</span>
  <span class="o">(</span><span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="k">from</span> <span class="gr">sorry</span><span class="o">)</span>
  <span class="o">(</span><span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">↦</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="k">from</span> <span class="gr">sorry</span><span class="o">))</span>

<span class="c1">-- tactic mode</span>
<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">=</span> <span class="n">B</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">ext</span> <span class="n">x</span>
  <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↔</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span>
  <span class="n">apply</span> <span class="n">Iff.intro</span>
  <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span>
    <span class="n">intro</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">)</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span>
    <span class="gr">sorry</span>
  <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span>
    <span class="n">intro</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="o">)</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span>
    <span class="gr">sorry</span>
</pre></div>
</div>
</div><p>Here, <code class="docutils literal notranslate"><span class="pre">ext</span></code> is short for “extensionality.”
In term mode, <code class="docutils literal notranslate"><span class="pre">Set.ext</span></code> is the following fact:</p>
<div class="math notranslate nohighlight">
<span class="MathJax_Preview" style="color: inherit;"></span><div class="MathJax_Display" style="text-align: center;"><span class="MathJax" id="MathJax-Element-2-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot; display=&quot;block&quot;><mi mathvariant=&quot;normal&quot;>&amp;#x2200;</mi><mi>x</mi><mspace width=&quot;thickmathspace&quot; /><mo stretchy=&quot;false&quot;>(</mo><mi>x</mi><mo>&amp;#x2208;</mo><mi>A</mi><mo stretchy=&quot;false&quot;>&amp;#x2194;</mo><mi>x</mi><mo>&amp;#x2208;</mo><mi>B</mi><mo stretchy=&quot;false&quot;>)</mo><mo stretchy=&quot;false&quot;>&amp;#x2192;</mo><mi>A</mi><mo>=</mo><mi>B</mi><mo>.</mo></math>" role="presentation" style="text-align: center; position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-6" style="width: 16.796em; display: inline-block;"><span style="display: inline-block; position: relative; width: 13.52em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1013.44em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-7"><span class="mi" id="MathJax-Span-8" style="font-family: MathJax_Main;">∀</span><span class="mi" id="MathJax-Span-9" style="font-family: MathJax_Math-italic;">x</span><span class="mspace" id="MathJax-Span-10" style="height: 0em; vertical-align: 0em; width: 0.278em; display: inline-block; overflow: hidden;"></span><span class="mo" id="MathJax-Span-11" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-12" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-13" style="font-family: MathJax_Main; padding-left: 0.278em;">∈</span><span class="mi" id="MathJax-Span-14" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">A</span><span class="mo" id="MathJax-Span-15" style="font-family: MathJax_Main; padding-left: 0.278em;">↔</span><span class="mi" id="MathJax-Span-16" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">x</span><span class="mo" id="MathJax-Span-17" style="font-family: MathJax_Main; padding-left: 0.278em;">∈</span><span class="mi" id="MathJax-Span-18" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">B</span><span class="mo" id="MathJax-Span-19" style="font-family: MathJax_Main;">)</span><span class="mo" id="MathJax-Span-20" style="font-family: MathJax_Main; padding-left: 0.278em;">→</span><span class="mi" id="MathJax-Span-21" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">A</span><span class="mo" id="MathJax-Span-22" style="font-family: MathJax_Main; padding-left: 0.278em;">=</span><span class="mi" id="MathJax-Span-23" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">B</span><span class="mo" id="MathJax-Span-24" style="font-family: MathJax_Main;">.</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML MJX_Assistive_MathML_Block" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><mi mathvariant="normal">∀</mi><mi>x</mi><mspace width="thickmathspace"></mspace><mo stretchy="false">(</mo><mi>x</mi><mo>∈</mo><mi>A</mi><mo stretchy="false">↔</mo><mi>x</mi><mo>∈</mo><mi>B</mi><mo stretchy="false">)</mo><mo stretchy="false">→</mo><mi>A</mi><mo>=</mo><mi>B</mi><mo>.</mo></math></span></span></div></div>
<p>This reduces proving <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-3-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>A</mi><mo>=</mo><mi>B</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-25" style="width: 3.56em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.846em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.324em, 1002.84em, 2.324em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-26"><span class="mi" id="MathJax-Span-27" style="font-family: MathJax_Math-italic;">A</span><span class="mo" id="MathJax-Span-28" style="font-family: MathJax_Main; padding-left: 0.278em;">=</span><span class="mi" id="MathJax-Span-29" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">B</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 1.005em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi><mo>=</mo><mi>B</mi></math></span></span></span> to proving <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-4-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi mathvariant=&quot;normal&quot;>&amp;#x2200;</mi><mi>x</mi><mspace width=&quot;thickmathspace&quot; /><mo stretchy=&quot;false&quot;>(</mo><mi>x</mi><mo>&amp;#x2208;</mo><mi>A</mi><mo stretchy=&quot;false&quot;>&amp;#x2194;</mo><mi>x</mi><mo>&amp;#x2208;</mo><mi>B</mi><mo stretchy=&quot;false&quot;>)</mo></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-30" style="width: 10.961em; display: inline-block;"><span style="display: inline-block; position: relative; width: 8.824em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1008.73em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-31"><span class="mi" id="MathJax-Span-32" style="font-family: MathJax_Main;">∀</span><span class="mi" id="MathJax-Span-33" style="font-family: MathJax_Math-italic;">x</span><span class="mspace" id="MathJax-Span-34" style="height: 0em; vertical-align: 0em; width: 0.278em; display: inline-block; overflow: hidden;"></span><span class="mo" id="MathJax-Span-35" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-36" style="font-family: MathJax_Math-italic;">x</span><span class="mo" id="MathJax-Span-37" style="font-family: MathJax_Main; padding-left: 0.278em;">∈</span><span class="mi" id="MathJax-Span-38" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">A</span><span class="mo" id="MathJax-Span-39" style="font-family: MathJax_Main; padding-left: 0.278em;">↔</span><span class="mi" id="MathJax-Span-40" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">x</span><span class="mo" id="MathJax-Span-41" style="font-family: MathJax_Main; padding-left: 0.278em;">∈</span><span class="mi" id="MathJax-Span-42" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">B</span><span class="mo" id="MathJax-Span-43" style="font-family: MathJax_Main;">)</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="normal">∀</mi><mi>x</mi><mspace width="thickmathspace"></mspace><mo stretchy="false">(</mo><mi>x</mi><mo>∈</mo><mi>A</mi><mo stretchy="false">↔</mo><mi>x</mi><mo>∈</mo><mi>B</mi><mo stretchy="false">)</mo></math></span></span></span>, which we can do using <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-5-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi mathvariant=&quot;normal&quot;>&amp;#x2200;</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-44" style="width: 0.714em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.569em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.346em, 1000.57em, 2.346em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-45"><span class="mi" id="MathJax-Span-46" style="font-family: MathJax_Main;">∀</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.086em; border-left: 0px solid; width: 0px; height: 1.005em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="normal">∀</mi></math></span></span></span> and <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-6-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=&quot;false&quot;>&amp;#x2194;</mo></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-47" style="width: 1.236em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.996em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.529em, 1000.94em, 2.335em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-48"><span class="mo" id="MathJax-Span-49" style="font-family: MathJax_Main;">↔</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.072em; border-left: 0px solid; width: 0px; height: 0.765em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">↔</mo></math></span></span></span> introduction.
Then, the tactic <code class="docutils literal notranslate"><span class="pre">ext</span></code> is the instruction to apply <code class="docutils literal notranslate"><span class="pre">Set.ext</span></code> if possible.
We write <code class="docutils literal notranslate"><span class="pre">ext</span> <span class="pre">x</span></code> to specify the variable name we want to use.</p>
<p>Lean supports the following nifty feature: the defining rules for union,
intersection and other operations on sets are considered to hold “definitionally.”
This means that the expressions <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">∩</span> <span class="pre">B</span></code> and <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">∧</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">B</span></code>
mean the same thing to Lean.
This is the same for the other constructions on sets;
for example <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">\</span> <span class="pre">B</span></code> and <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">∧</span> <span class="pre">¬</span> <span class="pre">(x</span> <span class="pre">∈</span> <span class="pre">B)</span></code>
mean the same thing to Lean.
You can also write <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∉</span> <span class="pre">B</span></code> for <code class="docutils literal notranslate"><span class="pre">¬</span> <span class="pre">(x</span> <span class="pre">∈</span> <span class="pre">B)</span></code>,
where <code class="docutils literal notranslate"><span class="pre">∉</span></code> is written using <code class="docutils literal notranslate"><span class="pre">\notin</span></code>.
The following example illustrates these features.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20%E2%88%80%20x%2C%20x%20%E2%88%88%20A%20%E2%86%92%20x%20%E2%88%88%20B%20%E2%86%92%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20_%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Afun%20_%20%3A%20x%20%E2%88%88%20B%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20from%20And.intro%20%E2%80%B9x%20%E2%88%88%20A%E2%80%BA%20%E2%80%B9x%20%E2%88%88%20B%E2%80%BA%0A%0Aexample%20%3A%20A%20%E2%8A%86%20A%20%E2%88%AA%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20_%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20%E2%88%AA%20B%20from%20Or.inl%20%E2%80%B9x%20%E2%88%88%20A%E2%80%BA%0A%0Aexample%20%3A%20%E2%88%85%20%E2%8A%86%20A%20%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20_%20%3A%20x%20%E2%88%88%20%E2%88%85%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20from%20False.elim%20%E2%80%B9x%20%E2%88%88%20(%E2%88%85%20%3A%20Set%20U)%E2%80%BA%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">_</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">_</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="k">from</span> <span class="n">And.intro</span> <span class="o">‹</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">›</span> <span class="o">‹</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="o">›</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">_</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="k">from</span> <span class="n">Or.inl</span> <span class="o">‹</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">›</span>

<span class="kd">example</span> <span class="o">:</span> <span class="bp">∅</span> <span class="bp">⊆</span> <span class="n">A</span>  <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">_</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">∅</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="k">from</span> <span class="n">False.elim</span> <span class="o">‹</span><span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="bp">∅</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)›</span>
</pre></div>
</div>
</div><p>Remember from <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/propositional_logic_in_lean.html#definitions-and-theorems"><span class="std std-numref">Section 4.6</span></a> that we can use <code class="docutils literal notranslate"><span class="pre">assume</span></code>
without a label, and refer back to hypotheses using French quotes,
entered with <code class="docutils literal notranslate"><span class="pre">\f&lt;</span></code> and <code class="docutils literal notranslate"><span class="pre">\f&gt;</span></code>.
We have used this feature in the previous example.
Without that feature, we could have written the examples above as follows:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20%E2%88%80%20x%2C%20x%20%E2%88%88%20A%20%E2%86%92%20x%20%E2%88%88%20B%20%E2%86%92%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20hA%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Afun%20hB%20%3A%20x%20%E2%88%88%20B%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20from%20And.intro%20hA%20hB%0A%0Aexample%20%3A%20A%20%E2%8A%86%20A%20%E2%88%AA%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20%E2%88%AA%20B%20from%20Or.inl%20h%0A%0Aexample%20%3A%20%E2%88%85%20%E2%8A%86%20A%20%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20%E2%88%85%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20from%20False.elim%20h%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">hA</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">hB</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="k">from</span> <span class="n">And.intro</span> <span class="n">hA</span> <span class="n">hB</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="k">from</span> <span class="n">Or.inl</span> <span class="n">h</span>

<span class="kd">example</span> <span class="o">:</span> <span class="bp">∅</span> <span class="bp">⊆</span> <span class="n">A</span>  <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">∅</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="k">from</span> <span class="n">False.elim</span> <span class="n">h</span>
</pre></div>
</div>
</div><p>From now on,
we will begin to use <code class="docutils literal notranslate"><span class="pre">fun</span></code> and <code class="docutils literal notranslate"><span class="pre">have</span></code> command without labels,
but you should feel free to adopt whatever style you prefer.</p>
<p>Notice also that in the last example,
we had to annotate the empty set by writing <code class="docutils literal notranslate"><span class="pre">(∅</span> <span class="pre">:</span> <span class="pre">Set</span> <span class="pre">U)</span></code>
to tell Lean which empty set we mean.
Lean can often infer information like this from the context
(for example, from the fact that we are trying to show <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span></code>,
where <code class="docutils literal notranslate"><span class="pre">A</span></code> has type <code class="docutils literal notranslate"><span class="pre">Set</span> <span class="pre">U</span></code>), but in this case, it needs a bit more help.</p>
<p>Alternatively, we can use theorems in the Lean library that are designed specifically for use with sets:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20%E2%88%80%20x%2C%20x%20%E2%88%88%20A%20%E2%86%92%20x%20%E2%88%88%20B%20%E2%86%92%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20_%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Afun%20_%20%3A%20x%20%E2%88%88%20B%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20from%20mem_inter%20%E2%80%B9x%20%E2%88%88%20A%E2%80%BA%20%E2%80%B9x%20%E2%88%88%20B%E2%80%BA%0A%0Aexample%20%3A%20A%20%E2%8A%86%20A%20%E2%88%AA%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20%E2%88%AA%20B%20from%20mem_union_left%20B%20h%0A%0Aexample%20%3A%20%E2%88%85%20%E2%8A%86%20A%20%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20%E2%88%85%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20from%20absurd%20h%20(not_mem_empty%20x)%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">_</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">_</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="k">from</span> <span class="n">mem_inter</span> <span class="o">‹</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">›</span> <span class="o">‹</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="o">›</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="k">from</span> <span class="n">mem_union_left</span> <span class="n">B</span> <span class="n">h</span>

<span class="kd">example</span> <span class="o">:</span> <span class="bp">∅</span> <span class="bp">⊆</span> <span class="n">A</span>  <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">∅</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="k">from</span> <span class="n">absurd</span> <span class="n">h</span> <span class="o">(</span><span class="n">not_mem_empty</span> <span class="n">x</span><span class="o">)</span>
</pre></div>
</div>
</div><p>Remember that <code class="docutils literal notranslate"><span class="pre">absurd</span></code> can be used to prove any fact from two contradictory hypotheses <code class="docutils literal notranslate"><span class="pre">h1</span> <span class="pre">:</span> <span class="pre">P</span></code> and <code class="docutils literal notranslate"><span class="pre">h2</span> <span class="pre">:</span> <span class="pre">¬</span> <span class="pre">P</span></code>. Here the <code class="docutils literal notranslate"><span class="pre">not_mem_empty</span> <span class="pre">x</span></code> is the fact <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∉</span> <span class="pre">∅</span></code>. You can see the statements of the theorems using the <code class="docutils literal notranslate"><span class="pre">#check</span></code> command in Lean:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0A--%20BEGIN%0A%23check%20%40mem_inter%0A%23check%20%40mem_of_mem_inter_left%0A%23check%20%40mem_of_mem_inter_right%0A%23check%20%40mem_union_left%0A%23check%20%40mem_union_right%0A%23check%20%40mem_or_mem_of_mem_union%0A%23check%20%40not_mem_empty%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="k">#check</span> <span class="bp">@</span><span class="n">mem_inter</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">mem_of_mem_inter_left</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">mem_of_mem_inter_right</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">mem_union_left</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">mem_union_right</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">mem_or_mem_of_mem_union</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">not_mem_empty</span>
</pre></div>
</div>
</div><p>Here, the <code class="docutils literal notranslate"><span class="pre">@</span></code> symbol in Lean prevents it from trying to fill in implicit arguments automatically, forcing it to display the full statement of the theorem.</p>
<p>The fact that Lean can identify sets with their logical definitions makes it easy to prove inclusions between sets:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20A%20%5C%20B%20%E2%8A%86%20A%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20A%20%5C%20B%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20from%20And.left%20h%0A%0Aexample%20%3A%20A%20%5C%20B%20%E2%8A%86%20B%E1%B6%9C%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20A%20%5C%20B%20%E2%86%A6%0Ahave%20%3A%20x%20%E2%88%89%20B%20%3A%3D%20And.right%20h%0Ashow%20x%20%E2%88%88%20B%E1%B6%9C%20from%20this%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">A</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="k">from</span> <span class="n">And.left</span> <span class="n">h</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">B</span><span class="bp">ᶜ</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">have</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∉</span> <span class="n">B</span> <span class="o">:=</span> <span class="n">And.right</span> <span class="n">h</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="bp">ᶜ</span> <span class="k">from</span> <span class="n">this</span>
</pre></div>
</div>
</div><p>Once again, we can use the theorems designed specifically for sets:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20A%20%5C%20B%20%E2%8A%86%20A%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20A%20%5C%20B%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20from%20mem_of_mem_diff%20h%0A%0Aexample%20%3A%20A%20%5C%20B%20%E2%8A%86%20B%E1%B6%9C%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20A%20%5C%20B%20%E2%86%A6%0Ahave%20%3A%20x%20%E2%88%89%20B%20%3A%3D%20not_mem_of_mem_diff%20h%0Ashow%20x%20%E2%88%88%20B%E1%B6%9C%20from%20this%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">A</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="k">from</span> <span class="n">mem_of_mem_diff</span> <span class="n">h</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">B</span><span class="bp">ᶜ</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">\</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">have</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∉</span> <span class="n">B</span> <span class="o">:=</span> <span class="n">not_mem_of_mem_diff</span> <span class="n">h</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="bp">ᶜ</span> <span class="k">from</span> <span class="n">this</span>
</pre></div>
</div>
</div></div>
<div class="section" id="some-identities">
<h2><span class="section-number">12.2. </span>Some Identities<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#some-identities" title="Permalink to this headline">¶</a></h2>
<p>Here is the proof of the first identity that we proved informally in the previous chapter:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C)%20%3D%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C)%20%3A%3D%20by%0A%20%20ext%20x%0A%20%20apply%20Iff.intro%0A%20%20.%20intro%20(hx%20%3A%20x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C))%0A%20%20%20%20have%20hA%3A%20x%20%E2%88%88%20A%20%3A%3D%20hx.left%0A%20%20%20%20have%20hBC%3A%20x%20%E2%88%88%20B%20%E2%88%AA%20C%20%3A%3D%20hx.right%0A%20%20%20%20cases%20hBC%20with%0A%20%20%20%20%7C%20inl%20hB%20%3D%3E%0A%20%20%20%20%20%20have%20%3A%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20%3A%3D%20%E2%9F%A8hA%2C%20hB%E2%9F%A9%0A%20%20%20%20%20%20show%20x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C)%0A%20%20%20%20%20%20apply%20Or.inl%0A%20%20%20%20%20%20assumption%0A%20%20%20%20%7C%20inr%20hC%20%3D%3E%0A%20%20%20%20%20%20have%20%3A%20x%20%E2%88%88%20A%20%E2%88%A9%20C%20%3A%3D%20%E2%9F%A8hA%2C%20hC%E2%9F%A9%0A%20%20%20%20%20%20show%20x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C)%0A%20%20%20%20%20%20apply%20Or.inr%0A%20%20%20%20%20%20assumption%0A%20%20.%20intro%20(hx%20%3A%20x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C))%0A%20%20%20%20cases%20hx%20with%0A%20%20%20%20%7C%20inl%20h%20%3D%3E%0A%20%20%20%20%20%20show%20x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C)%0A%20%20%20%20%20%20apply%20And.intro%0A%20%20%20%20%20%20.%20show%20x%20%E2%88%88%20A%0A%20%20%20%20%20%20%20%20exact%20h.left%0A%20%20%20%20%20%20.%20show%20x%20%E2%88%88%20B%20%E2%88%AA%20C%0A%20%20%20%20%20%20%20%20apply%20Or.inl%0A%20%20%20%20%20%20%20%20show%20x%20%E2%88%88%20B%0A%20%20%20%20%20%20%20%20exact%20h.right%0A%20%20%20%20%7C%20inr%20h%20%3D%3E%0A%20%20%20%20%20%20show%20x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C)%0A%20%20%20%20%20%20apply%20And.intro%0A%20%20%20%20%20%20.%20show%20x%20%E2%88%88%20A%0A%20%20%20%20%20%20%20%20exact%20h.left%0A%20%20%20%20%20%20.%20show%20x%20%E2%88%88%20B%20%E2%88%AA%20C%0A%20%20%20%20%20%20%20%20apply%20Or.inr%0A%20%20%20%20%20%20%20%20show%20x%20%E2%88%88%20C%0A%20%20%20%20%20%20%20%20exact%20h.right%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">)</span> <span class="bp">=</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">ext</span> <span class="n">x</span>
  <span class="n">apply</span> <span class="n">Iff.intro</span>
  <span class="bp">.</span> <span class="n">intro</span> <span class="o">(</span><span class="n">hx</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">))</span>
    <span class="k">have</span> <span class="n">hA</span><span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="o">:=</span> <span class="n">hx.left</span>
    <span class="k">have</span> <span class="n">hBC</span><span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span> <span class="o">:=</span> <span class="n">hx.right</span>
    <span class="n">cases</span> <span class="n">hBC</span> <span class="k">with</span>
    <span class="bp">|</span> <span class="n">inl</span> <span class="n">hB</span> <span class="bp">=&gt;</span>
      <span class="k">have</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="o">:=</span> <span class="o">⟨</span><span class="n">hA</span><span class="o">,</span> <span class="n">hB</span><span class="o">⟩</span>
      <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">)</span>
      <span class="n">apply</span> <span class="n">Or.inl</span>
      <span class="n">assumption</span>
    <span class="bp">|</span> <span class="n">inr</span> <span class="n">hC</span> <span class="bp">=&gt;</span>
      <span class="k">have</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span> <span class="o">:=</span> <span class="o">⟨</span><span class="n">hA</span><span class="o">,</span> <span class="n">hC</span><span class="o">⟩</span>
      <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">)</span>
      <span class="n">apply</span> <span class="n">Or.inr</span>
      <span class="n">assumption</span>
  <span class="bp">.</span> <span class="n">intro</span> <span class="o">(</span><span class="n">hx</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">))</span>
    <span class="n">cases</span> <span class="n">hx</span> <span class="k">with</span>
    <span class="bp">|</span> <span class="n">inl</span> <span class="n">h</span> <span class="bp">=&gt;</span>
      <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">)</span>
      <span class="n">apply</span> <span class="n">And.intro</span>
      <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span>
        <span class="n">exact</span> <span class="n">h.left</span>
      <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span>
        <span class="n">apply</span> <span class="n">Or.inl</span>
        <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span>
        <span class="n">exact</span> <span class="n">h.right</span>
    <span class="bp">|</span> <span class="n">inr</span> <span class="n">h</span> <span class="bp">=&gt;</span>
      <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">)</span>
      <span class="n">apply</span> <span class="n">And.intro</span>
      <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span>
        <span class="n">exact</span> <span class="n">h.left</span>
      <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span>
        <span class="n">apply</span> <span class="n">Or.inr</span>
        <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">C</span>
        <span class="n">exact</span> <span class="n">h.right</span>
</pre></div>
</div>
</div><p>Notice that it is considerably longer than the
informal proof in the last chapter,
because we have spelled out every last detail.
Unfortunately, this does not necessarily make it more readable.
Keep in mind that you can always write long proofs incrementally,
using <code class="docutils literal notranslate"><span class="pre">sorry</span></code>.
You can also break up long proofs into smaller pieces:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Atheorem%20inter_union_subset%20%7Bx%7D%20%3A%0A%20%20%20%20(x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C))%20%E2%86%92%20(x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C))%20%3A%3D%20by%0A%20%20intro%20(hx%20%3A%20x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C))%0A%20%20have%20hA%3A%20x%20%E2%88%88%20A%20%3A%3D%20hx.left%0A%20%20have%20hBC%3A%20x%20%E2%88%88%20B%20%E2%88%AA%20C%20%3A%3D%20hx.right%0A%20%20cases%20hBC%20with%0A%20%20%7C%20inl%20hB%20%3D%3E%0A%20%20%20%20have%20%3A%20x%20%E2%88%88%20A%20%E2%88%A9%20B%20%3A%3D%20%E2%9F%A8hA%2C%20hB%E2%9F%A9%0A%20%20%20%20show%20x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C)%0A%20%20%20%20apply%20Or.inl%0A%20%20%20%20assumption%0A%20%20%7C%20inr%20hC%20%3D%3E%0A%20%20%20%20have%20%3A%20x%20%E2%88%88%20A%20%E2%88%A9%20C%20%3A%3D%20%E2%9F%A8hA%2C%20hC%E2%9F%A9%0A%20%20%20%20show%20x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C)%0A%20%20%20%20apply%20Or.inr%0A%20%20%20%20assumption%0A%0Atheorem%20inter_union_inter_subset%20%7Bx%7D%20%3A%0A%20%20%20%20(x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C))%20%E2%86%92%20(x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C))%20%3A%3D%20by%0A%20%20intro%20(hx%20%3A%20x%20%E2%88%88%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C))%0A%20%20cases%20hx%20with%0A%20%20%7C%20inl%20h%20%3D%3E%0A%20%20%20%20show%20x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C)%0A%20%20%20%20apply%20And.intro%0A%20%20%20%20.%20show%20x%20%E2%88%88%20A%0A%20%20%20%20%20%20exact%20h.left%0A%20%20%20%20.%20show%20x%20%E2%88%88%20B%20%E2%88%AA%20C%0A%20%20%20%20%20%20apply%20Or.inl%0A%20%20%20%20%20%20show%20x%20%E2%88%88%20B%0A%20%20%20%20%20%20exact%20h.right%0A%20%20%7C%20inr%20h%20%3D%3E%0A%20%20%20%20show%20x%20%E2%88%88%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C)%0A%20%20%20%20apply%20And.intro%0A%20%20%20%20.%20show%20x%20%E2%88%88%20A%0A%20%20%20%20%20%20exact%20h.left%0A%20%20%20%20.%20show%20x%20%E2%88%88%20B%20%E2%88%AA%20C%0A%20%20%20%20%20%20apply%20Or.inr%0A%20%20%20%20%20%20show%20x%20%E2%88%88%20C%0A%20%20%20%20%20%20exact%20h.right%0A%0Aexample%20%3A%20A%20%E2%88%A9%20(B%20%E2%88%AA%20C)%20%3D%20(A%20%E2%88%A9%20B)%20%E2%88%AA%20(A%20%E2%88%A9%20C)%20%3A%3D%20by%0A%20%20ext%20x%0A%20%20constructor%0A%20%20.%20exact%20inter_union_subset%20A%20B%20C%0A%20%20.%20exact%20inter_union_inter_subset%20A%20B%20C%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">theorem</span> <span class="n">inter_union_subset</span> <span class="o">{</span><span class="n">x</span><span class="o">}</span> <span class="o">:</span>
    <span class="o">(</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">))</span> <span class="bp">→</span> <span class="o">(</span><span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">))</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">hx</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">))</span>
  <span class="k">have</span> <span class="n">hA</span><span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="o">:=</span> <span class="n">hx.left</span>
  <span class="k">have</span> <span class="n">hBC</span><span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span> <span class="o">:=</span> <span class="n">hx.right</span>
  <span class="n">cases</span> <span class="n">hBC</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">inl</span> <span class="n">hB</span> <span class="bp">=&gt;</span>
    <span class="k">have</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span> <span class="o">:=</span> <span class="o">⟨</span><span class="n">hA</span><span class="o">,</span> <span class="n">hB</span><span class="o">⟩</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">)</span>
    <span class="n">apply</span> <span class="n">Or.inl</span>
    <span class="n">assumption</span>
  <span class="bp">|</span> <span class="n">inr</span> <span class="n">hC</span> <span class="bp">=&gt;</span>
    <span class="k">have</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span> <span class="o">:=</span> <span class="o">⟨</span><span class="n">hA</span><span class="o">,</span> <span class="n">hC</span><span class="o">⟩</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">)</span>
    <span class="n">apply</span> <span class="n">Or.inr</span>
    <span class="n">assumption</span>

<span class="kd">theorem</span> <span class="n">inter_union_inter_subset</span> <span class="o">{</span><span class="n">x</span><span class="o">}</span> <span class="o">:</span>
    <span class="o">(</span><span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">))</span> <span class="bp">→</span> <span class="o">(</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">))</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">hx</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">))</span>
  <span class="n">cases</span> <span class="n">hx</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">inl</span> <span class="n">h</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">)</span>
    <span class="n">apply</span> <span class="n">And.intro</span>
    <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span>
      <span class="n">exact</span> <span class="n">h.left</span>
    <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span>
      <span class="n">apply</span> <span class="n">Or.inl</span>
      <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span>
      <span class="n">exact</span> <span class="n">h.right</span>
  <span class="bp">|</span> <span class="n">inr</span> <span class="n">h</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">)</span>
    <span class="n">apply</span> <span class="n">And.intro</span>
    <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span>
      <span class="n">exact</span> <span class="n">h.left</span>
    <span class="bp">.</span> <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span>
      <span class="n">apply</span> <span class="n">Or.inr</span>
      <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">C</span>
      <span class="n">exact</span> <span class="n">h.right</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span> <span class="bp">∪</span> <span class="n">C</span><span class="o">)</span> <span class="bp">=</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∪</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">ext</span> <span class="n">x</span>
  <span class="n">constructor</span>
  <span class="bp">.</span> <span class="n">exact</span> <span class="n">inter_union_subset</span> <span class="n">A</span> <span class="n">B</span> <span class="n">C</span>
  <span class="bp">.</span> <span class="n">exact</span> <span class="n">inter_union_inter_subset</span> <span class="n">A</span> <span class="n">B</span> <span class="n">C</span>
</pre></div>
</div>
</div><p>Notice that the two theorems depend on the variables <code class="docutils literal notranslate"><span class="pre">A</span></code>, <code class="docutils literal notranslate"><span class="pre">B</span></code>, and <code class="docutils literal notranslate"><span class="pre">C</span></code>, which have to be supplied as arguments when they are applied. They also depend on the underlying type, <code class="docutils literal notranslate"><span class="pre">U</span></code>, but because the variable <code class="docutils literal notranslate"><span class="pre">U</span></code> was marked implicit, Lean figures it out from the context.</p>
<p>Notice also that instead of using <code class="docutils literal notranslate"><span class="pre">apply</span> <span class="pre">Iff.intro</span></code> to convert the goal
<code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">∩</span> <span class="pre">(B</span> <span class="pre">∪</span> <span class="pre">C)</span> <span class="pre">↔</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">∩</span> <span class="pre">B</span> <span class="pre">∪</span> <span class="pre">A</span> <span class="pre">∩</span> <span class="pre">C</span></code> into
proving each direction,
we can simply use the tactic <code class="docutils literal notranslate"><span class="pre">constructor</span></code>.
The tactic <code class="docutils literal notranslate"><span class="pre">constructor</span></code> also works for splitting up the goal <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">∧</span> <span class="pre">B</span></code>
and the goal <code class="docutils literal notranslate"><span class="pre">∃</span> <span class="pre">x,</span> <span class="pre">P</span> <span class="pre">x</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=section%0Avariable%20(A%20B%20%3A%20Prop)%0A%0Aexample%20%3A%20A%20%E2%88%A7%20B%20%3A%3D%20by%0Aconstructor%0A.%20show%20A%0A%20%20%20%20sorry%0A.%20show%20B%0A%20%20%20%20sorry%0Aend%0A%0A%0Asection%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(P%20%3A%20U%20%E2%86%92%20Prop)%0Avariable%20(a%20%3A%20U)%0A%0Aexample%20%3A%20%E2%88%83%20x%2C%20P%20x%20%3A%3D%20by%0Aconstructor%0A.%20show%20P%20a%0A%20%20%20%20sorry%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">section</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="o">:</span> <span class="kt">Prop</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">∧</span> <span class="n">B</span> <span class="o">:=</span> <span class="kd">by</span>
<span class="n">constructor</span>
<span class="bp">.</span> <span class="k">show</span> <span class="n">A</span>
    <span class="gr">sorry</span>
<span class="bp">.</span> <span class="k">show</span> <span class="n">B</span>
    <span class="gr">sorry</span>
<span class="kd">end</span>


<span class="kn">section</span>
<span class="kd">variable</span> <span class="o">{</span><span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">P</span> <span class="o">:</span> <span class="n">U</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">a</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">:</span> <span class="bp">∃</span> <span class="n">x</span><span class="o">,</span> <span class="n">P</span> <span class="n">x</span> <span class="o">:=</span> <span class="kd">by</span>
<span class="n">constructor</span>
<span class="bp">.</span> <span class="k">show</span> <span class="n">P</span> <span class="n">a</span>
    <span class="gr">sorry</span>
<span class="kd">end</span>
</pre></div>
</div>
</div><p>In the last chapter, we showed <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-7-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=&quot;false&quot;>(</mo><mi>A</mi><mo>&amp;#x2229;</mo><mover><mi>B</mi><mo accent=&quot;false&quot;>&amp;#x00AF;</mo></mover><mo stretchy=&quot;false&quot;>)</mo><mo>&amp;#x222A;</mo><mi>B</mi><mo>=</mo><mi>B</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-50" style="width: 9.158em; display: inline-block;"><span style="display: inline-block; position: relative; width: 7.353em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.024em, 1007.35em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-51"><span class="mo" id="MathJax-Span-52" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-53" style="font-family: MathJax_Math-italic;">A</span><span class="mo" id="MathJax-Span-54" style="font-family: MathJax_Main; padding-left: 0.222em;">∩</span><span class="munderover" id="MathJax-Span-55" style="padding-left: 0.222em;"><span style="display: inline-block; position: relative; width: 0.759em; height: 0px;"><span style="position: absolute; clip: rect(3.16em, 1000.76em, 4.127em, -1000em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-56" style="font-family: MathJax_Math-italic;">B</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; clip: rect(3.325em, 1000.74em, 3.742em, -1000em); top: -4.483em; left: 0.012em;"><span class="mo" id="MathJax-Span-57" style=""><span style="display: inline-block; position: relative; width: 0.735em; height: 0px;"><span style="position: absolute; top: -3.985em; left: -0.049em;"><span style="font-size: 70.7%; font-family: MathJax_Main;">¯</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.985em; left: 0.431em;"><span style="font-size: 70.7%; font-family: MathJax_Main;">¯</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.985em; left: 0.111em;"><span style="font-size: 70.7%; font-family: MathJax_Main;">¯</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.985em; left: 0.295em;"><span style="font-size: 70.7%; font-family: MathJax_Main;">¯</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span><span class="mo" id="MathJax-Span-58" style="font-family: MathJax_Main;">)</span><span class="mo" id="MathJax-Span-59" style="font-family: MathJax_Main; padding-left: 0.222em;">∪</span><span class="mi" id="MathJax-Span-60" style="font-family: MathJax_Math-italic; padding-left: 0.222em;">B</span><span class="mo" id="MathJax-Span-61" style="font-family: MathJax_Main; padding-left: 0.278em;">=</span><span class="mi" id="MathJax-Span-62" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">B</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.687em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>A</mi><mo>∩</mo><mover><mi>B</mi><mo accent="false">¯</mo></mover><mo stretchy="false">)</mo><mo>∪</mo><mi>B</mi><mo>=</mo><mi>B</mi></math></span></span></span>.
Here is the corresponding proof in Lean:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20(A%20%E2%88%A9%20B%E1%B6%9C)%20%E2%88%AA%20B%20%3D%20A%20%E2%88%AA%20B%20%3A%3D%0Acalc%0A%20%20(A%20%E2%88%A9%20B%E1%B6%9C)%20%E2%88%AA%20B%20%3D%20(A%20%E2%88%AA%20B)%20%E2%88%A9%20(B%E1%B6%9C%20%E2%88%AA%20B)%20%3A%3D%20by%20rw%20%5Binter_union_distrib_right%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20(A%20%E2%88%AA%20B)%20%E2%88%A9%20univ%20%20%20%20%20%3A%3D%20by%20rw%20%5Bcompl_union_self%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20A%20%E2%88%AA%20B%20%20%20%20%20%20%20%20%20%20%20%20%20%20%3A%3D%20by%20rw%20%5Binter_univ%5D%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="bp">ᶜ</span><span class="o">)</span> <span class="bp">∪</span> <span class="n">B</span> <span class="bp">=</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">calc</span>
  <span class="o">(</span><span class="n">A</span> <span class="bp">∩</span> <span class="n">B</span><span class="bp">ᶜ</span><span class="o">)</span> <span class="bp">∪</span> <span class="n">B</span> <span class="bp">=</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∩</span> <span class="o">(</span><span class="n">B</span><span class="bp">ᶜ</span> <span class="bp">∪</span> <span class="n">B</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">inter_union_distrib_right</span><span class="o">]</span>
             <span class="n">_</span> <span class="bp">=</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span><span class="o">)</span> <span class="bp">∩</span> <span class="n">univ</span>     <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">compl_union_self</span><span class="o">]</span>
             <span class="n">_</span> <span class="bp">=</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span>              <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">inter_univ</span><span class="o">]</span>
</pre></div>
</div>
</div><p>Translated to propositions, the theorem above states that for every pair of elements <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-8-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>A</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-63" style="width: 0.951em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.759em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.324em, 1000.74em, 2.324em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-64"><span class="mi" id="MathJax-Span-65" style="font-family: MathJax_Math-italic;">A</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 1.005em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math></span></span></span> and <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-9-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>B</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-66" style="width: 0.951em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.759em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.357em, 1000.76em, 2.324em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-67"><span class="mi" id="MathJax-Span-68" style="font-family: MathJax_Math-italic;">B</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.965em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>B</mi></math></span></span></span> in a Boolean algebra, <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-10-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=&quot;false&quot;>(</mo><mi>A</mi><mo>&amp;#x2227;</mo><mi mathvariant=&quot;normal&quot;>&amp;#x00AC;</mi><mi>B</mi><mo stretchy=&quot;false&quot;>)</mo><mo>&amp;#x2228;</mo><mi>B</mi><mo>=</mo><mi>B</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-69" style="width: 9.964em; display: inline-block;"><span style="display: inline-block; position: relative; width: 8.017em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1008.01em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-70"><span class="mo" id="MathJax-Span-71" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-72" style="font-family: MathJax_Math-italic;">A</span><span class="mo" id="MathJax-Span-73" style="font-family: MathJax_Main; padding-left: 0.222em;">∧</span><span class="mi" id="MathJax-Span-74" style="font-family: MathJax_Main; padding-left: 0.222em;">¬</span><span class="mi" id="MathJax-Span-75" style="font-family: MathJax_Math-italic;">B</span><span class="mo" id="MathJax-Span-76" style="font-family: MathJax_Main;">)</span><span class="mo" id="MathJax-Span-77" style="font-family: MathJax_Main; padding-left: 0.222em;">∨</span><span class="mi" id="MathJax-Span-78" style="font-family: MathJax_Math-italic; padding-left: 0.222em;">B</span><span class="mo" id="MathJax-Span-79" style="font-family: MathJax_Main; padding-left: 0.278em;">=</span><span class="mi" id="MathJax-Span-80" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">B</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>A</mi><mo>∧</mo><mi mathvariant="normal">¬</mi><mi>B</mi><mo stretchy="false">)</mo><mo>∨</mo><mi>B</mi><mo>=</mo><mi>B</mi></math></span></span></span>.</p>
</div>
<div class="section" id="indexed-families">
<h2><span class="section-number">12.3. </span>Indexed Families<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#indexed-families" title="Permalink to this headline">¶</a></h2>
<p>Remember that if <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-11-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=&quot;false&quot;>(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mo stretchy=&quot;false&quot;>)</mo><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mi>i</mi><mo>&amp;#x2208;</mo><mi>I</mi></mrow></msub></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-81" style="width: 3.703em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.989em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1002.99em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-82"><span class="mo" id="MathJax-Span-83" style="font-family: MathJax_Main;">(</span><span class="msubsup" id="MathJax-Span-84"><span style="display: inline-block; position: relative; width: 1.069em; height: 0px;"><span style="position: absolute; clip: rect(3.127em, 1000.73em, 4.127em, -1000em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-85" style="font-family: MathJax_Math-italic;">A</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.75em;"><span class="mi" id="MathJax-Span-86" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span><span class="msubsup" id="MathJax-Span-87"><span style="display: inline-block; position: relative; width: 1.536em; height: 0px;"><span style="position: absolute; clip: rect(3.093em, 1000.29em, 4.377em, -1000em); top: -3.985em; left: 0em;"><span class="mo" id="MathJax-Span-88" style="font-family: MathJax_Main;">)</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.389em;"><span class="texatom" id="MathJax-Span-89"><span class="mrow" id="MathJax-Span-90"><span class="mi" id="MathJax-Span-91" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span class="mo" id="MathJax-Span-92" style="font-size: 70.7%; font-family: MathJax_Main;">∈</span><span class="mi" id="MathJax-Span-93" style="font-size: 70.7%; font-family: MathJax_Math-italic;">I<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.045em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><msub><mi>A</mi><mi>i</mi></msub><msub><mo stretchy="false">)</mo><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></msub></math></span></span></span>
is a family of sets indexed by <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-12-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>I</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-94" style="width: 0.667em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.522em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.357em, 1000.52em, 2.324em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-95"><span class="mi" id="MathJax-Span-96" style="font-family: MathJax_Math-italic;">I<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.064em;"></span></span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 0.965em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>I</mi></math></span></span></span>,
then <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-13-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><munder><mo>&amp;#x22C2;</mo><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mi>i</mi><mo>&amp;#x2208;</mo><mi>I</mi></mrow></munder><msub><mi>A</mi><mi>i</mi></msub></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-97" style="width: 4.035em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.226em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1003.23em, 2.638em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-98"><span class="munderover" id="MathJax-Span-99"><span style="display: inline-block; position: relative; width: 1.98em; height: 0px;"><span style="position: absolute; clip: rect(3.093em, 1000.78em, 4.377em, -1000em); top: -3.985em; left: 0em;"><span class="mo" id="MathJax-Span-100" style="font-family: MathJax_Size1; vertical-align: 0em;">⋂</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.7em; left: 0.833em;"><span class="texatom" id="MathJax-Span-101"><span class="mrow" id="MathJax-Span-102"><span class="mi" id="MathJax-Span-103" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span class="mo" id="MathJax-Span-104" style="font-size: 70.7%; font-family: MathJax_Main;">∈</span><span class="mi" id="MathJax-Span-105" style="font-size: 70.7%; font-family: MathJax_Math-italic;">I<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.045em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span><span class="msubsup" id="MathJax-Span-106" style="padding-left: 0.167em;"><span style="display: inline-block; position: relative; width: 1.069em; height: 0px;"><span style="position: absolute; clip: rect(3.127em, 1000.73em, 4.127em, -1000em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-107" style="font-family: MathJax_Math-italic;">A</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.75em;"><span class="mi" id="MathJax-Span-108" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.447em; border-left: 0px solid; width: 0px; height: 1.435em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><munder><mo>⋂</mo><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>A</mi><mi>i</mi></msub></math></span></span></span> denotes the intersection of all the sets <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-14-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><msub><mi>A</mi><mi>i</mi></msub></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-109" style="width: 1.378em; display: inline-block;"><span style="display: inline-block; position: relative; width: 1.091em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.324em, 1001.09em, 2.482em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-110"><span class="msubsup" id="MathJax-Span-111"><span style="display: inline-block; position: relative; width: 1.069em; height: 0px;"><span style="position: absolute; clip: rect(3.127em, 1000.73em, 4.127em, -1000em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-112" style="font-family: MathJax_Math-italic;">A</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.75em;"><span class="mi" id="MathJax-Span-113" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.254em; border-left: 0px solid; width: 0px; height: 1.201em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><msub><mi>A</mi><mi>i</mi></msub></math></span></span></span>, and <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-15-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><munder><mo>&amp;#x22C3;</mo><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mi>i</mi><mo>&amp;#x2208;</mo><mi>I</mi></mrow></munder><msub><mi>A</mi><mi>i</mi></msub></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-114" style="width: 4.035em; display: inline-block;"><span style="display: inline-block; position: relative; width: 3.226em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1003.23em, 2.638em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-115"><span class="munderover" id="MathJax-Span-116"><span style="display: inline-block; position: relative; width: 1.98em; height: 0px;"><span style="position: absolute; clip: rect(3.093em, 1000.78em, 4.377em, -1000em); top: -3.985em; left: 0em;"><span class="mo" id="MathJax-Span-117" style="font-family: MathJax_Size1; vertical-align: 0em;">⋃</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.7em; left: 0.833em;"><span class="texatom" id="MathJax-Span-118"><span class="mrow" id="MathJax-Span-119"><span class="mi" id="MathJax-Span-120" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span class="mo" id="MathJax-Span-121" style="font-size: 70.7%; font-family: MathJax_Main;">∈</span><span class="mi" id="MathJax-Span-122" style="font-size: 70.7%; font-family: MathJax_Math-italic;">I<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.045em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span><span class="msubsup" id="MathJax-Span-123" style="padding-left: 0.167em;"><span style="display: inline-block; position: relative; width: 1.069em; height: 0px;"><span style="position: absolute; clip: rect(3.127em, 1000.73em, 4.127em, -1000em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-124" style="font-family: MathJax_Math-italic;">A</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.75em;"><span class="mi" id="MathJax-Span-125" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.447em; border-left: 0px solid; width: 0px; height: 1.435em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><munder><mo>⋃</mo><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>∈</mo><mi>I</mi></mrow></munder><msub><mi>A</mi><mi>i</mi></msub></math></span></span></span> denotes their union.
In Lean, we can specify that <code class="docutils literal notranslate"><span class="pre">A</span></code> is a family of sets by writing
<code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">:</span> <span class="pre">I</span> <span class="pre">→</span> <span class="pre">Set</span> <span class="pre">U</span></code> where <code class="docutils literal notranslate"><span class="pre">I</span></code> is a <code class="docutils literal notranslate"><span class="pre">Type</span></code>.
In other words, a family of sets is really a function which for each element
<code class="docutils literal notranslate"><span class="pre">i</span></code> of type <code class="docutils literal notranslate"><span class="pre">I</span></code> returns a set <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">i</span></code>.
We can then define the union and intersection as follows:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0A%0Adef%20iUnion%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20%3A%20Set%20U%20%3A%3D%20%7B%20x%20%7C%20%E2%88%83%20i%20%3A%20I%2C%20x%20%E2%88%88%20A%20i%20%7D%0A%0Adef%20iInter%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20%3A%20Set%20U%20%3A%3D%20%7B%20x%20%7C%20%E2%88%80%20i%20%3A%20I%2C%20x%20%E2%88%88%20A%20i%20%7D%0A%0Asection%0Avariable%20(x%20%3A%20U)%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%0A%0Aexample%20(h%20%3A%20x%20%E2%88%88%20iUnion%20A)%20%3A%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%20%3A%3D%20h%0Aexample%20(h%20%3A%20x%20%E2%88%88%20iInter%20A)%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%20%3A%3D%20h%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Set.Basic</span>

<span class="kd">variable</span> <span class="o">{</span><span class="n">I</span> <span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>

<span class="kd">def</span> <span class="n">iUnion</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span> <span class="o">:=</span> <span class="o">{</span> <span class="n">x</span> <span class="bp">|</span> <span class="bp">∃</span> <span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">}</span>

<span class="kd">def</span> <span class="n">iInter</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span> <span class="o">:=</span> <span class="o">{</span> <span class="n">x</span> <span class="bp">|</span> <span class="bp">∀</span> <span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">}</span>

<span class="kn">section</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">iUnion</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="bp">∃</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">h</span>
<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">iInter</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">h</span>
<span class="kd">end</span>
</pre></div>
</div>
</div><p>The examples show that Lean can unfold the definitions so that <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">iInter</span> <span class="pre">A</span></code> can be treated as <code class="docutils literal notranslate"><span class="pre">∀</span> <span class="pre">i,</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">i</span></code> and <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">iUnion</span> <span class="pre">A</span></code> can be treated as <code class="docutils literal notranslate"><span class="pre">∃</span> <span class="pre">i,</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">i</span></code>. To refresh your memory as to how to work with the universal and existential quantifiers in Lean, see <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/first_order_logic_in_lean.html#first-order-logic-in-lean"><span class="std std-numref">Chapters 9</span></a>. We can then define notation for the indexed union and intersection:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0A%0Adef%20iUnion%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20%3A%20Set%20U%20%3A%3D%20%7B%20x%20%7C%20%E2%88%83%20i%20%3A%20I%2C%20x%20%E2%88%88%20A%20i%20%7D%0Adef%20iInter%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20%3A%20Set%20U%20%3A%3D%20%7B%20x%20%7C%20%E2%88%80%20i%20%3A%20I%2C%20x%20%E2%88%88%20A%20i%20%7D%0A%0A--%20BEGIN%0A%0Anotation3%20%22%E2%8B%83%20%22(...)%22%2C%20%22r%3A60%3A(scoped%20f%20%3D%3E%20iUnion%20f)%20%3D%3E%20r%0A%0Anotation3%20%22%E2%8B%82%20%22(...)%22%2C%20%22r%3A60%3A(scoped%20f%20%3D%3E%20iInter%20f)%20%3D%3E%20r%0A%0Avariable%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20(x%20%3A%20U)%0A%0Aexample%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20%3A%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%20%3A%3D%20h%0Aexample%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%20%3A%3D%20h%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="n">notation3</span> <span class="s2">"⋃ "</span><span class="o">(</span><span class="bp">...</span><span class="o">)</span><span class="s2">", "</span><span class="n">r</span><span class="o">:</span><span class="mi">60</span><span class="o">:(</span><span class="n">scoped</span> <span class="n">f</span> <span class="bp">=&gt;</span> <span class="n">iUnion</span> <span class="n">f</span><span class="o">)</span> <span class="bp">=&gt;</span> <span class="n">r</span>

<span class="n">notation3</span> <span class="s2">"⋂ "</span><span class="o">(</span><span class="bp">...</span><span class="o">)</span><span class="s2">", "</span><span class="n">r</span><span class="o">:</span><span class="mi">60</span><span class="o">:(</span><span class="n">scoped</span> <span class="n">f</span> <span class="bp">=&gt;</span> <span class="n">iInter</span> <span class="n">f</span><span class="o">)</span> <span class="bp">=&gt;</span> <span class="n">r</span>

<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="bp">∃</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">h</span>
<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">h</span>
</pre></div>
</div>
</div><p>You can type <code class="docutils literal notranslate"><span class="pre">⋂</span></code> and <code class="docutils literal notranslate"><span class="pre">⋃</span></code> with <code class="docutils literal notranslate"><span class="pre">\I</span></code> and <code class="docutils literal notranslate"><span class="pre">\Un</span></code>, respectively. As with quantifiers, the notation <code class="docutils literal notranslate"><span class="pre">⋃</span> <span class="pre">i,</span> <span class="pre">A</span> <span class="pre">i</span></code> and <code class="docutils literal notranslate"><span class="pre">⋂</span> <span class="pre">i,</span> <span class="pre">A</span> <span class="pre">i</span></code> bind the variable <code class="docutils literal notranslate"><span class="pre">i</span></code> in the expression, and the scope extends as widely as possible. For example, if you write <code class="docutils literal notranslate"><span class="pre">⋂</span> <span class="pre">i,</span> <span class="pre">A</span> <span class="pre">i</span> <span class="pre">∪</span> <span class="pre">B</span></code>, Lean assumes that the ith element of the sequence is <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">i</span> <span class="pre">∪</span> <span class="pre">B</span></code>. If you want to restrict the scope more narrowly, use parentheses.</p>
<p>The good news is that Lean’s library does define indexed union and intersection, with this notation, and the definitions are made available with <code class="docutils literal notranslate"><span class="pre">import</span> <span class="pre">Mathlib.Order.SetNotation</span></code>.
The bad news is that it uses a different definition, so that <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">iInter</span> <span class="pre">A</span></code> and <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">iUnion</span> <span class="pre">A</span></code> are <em>not</em> definitionally equal to <code class="docutils literal notranslate"><span class="pre">∀</span> <span class="pre">i,</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">i</span></code> and <code class="docutils literal notranslate"><span class="pre">∃</span> <span class="pre">i,</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">i</span></code>, as above.
The good news is that Lean at least knows that they are equivalent,
by two lemmas called <code class="docutils literal notranslate"><span class="pre">mem_iUnion</span></code> and <code class="docutils literal notranslate"><span class="pre">mem_iInter</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20B%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0A%23check%20mem_iUnion%0A%23check%20mem_iInter%0A%0Atheorem%20exists_of_mem_Union%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20%3A%0A%20%20%20%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5B%E2%86%90%20mem_iUnion%5D%0A%20%20assumption%0A%0Atheorem%20mem_Union_of_exists%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%0A%20%20%20%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%0A%20%20assumption%0A%0Atheorem%20forall_of_mem_Inter%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20%3A%0A%20%20%20%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5B%E2%86%90%20mem_iInter%5D%0A%20%20assumption%0A%0Atheorem%20mem_Inter_of_forall%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%0A%20%20%20%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%0A%20%20assumption" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Order.SetNotation</span>
<span class="kn">open</span> <span class="n">Set</span>

<span class="kd">variable</span> <span class="o">{</span><span class="n">I</span> <span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="n">B</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">}</span>

<span class="k">#check</span> <span class="n">mem_iUnion</span>
<span class="k">#check</span> <span class="n">mem_iInter</span>

<span class="kd">theorem</span> <span class="n">exists_of_mem_Union</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span>
    <span class="bp">∃</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="bp">←</span> <span class="n">mem_iUnion</span><span class="o">]</span>
  <span class="n">assumption</span>

<span class="kd">theorem</span> <span class="n">mem_Union_of_exists</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="bp">∃</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span>
    <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="n">mem_iUnion</span><span class="o">]</span>
  <span class="n">assumption</span>

<span class="kd">theorem</span> <span class="n">forall_of_mem_Inter</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span>
    <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="bp">←</span> <span class="n">mem_iInter</span><span class="o">]</span>
  <span class="n">assumption</span>

<span class="kd">theorem</span> <span class="n">mem_Inter_of_forall</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span>
    <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="n">mem_iInter</span><span class="o">]</span>
  <span class="n">assumption</span>
</pre></div>
</div>
</div><p>The lemma <code class="docutils literal notranslate"><span class="pre">mem_iUnion</span></code> says that for any <code class="docutils literal notranslate"><span class="pre">x</span></code> we have
<code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">⋃</span> <span class="pre">i,</span> <span class="pre">s</span> <span class="pre">i</span> <span class="pre">↔</span> <span class="pre">∃</span> <span class="pre">i,</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">s</span> <span class="pre">i</span></code>.
Being a biconditional,
we can use <code class="docutils literal notranslate"><span class="pre">rewrite</span></code> to substitute instances of each side of the other.</p>
<p>Here is an example of how these can be used:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Asection%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20B%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0A%0A--%20BEGIN%0Aexample%20%3A%20(%E2%8B%82%20i%2C%20A%20i%20%E2%88%A9%20B%20i)%20%3D%20(%E2%8B%82%20i%2C%20A%20i)%20%E2%88%A9%20(%E2%8B%82%20i%2C%20B%20i)%20%3A%3D%20by%0A%20%20ext%20x%0A%20%20show%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%E2%88%A9%20B%20i%20%E2%86%94%20x%20%E2%88%88%20(%E2%8B%82%20i%2C%20A%20i)%20%E2%88%A7%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20B%20i%0A%20%20rw%20%5Bmem_iInter%2C%20mem_iInter%2C%20mem_iInter%5D%0A%20%20show%20(%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%88%A7%20x%20%E2%88%88%20B%20i)%20%E2%86%94%0A%20%20%20%20(%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i)%20%E2%88%A7%20(%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20B%20i)%0A%20%20constructor%0A%20%20.%20intro%20(h%20%3A%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%88%A7%20x%20%E2%88%88%20B%20i)%0A%20%20%20%20show%20(%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i)%20%E2%88%A7%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20B%20i%0A%20%20%20%20constructor%0A%20%20%20%20.%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20%20%20%20%20exact%20fun%20j%20%E2%86%A6%20And.left%20%24%20h%20j%0A%20%20%20%20.%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20B%20i%0A%20%20%20%20%20%20exact%20fun%20j%20%E2%86%A6%20And.right%20%24%20h%20j%0A%20%20.%20intro%20(h%20%3A%20(%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i)%20%E2%88%A7%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20B%20i)%0A%20%20%20%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%20%E2%88%A7%20x%20%E2%88%88%20B%20i%0A%20%20%20%20exact%20fun%20j%20%E2%86%A6%20%E2%9F%A8h.left%20j%2C%20h.right%20j%E2%9F%A9%0A--%20END%0A%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∩</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="bp">=</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∩</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">ext</span> <span class="n">x</span>
  <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∩</span> <span class="n">B</span> <span class="n">i</span> <span class="bp">↔</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∧</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">B</span> <span class="n">i</span>
  <span class="n">rw</span> <span class="o">[</span><span class="n">mem_iInter</span><span class="o">,</span> <span class="n">mem_iInter</span><span class="o">,</span> <span class="n">mem_iInter</span><span class="o">]</span>
  <span class="k">show</span> <span class="o">(</span><span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∧</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="bp">↔</span>
    <span class="o">(</span><span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∧</span> <span class="o">(</span><span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span>
  <span class="n">constructor</span>
  <span class="bp">.</span> <span class="n">intro</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∧</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span>
    <span class="k">show</span> <span class="o">(</span><span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∧</span> <span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span>
    <span class="n">constructor</span>
    <span class="bp">.</span> <span class="k">show</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span>
      <span class="n">exact</span> <span class="k">fun</span> <span class="n">j</span> <span class="bp">↦</span> <span class="n">And.left</span> <span class="bp">$</span> <span class="n">h</span> <span class="n">j</span>
    <span class="bp">.</span> <span class="k">show</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span>
      <span class="n">exact</span> <span class="k">fun</span> <span class="n">j</span> <span class="bp">↦</span> <span class="n">And.right</span> <span class="bp">$</span> <span class="n">h</span> <span class="n">j</span>
  <span class="bp">.</span> <span class="n">intro</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="o">(</span><span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∧</span> <span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span>
    <span class="k">show</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∧</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span>
    <span class="n">exact</span> <span class="k">fun</span> <span class="n">j</span> <span class="bp">↦</span> <span class="o">⟨</span><span class="n">h.left</span> <span class="n">j</span><span class="o">,</span> <span class="n">h.right</span> <span class="n">j</span><span class="o">⟩</span>
</pre></div>
</div>
</div><p>We first applied extensionality.
Then we force Lean to interpret <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">(⋂</span> <span class="pre">i,</span> <span class="pre">A</span> <span class="pre">i)</span> <span class="pre">∩</span> <span class="pre">(⋂</span> <span class="pre">i,</span> <span class="pre">B</span> <span class="pre">i)</span></code>
as the definitionally equal <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">(⋂</span> <span class="pre">i,</span> <span class="pre">A</span> <span class="pre">i)</span> <span class="pre">∧</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">⋂</span> <span class="pre">i,</span> <span class="pre">B</span> <span class="pre">i</span></code>
by writing the latter after <code class="docutils literal notranslate"><span class="pre">show</span></code>.
Then we used repeated <code class="docutils literal notranslate"><span class="pre">rewrite</span></code> tactics to reduce what it means
to be a member of an indexed intersection.
Then we again force Lean to interpret <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">i</span> <span class="pre">∩</span> <span class="pre">B</span> <span class="pre">i</span></code> as
<code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">∈</span> <span class="pre">A</span> <span class="pre">i</span> <span class="pre">∧</span> <span class="pre">x</span> <span class="pre">∈</span> <span class="pre">B</span> <span class="pre">i</span></code> using show.
Finally, we prove the biconditional,
which is now entirely in terms of first order logic.</p>
<p>Even better,
we can prove introduction and elimination rules for intersection and union:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0Atheorem%20Inter.intro%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%0A%20%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20assumption%0A%0Atheorem%20Inter.elim%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20(i%20%3A%20I)%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%20at%20h%0A%20%20apply%20h%0A%0Atheorem%20Union.intro%20%7Bx%20%3A%20U%7D%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%0A%20%20show%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20exact%20%E2%9F%A8i%2C%20h%E2%9F%A9%0A%0Atheorem%20Union.elim%20%7Bb%20%3A%20Prop%7D%20%7Bx%20%3A%20U%7D%0A(h%E2%82%81%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20(h%E2%82%82%20%3A%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%86%92%20b)%20%3A%20b%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%20at%20h%E2%82%81%0A%20%20cases%20h%E2%82%81%20with%0A%20%20%7C%20intro%20i%20hi%20%3D%3E%20exact%20h%E2%82%82%20i%20hi" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Order.SetNotation</span>
<span class="kn">open</span> <span class="n">Set</span>

<span class="kd">variable</span> <span class="o">{</span><span class="n">I</span> <span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">}</span>

<span class="kd">theorem</span> <span class="n">Inter.intro</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="n">mem_iInter</span><span class="o">]</span>
  <span class="k">show</span> <span class="bp">∀</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span>
  <span class="n">assumption</span>

<span class="kd">theorem</span> <span class="n">Inter.elim</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">)</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="n">mem_iInter</span><span class="o">]</span> <span class="n">at</span> <span class="n">h</span>
  <span class="n">apply</span> <span class="n">h</span>

<span class="kd">theorem</span> <span class="n">Union.intro</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">)</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="n">mem_iUnion</span><span class="o">]</span>
  <span class="k">show</span> <span class="bp">∃</span> <span class="n">i</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span>
  <span class="n">exact</span> <span class="o">⟨</span><span class="n">i</span><span class="o">,</span> <span class="n">h</span><span class="o">⟩</span>

<span class="kd">theorem</span> <span class="n">Union.elim</span> <span class="o">{</span><span class="n">b</span> <span class="o">:</span> <span class="kt">Prop</span><span class="o">}</span> <span class="o">{</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">}</span>
<span class="o">(</span><span class="n">h₁</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">(</span><span class="n">h₂</span> <span class="o">:</span> <span class="bp">∀</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">),</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">→</span> <span class="n">b</span><span class="o">)</span> <span class="o">:</span> <span class="n">b</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">rw</span> <span class="o">[</span><span class="n">mem_iUnion</span><span class="o">]</span> <span class="n">at</span> <span class="n">h₁</span>
  <span class="n">cases</span> <span class="n">h₁</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">intro</span> <span class="n">i</span> <span class="n">hi</span> <span class="bp">=&gt;</span> <span class="n">exact</span> <span class="n">h₂</span> <span class="n">i</span> <span class="n">hi</span>
</pre></div>
</div>
</div><p>Note that here we did <code class="docutils literal notranslate"><span class="pre">rw</span> <span class="pre">[mem_iInter]</span> <span class="pre">at</span> <span class="pre">h</span></code> instructs Lean
to do the substitution along the biconditional proven by <code class="docutils literal notranslate"><span class="pre">mem_iInter</span></code> at
the hypothesis <code class="docutils literal notranslate"><span class="pre">h</span></code>.
If you look at the type of <code class="docutils literal notranslate"><span class="pre">h</span></code> before and after this tactic
you will notice the change.</p>
<p>We could not use <code class="docutils literal notranslate"><span class="pre">rewrite</span></code>,
and just the introduction and elimination rules:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0Atheorem%20Inter.intro%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%0A%20%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20assumption%0A%0Atheorem%20Inter.elim%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20(i%20%3A%20I)%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%20at%20h%0A%20%20apply%20h%0A%0Atheorem%20Union.intro%20%7Bx%20%3A%20U%7D%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%0A%20%20show%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20exact%20%E2%9F%A8i%2C%20h%E2%9F%A9%0A%0Atheorem%20Union.elim%20%7Bb%20%3A%20Prop%7D%20%7Bx%20%3A%20U%7D%0A(h%E2%82%81%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20(h%E2%82%82%20%3A%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%86%92%20b)%20%3A%20b%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%20at%20h%E2%82%81%0A%20%20cases%20h%E2%82%81%20with%0A%20%20%7C%20intro%20i%20hi%20%3D%3E%20exact%20h%E2%82%82%20i%20hi%0A%0A--%20BEGIN%0Aexample%20(x%20%3A%20U)%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%0AInter.intro%20%24%0Afun%20i%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20i%20from%20sorry%0A%0Aexample%20(x%20%3A%20U)%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%0AInter.elim%20h%20i%0A%0Aexample%20(x%20%3A%20U)%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%0AUnion.intro%20i%20h%0A%0Aexample%20(C%20%3A%20Prop)%20(x%20%3A%20U)%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20%3A%20C%20%3A%3D%0AUnion.elim%20h%20%24%0Afun%20i%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20A%20i%20%E2%86%A6%0Ashow%20C%20from%20sorry%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span>
<span class="n">Inter.intro</span> <span class="bp">$</span>
<span class="k">fun</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="k">from</span> <span class="gr">sorry</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">)</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span>
<span class="n">Inter.elim</span> <span class="n">h</span> <span class="n">i</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">i</span> <span class="o">:</span> <span class="n">I</span><span class="o">)</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span>
<span class="n">Union.intro</span> <span class="n">i</span> <span class="n">h</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">C</span> <span class="o">:</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:</span> <span class="n">C</span> <span class="o">:=</span>
<span class="n">Union.elim</span> <span class="n">h</span> <span class="bp">$</span>
<span class="k">fun</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">C</span> <span class="k">from</span> <span class="gr">sorry</span>
</pre></div>
</div>
</div><p>Remember that the dollar sign saves us the trouble of having to put parentheses around the rest of the proof. Notice that with <code class="docutils literal notranslate"><span class="pre">Inter.intro</span></code> and <code class="docutils literal notranslate"><span class="pre">Inter.elim</span></code>, proofs using indexed intersections looks just like proofs using the universal quantifier. Similarly, <code class="docutils literal notranslate"><span class="pre">Union.intro</span></code> and <code class="docutils literal notranslate"><span class="pre">Union.elim</span></code> mirror the introduction and elimination rules for the existential quantifier.
The following example provides one direction of an equivalence proved above,
just using the introduction and elimination rules:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0Atheorem%20Inter.intro%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%0A%20%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20assumption%0A%0Atheorem%20Inter.elim%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20(i%20%3A%20I)%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%20at%20h%0A%20%20apply%20h%0A%0Atheorem%20Union.intro%20%7Bx%20%3A%20U%7D%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%0A%20%20show%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20exact%20%E2%9F%A8i%2C%20h%E2%9F%A9%0A%0Atheorem%20Union.elim%20%7Bb%20%3A%20Prop%7D%20%7Bx%20%3A%20U%7D%0A(h%E2%82%81%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20(h%E2%82%82%20%3A%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%86%92%20b)%20%3A%20b%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%20at%20h%E2%82%81%0A%20%20cases%20h%E2%82%81%20with%0A%20%20%7C%20intro%20i%20hi%20%3D%3E%20exact%20h%E2%82%82%20i%20hi%0A%0Asection%0A--%20BEGIN%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20(B%20%3A%20I%20%E2%86%92%20Set%20U)%20(C%20%3A%20Set%20U)%0A%0Aexample%20%3A%20(%E2%8B%82%20i%2C%20A%20i%20%E2%88%A9%20B%20i)%20%E2%8A%86%20(%E2%8B%82%20i%2C%20A%20i)%20%E2%88%A9%20(%E2%8B%82%20i%2C%20B%20i)%20%3A%3D%0Afun%20x%20%3A%20U%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%E2%88%A9%20B%20i%20%E2%86%A6%0Ahave%20h1%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%0A%20%20Inter.intro%20%24%0A%20%20fun%20i%20%3A%20I%20%E2%86%A6%0A%20%20have%20h2%20%3A%20x%20%E2%88%88%20A%20i%20%E2%88%A9%20B%20i%20%3A%3D%20Inter.elim%20h%20i%0A%20%20show%20x%20%E2%88%88%20A%20i%20from%20And.left%20h2%0Ahave%20h2%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20B%20i%20%3A%3D%0A%20%20%20%20Inter.intro%20%24%0A%20%20%20%20fun%20i%20%3A%20I%20%E2%86%A6%0A%20%20%20%20have%20h2%20%3A%20x%20%E2%88%88%20A%20i%20%E2%88%A9%20B%20i%20%3A%3D%20Inter.elim%20h%20i%0A%20%20%20%20show%20x%20%E2%88%88%20B%20i%20from%20And.right%20h2%0Ashow%20x%20%E2%88%88%20(%E2%8B%82%20i%2C%20A%20i)%20%E2%88%A9%20(%E2%8B%82%20i%2C%20B%20i)%20from%20And.intro%20h1%20h2%0A--%20END%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">variable</span> <span class="o">{</span><span class="n">I</span> <span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">B</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">C</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">:</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∩</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="bp">⊆</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∩</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="o">:</span> <span class="n">U</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∩</span> <span class="n">B</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="k">have</span> <span class="n">h1</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span>
  <span class="n">Inter.intro</span> <span class="bp">$</span>
  <span class="k">fun</span> <span class="n">i</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">↦</span>
  <span class="k">have</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∩</span> <span class="n">B</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">Inter.elim</span> <span class="n">h</span> <span class="n">i</span>
  <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="k">from</span> <span class="n">And.left</span> <span class="n">h2</span>
<span class="k">have</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">B</span> <span class="n">i</span> <span class="o">:=</span>
    <span class="n">Inter.intro</span> <span class="bp">$</span>
    <span class="k">fun</span> <span class="n">i</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">↦</span>
    <span class="k">have</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∩</span> <span class="n">B</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">Inter.elim</span> <span class="n">h</span> <span class="n">i</span>
    <span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="n">i</span> <span class="k">from</span> <span class="n">And.right</span> <span class="n">h2</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∩</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="k">from</span> <span class="n">And.intro</span> <span class="n">h1</span> <span class="n">h2</span>
</pre></div>
</div>
</div><p>You are asked to prove the other direction in the exercises below.
Here is an example that shows how to use the introduction and elimination rules for indexed union:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0Atheorem%20Inter.intro%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%0A%20%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20assumption%0A%0Atheorem%20Inter.elim%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20(i%20%3A%20I)%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%20at%20h%0A%20%20apply%20h%0A%0Atheorem%20Union.intro%20%7Bx%20%3A%20U%7D%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%0A%20%20show%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20exact%20%E2%9F%A8i%2C%20h%E2%9F%A9%0A%0Atheorem%20Union.elim%20%7Bb%20%3A%20Prop%7D%20%7Bx%20%3A%20U%7D%0A(h%E2%82%81%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20(h%E2%82%82%20%3A%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%86%92%20b)%20%3A%20b%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%20at%20h%E2%82%81%0A%20%20cases%20h%E2%82%81%20with%0A%20%20%7C%20intro%20i%20hi%20%3D%3E%20exact%20h%E2%82%82%20i%20hi%0A%0Asection%0A--%20BEGIN%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20(B%20%3A%20I%20%E2%86%92%20Set%20U)%20(C%20%3A%20Set%20U)%0A%0Aexample%20%3A%20(%E2%8B%83%20i%2C%20C%20%E2%88%A9%20A%20i)%20%E2%8A%86%20C%20%E2%88%A9%20(%E2%8B%83i%2C%20A%20i)%20%3A%3D%0Afun%20x%20%3A%20U%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20C%20%E2%88%A9%20A%20i%20%E2%86%A6%0AUnion.elim%20h%20%24%0Afun%20i%20%E2%86%A6%0Afun%20h1%20%3A%20x%20%E2%88%88%20C%20%E2%88%A9%20A%20i%20%E2%86%A6%0Ahave%20h2%20%3A%20x%20%E2%88%88%20C%20%3A%3D%20And.left%20h1%0Ahave%20h3%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%20And.right%20h1%0Ahave%20h4%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20Union.intro%20i%20h3%0Ashow%20x%20%E2%88%88%20C%20%E2%88%A9%20%E2%8B%83%20i%2C%20A%20i%20from%20And.intro%20h2%20h4%0A--%20END%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">variable</span> <span class="o">{</span><span class="n">I</span> <span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">B</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">C</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">:</span> <span class="o">(</span><span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">C</span> <span class="bp">∩</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">⊆</span> <span class="n">C</span> <span class="bp">∩</span> <span class="o">(</span><span class="bp">⋃</span><span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="o">:</span> <span class="n">U</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">C</span> <span class="bp">∩</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="n">Union.elim</span> <span class="n">h</span> <span class="bp">$</span>
<span class="k">fun</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h1</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">C</span> <span class="bp">∩</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="k">have</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">C</span> <span class="o">:=</span> <span class="n">And.left</span> <span class="n">h1</span>
<span class="k">have</span> <span class="n">h3</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">And.right</span> <span class="n">h1</span>
<span class="k">have</span> <span class="n">h4</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span> <span class="n">Union.intro</span> <span class="n">i</span> <span class="n">h3</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">C</span> <span class="bp">∩</span> <span class="bp">⋃</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="k">from</span> <span class="n">And.intro</span> <span class="n">h2</span> <span class="n">h4</span>
</pre></div>
</div>
</div><p>Once again, we ask you to prove the other direction in the exercises below.</p>
<p>Sometimes we want to work with families <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-16-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=&quot;false&quot;>(</mo><msub><mi>A</mi><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msub><msub><mo stretchy=&quot;false&quot;>)</mo><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mi>i</mi><mo>&amp;#x2208;</mo><mi>I</mi><mo>,</mo><mi>j</mi><mo>&amp;#x2208;</mo><mi>J</mi></mrow></msub></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-126" style="width: 6.074em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.886em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1004.89em, 2.619em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-127"><span class="mo" id="MathJax-Span-128" style="font-family: MathJax_Main;">(</span><span class="msubsup" id="MathJax-Span-129"><span style="display: inline-block; position: relative; width: 1.557em; height: 0px;"><span style="position: absolute; clip: rect(3.127em, 1000.73em, 4.127em, -1000em); top: -3.985em; left: 0em;"><span class="mi" id="MathJax-Span-130" style="font-family: MathJax_Math-italic;">A</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.75em;"><span class="texatom" id="MathJax-Span-131"><span class="mrow" id="MathJax-Span-132"><span class="mi" id="MathJax-Span-133" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span class="mo" id="MathJax-Span-134" style="font-size: 70.7%; font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-135" style="font-size: 70.7%; font-family: MathJax_Math-italic;">j</span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span><span class="msubsup" id="MathJax-Span-136"><span style="display: inline-block; position: relative; width: 2.943em; height: 0px;"><span style="position: absolute; clip: rect(3.093em, 1000.29em, 4.377em, -1000em); top: -3.985em; left: 0em;"><span class="mo" id="MathJax-Span-137" style="font-family: MathJax_Main;">)</span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span><span style="position: absolute; top: -3.835em; left: 0.389em;"><span class="texatom" id="MathJax-Span-138"><span class="mrow" id="MathJax-Span-139"><span class="mi" id="MathJax-Span-140" style="font-size: 70.7%; font-family: MathJax_Math-italic;">i</span><span class="mo" id="MathJax-Span-141" style="font-size: 70.7%; font-family: MathJax_Main;">∈</span><span class="mi" id="MathJax-Span-142" style="font-size: 70.7%; font-family: MathJax_Math-italic;">I<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.045em;"></span></span><span class="mo" id="MathJax-Span-143" style="font-size: 70.7%; font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-144" style="font-size: 70.7%; font-family: MathJax_Math-italic;">j</span><span class="mo" id="MathJax-Span-145" style="font-size: 70.7%; font-family: MathJax_Main;">∈</span><span class="mi" id="MathJax-Span-146" style="font-size: 70.7%; font-family: MathJax_Math-italic;">J<span style="display: inline-block; overflow: hidden; height: 1px; width: 0.055em;"></span></span></span></span><span style="display: inline-block; width: 0px; height: 3.985em;"></span></span></span></span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.424em; border-left: 0px solid; width: 0px; height: 1.413em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><msub><mi>A</mi><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>,</mo><mi>j</mi></mrow></msub><msub><mo stretchy="false">)</mo><mrow class="MJX-TeXAtom-ORD"><mi>i</mi><mo>∈</mo><mi>I</mi><mo>,</mo><mi>j</mi><mo>∈</mo><mi>J</mi></mrow></msub></math></span></span></span>
indexed by two variables.
This is also easy to manage in Lean: if we declare <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">:</span> <span class="pre">I</span> <span class="pre">→</span> <span class="pre">J</span> <span class="pre">→</span> <span class="pre">Set</span> <span class="pre">U</span></code>,
then given <code class="docutils literal notranslate"><span class="pre">i</span> <span class="pre">:</span> <span class="pre">I</span></code> and <code class="docutils literal notranslate"><span class="pre">j</span> <span class="pre">:</span> <span class="pre">J</span></code>,
we have that <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">i</span> <span class="pre">j</span> <span class="pre">:</span> <span class="pre">Set</span> <span class="pre">U</span></code>.
(You should interpret the expression <code class="docutils literal notranslate"><span class="pre">I</span> <span class="pre">→</span> <span class="pre">J</span> <span class="pre">→</span> <span class="pre">Set</span> <span class="pre">U</span></code> as
<code class="docutils literal notranslate"><span class="pre">I</span> <span class="pre">→</span> <span class="pre">(J</span> <span class="pre">→</span> <span class="pre">Set</span> <span class="pre">U)</span></code>,
so that <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">i</span></code> has type <code class="docutils literal notranslate"><span class="pre">J</span> <span class="pre">→</span> <span class="pre">Set</span> <span class="pre">U</span></code>,
and then <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">i</span> <span class="pre">j</span></code> has type <code class="docutils literal notranslate"><span class="pre">Set</span> <span class="pre">U</span></code>.)
Here is an example of a proof involving a such a doubly-indexed family:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0Atheorem%20Inter.intro%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%0A%20%20show%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20assumption%0A%0Atheorem%20Inter.elim%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20(i%20%3A%20I)%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iInter%5D%20at%20h%0A%20%20apply%20h%0A%0Atheorem%20Union.intro%20%7Bx%20%3A%20U%7D%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%0A%20%20show%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%0A%20%20exact%20%E2%9F%A8i%2C%20h%E2%9F%A9%0A%0Atheorem%20Union.elim%20%7Bb%20%3A%20Prop%7D%20%7Bx%20%3A%20U%7D%0A(h%E2%82%81%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20(h%E2%82%82%20%3A%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%86%92%20b)%20%3A%20b%20%3A%3D%20by%0A%20%20rw%20%5Bmem_iUnion%5D%20at%20h%E2%82%81%0A%20%20cases%20h%E2%82%81%20with%0A%20%20%7C%20intro%20i%20hi%20%3D%3E%20exact%20h%E2%82%82%20i%20hi%0A%0A--%20BEGIN%0Asection%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20(A%20%3A%20I%20%E2%86%92%20J%20%E2%86%92%20Set%20U)%0A%0Aexample%20%3A%20(%E2%8B%83i%2C%20%E2%8B%82j%2C%20A%20i%20j)%20%E2%8A%86%20(%E2%8B%82j%2C%20%E2%8B%83i%2C%20A%20i%20j)%20%3A%3D%0Afun%20x%20%3A%20U%20%E2%86%A6%0Afun%20h%20%3A%20x%20%E2%88%88%20%E2%8B%83i%2C%20%E2%8B%82j%2C%20A%20i%20j%20%E2%86%A6%0AUnion.elim%20h%20%24%0Afun%20i%20%E2%86%A6%0Afun%20h1%20%3A%20x%20%E2%88%88%20%E2%8B%82%20j%2C%20A%20i%20j%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20%E2%8B%82j%2C%20%E2%8B%83i%2C%20A%20i%20j%20from%0A%20%20%20%20Inter.intro%20%24%0A%20%20%20%20fun%20j%20%E2%86%A6%0A%20%20%20%20have%20h2%20%3A%20x%20%E2%88%88%20A%20i%20j%20%3A%3D%20Inter.elim%20h1%20j%0A%20%20%20%20Union.intro%20i%20h2%0Aend%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">section</span>
<span class="kd">variable</span> <span class="o">{</span><span class="n">I</span> <span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">J</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">:</span> <span class="o">(</span><span class="bp">⋃</span><span class="n">i</span><span class="o">,</span> <span class="bp">⋂</span><span class="n">j</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="n">j</span><span class="o">)</span> <span class="bp">⊆</span> <span class="o">(</span><span class="bp">⋂</span><span class="n">j</span><span class="o">,</span> <span class="bp">⋃</span><span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="n">j</span><span class="o">)</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="o">:</span> <span class="n">U</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋃</span><span class="n">i</span><span class="o">,</span> <span class="bp">⋂</span><span class="n">j</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="n">j</span> <span class="bp">↦</span>
<span class="n">Union.elim</span> <span class="n">h</span> <span class="bp">$</span>
<span class="k">fun</span> <span class="n">i</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h1</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span> <span class="n">j</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="n">j</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="bp">⋂</span><span class="n">j</span><span class="o">,</span> <span class="bp">⋃</span><span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="n">j</span> <span class="k">from</span>
    <span class="n">Inter.intro</span> <span class="bp">$</span>
    <span class="k">fun</span> <span class="n">j</span> <span class="bp">↦</span>
    <span class="k">have</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="n">i</span> <span class="n">j</span> <span class="o">:=</span> <span class="n">Inter.elim</span> <span class="n">h1</span> <span class="n">j</span>
    <span class="n">Union.intro</span> <span class="n">i</span> <span class="n">h2</span>
<span class="kd">end</span>
</pre></div>
</div>
</div></div>
<div class="section" id="power-sets">
<h2><span class="section-number">12.4. </span>Power Sets<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#power-sets" title="Permalink to this headline">¶</a></h2>
<p>We can also define the power set in Lean:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=variable%20%7BU%20%3A%20Type%7D%0A%0Adef%20powerset%20(A%20%3A%20Set%20U)%20%3A%20Set%20(Set%20U)%20%3A%3D%20%7BB%20%3A%20Set%20U%20%7C%20B%20%E2%8A%86%20A%7D%0A%0Aexample%20(A%20B%20%3A%20Set%20U)%20(h%20%3A%20B%20%E2%88%88%20powerset%20A)%20%3A%20B%20%E2%8A%86%20A%20%3A%3D%0Ah" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">variable</span> <span class="o">{</span><span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>

<span class="kd">def</span> <span class="n">powerset</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">:</span> <span class="n">Set</span> <span class="o">(</span><span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">:=</span> <span class="o">{</span><span class="n">B</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span> <span class="bp">|</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">A</span><span class="o">}</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">B</span> <span class="bp">∈</span> <span class="n">powerset</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">A</span> <span class="o">:=</span>
<span class="n">h</span>
</pre></div>
</div>
</div><p>As the example shows,
<code class="docutils literal notranslate"><span class="pre">B</span> <span class="pre">∈</span> <span class="pre">powerset</span> <span class="pre">A</span></code> is then definitionally the same as <code class="docutils literal notranslate"><span class="pre">B</span> <span class="pre">⊆</span> <span class="pre">A</span></code>.</p>
<p>In fact, <code class="docutils literal notranslate"><span class="pre">powerset</span></code> is defined in Lean in exactly this way,
and is available to you when you <code class="docutils literal notranslate"><span class="pre">import</span> <span class="pre">Mathlib.Data.Set.Basic</span></code>
and <code class="docutils literal notranslate"><span class="pre">open</span> <span class="pre">Set</span></code>.
Here is an example of how it is used:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20%3A%20Set%20U)%0A%0A--%20BEGIN%0A%23check%20powerset%20A%0A%0Aexample%20%3A%20A%20%E2%88%88%20powerset%20(A%20%E2%88%AA%20B)%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20_%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Ashow%20x%20%E2%88%88%20A%20%E2%88%AA%20B%20from%20Or.inl%20%E2%80%B9x%20%E2%88%88%20A%E2%80%BA%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="k">#check</span> <span class="n">powerset</span> <span class="n">A</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">∈</span> <span class="n">powerset</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span><span class="o">)</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">_</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">show</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="k">from</span> <span class="n">Or.inl</span> <span class="o">‹</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">›</span>
</pre></div>
</div>
</div><p>In essence, the example proves <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">⊆</span> <span class="pre">A</span> <span class="pre">∪</span> <span class="pre">B</span></code>.
In the exercises below, we ask you to prove,
formally, that for every <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">B</span> <span class="pre">:</span> <span class="pre">Set</span> <span class="pre">U</span></code>,
we have <code class="docutils literal notranslate"><span class="pre">powerset</span> <span class="pre">A</span> <span class="pre">⊆</span> <span class="pre">powerset</span> <span class="pre">B</span></code></p>
</div>
<div class="section" id="exercises">
<h2><span class="section-number">12.5. </span>Exercises<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#exercises" title="Permalink to this headline">¶</a></h2>
<ol class="arabic">
<li><p>Fill in the <code class="docutils literal notranslate"><span class="pre">sorry</span></code>’s.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Avariable%20%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20BEGIN%0Aexample%20%3A%20%E2%88%80%20x%2C%20x%20%E2%88%88%20A%20%E2%88%A9%20C%20%E2%86%92%20x%20%E2%88%88%20A%20%E2%88%AA%20B%20%3A%3D%0Asorry%0A%0Aexample%20%3A%20%E2%88%80%20x%2C%20x%20%E2%88%88%20(A%20%E2%88%AA%20B)%E1%B6%9C%20%E2%86%92%20x%20%E2%88%88%20A%E1%B6%9C%20%3A%3D%0Asorry%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∩</span> <span class="n">C</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="o">(</span><span class="n">A</span> <span class="bp">∪</span> <span class="n">B</span><span class="o">)</span><span class="bp">ᶜ</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="bp">ᶜ</span> <span class="o">:=</span>
<span class="gr">sorry</span>
</pre></div>
</div>
</div></li>
<li><p>Fill in the <code class="docutils literal notranslate"><span class="pre">sorry</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0Asection%0Avariable%20%7BU%20%3A%20Type%7D%0A%0A%2F-%20defining%20%22disjoint%22%20-%2F%0A%0Adef%20disj%20(A%20B%20%3A%20Set%20U)%20%3A%20Prop%20%3A%3D%20%E2%88%80%20%E2%A6%83x%E2%A6%84%2C%20x%20%E2%88%88%20A%20%E2%86%92%20x%20%E2%88%88%20B%20%E2%86%92%20False%0A%0Aexample%20(A%20B%20%3A%20Set%20U)%20(h%20%3A%20%E2%88%80%20x%2C%20%C2%AC%20(x%20%E2%88%88%20A%20%E2%88%A7%20x%20%E2%88%88%20B))%20%3A%0A%20%20disj%20A%20B%20%3A%3D%0Afun%20x%20%E2%86%A6%0Afun%20h1%20%3A%20x%20%E2%88%88%20A%20%E2%86%A6%0Afun%20h2%20%3A%20x%20%E2%88%88%20B%20%E2%86%A6%0Ahave%20h3%20%3A%20x%20%E2%88%88%20A%20%E2%88%A7%20x%20%E2%88%88%20B%20%3A%3D%20And.intro%20h1%20h2%0Ashow%20False%20from%20h%20x%20h3%0A%0A--%20notice%20that%20we%20do%20not%20have%20to%20mention%20x%20when%20applying%0A--%20%20%20h%20%3A%20disj%20A%20B%0Aexample%20(A%20B%20%3A%20Set%20U)%20(h1%20%3A%20disj%20A%20B)%20(x%20%3A%20U)%0A%20%20%20%20(h2%20%3A%20x%20%E2%88%88%20A)%20(h3%20%3A%20x%20%E2%88%88%20B)%20%3A%0A%20%20False%20%3A%3D%0Ah1%20h2%20h3%0A%0A--%20the%20same%20is%20true%20of%20%E2%8A%86%0Aexample%20(A%20B%20%3A%20Set%20U)%20(x%20%3A%20U)%20(h%20%3A%20A%20%E2%8A%86%20B)%20(h1%20%3A%20x%20%E2%88%88%20A)%20%3A%0A%20%20x%20%E2%88%88%20B%20%3A%3D%0Ah%20h1%0A%0Aexample%20(A%20B%20C%20D%20%3A%20Set%20U)%20(h1%20%3A%20disj%20A%20B)%20(h2%20%3A%20C%20%E2%8A%86%20A)%0A%20%20%20%20(h3%20%3A%20D%20%E2%8A%86%20B)%20%3A%0A%20%20disj%20C%20D%20%3A%3D%0Asorry%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Set.Basic</span>
<span class="kn">open</span> <span class="n">Set</span>

<span class="kn">section</span>
<span class="kd">variable</span> <span class="o">{</span><span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>

<span class="c">/-</span><span class="cm"> defining "disjoint" -/</span>

<span class="kd">def</span> <span class="n">disj</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span> <span class="bp">∀</span> <span class="o">⦃</span><span class="n">x</span><span class="o">⦄,</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">→</span> <span class="n">False</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="bp">¬</span> <span class="o">(</span><span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∧</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="o">))</span> <span class="o">:</span>
  <span class="n">disj</span> <span class="n">A</span> <span class="n">B</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h1</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="bp">↦</span>
<span class="k">have</span> <span class="n">h3</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span> <span class="bp">∧</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="o">:=</span> <span class="n">And.intro</span> <span class="n">h1</span> <span class="n">h2</span>
<span class="k">show</span> <span class="n">False</span> <span class="k">from</span> <span class="n">h</span> <span class="n">x</span> <span class="n">h3</span>

<span class="c1">-- notice that we do not have to mention x when applying</span>
<span class="c1">--   h : disj A B</span>
<span class="kd">example</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">disj</span> <span class="n">A</span> <span class="n">B</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span>
    <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">)</span> <span class="o">(</span><span class="n">h3</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">False</span> <span class="o">:=</span>
<span class="n">h1</span> <span class="n">h2</span> <span class="n">h3</span>

<span class="c1">-- the same is true of ⊆</span>
<span class="kd">example</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">B</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">∈</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">x</span> <span class="bp">∈</span> <span class="n">B</span> <span class="o">:=</span>
<span class="n">h</span> <span class="n">h1</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="n">C</span> <span class="n">D</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">disj</span> <span class="n">A</span> <span class="n">B</span><span class="o">)</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">C</span> <span class="bp">⊆</span> <span class="n">A</span><span class="o">)</span>
    <span class="o">(</span><span class="n">h3</span> <span class="o">:</span> <span class="n">D</span> <span class="bp">⊆</span> <span class="n">B</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">disj</span> <span class="n">C</span> <span class="n">D</span> <span class="o">:=</span>
<span class="gr">sorry</span>
<span class="kd">end</span>
</pre></div>
</div>
</div></li>
<li><p>Prove the following facts about indexed unions and intersections, using the theorems <code class="docutils literal notranslate"><span class="pre">Inter.intro</span></code>, <code class="docutils literal notranslate"><span class="pre">Inter.elim</span></code>, <code class="docutils literal notranslate"><span class="pre">Union.intro</span></code>, and <code class="docutils literal notranslate"><span class="pre">Union.elim</span></code> listed above.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aimport%20Mathlib.Order.SetNotation%0Aopen%20Set%0A%0Asection%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20%7BA%20B%20%3A%20I%20%E2%86%92%20Set%20U%7D%0A%0Atheorem%20Inter.intro%20%7Bx%20%3A%20U%7D%20(h%20%3A%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i%20%3A%3D%20by%0Arw%20%5Bmem_iInter%5D%0Ashow%20%E2%88%80%20i%2C%20x%20%E2%88%88%20A%20i%0Aassumption%0A%0Atheorem%20Inter.elim%20%7Bx%20%3A%20U%7D%20(h%20%3A%20x%20%E2%88%88%20%E2%8B%82%20i%2C%20A%20i)%20(i%20%3A%20I)%20%3A%20x%20%E2%88%88%20A%20i%20%3A%3D%20by%0Arw%20%5Bmem_iInter%5D%20at%20h%0Aapply%20h%0A%0Atheorem%20Union.intro%20%7Bx%20%3A%20U%7D%20(i%20%3A%20I)%20(h%20%3A%20x%20%E2%88%88%20A%20i)%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i%20%3A%3D%20by%0Arw%20%5Bmem_iUnion%5D%0Ashow%20%E2%88%83%20i%2C%20x%20%E2%88%88%20A%20i%0Aexact%20%E2%9F%A8i%2C%20h%E2%9F%A9%0A%0Atheorem%20Union.elim%20%7Bb%20%3A%20Prop%7D%20%7Bx%20%3A%20U%7D%0A(h%E2%82%81%20%3A%20x%20%E2%88%88%20%E2%8B%83%20i%2C%20A%20i)%20(h%E2%82%82%20%3A%20%E2%88%80%20(i%20%3A%20I)%2C%20x%20%E2%88%88%20A%20i%20%E2%86%92%20b)%20%3A%20b%20%3A%3D%20by%0Arw%20%5Bmem_iUnion%5D%20at%20h%E2%82%81%0Acases%20h%E2%82%81%20with%0A%7C%20intro%20i%20hi%20%3D%3E%20exact%20h%E2%82%82%20i%20hi%0A%0Aend%0A%0A--%20BEGIN%0Avariable%20%7BI%20U%20%3A%20Type%7D%0Avariable%20(A%20%3A%20I%20%E2%86%92%20Set%20U)%20(B%20%3A%20I%20%E2%86%92%20Set%20U)%20(C%20%3A%20Set%20U)%0A%0Aexample%20%3A%20(%E2%8B%82%20i%2C%20A%20i)%20%E2%88%A9%20(%E2%8B%82%20i%2C%20B%20i)%20%E2%8A%86%20(%E2%8B%82%20i%2C%20A%20i%20%E2%88%A9%20B%20i)%20%3A%3D%0Asorry%0A%0Aexample%20%3A%20C%20%E2%88%A9%20(%E2%8B%83i%2C%20A%20i)%20%E2%8A%86%20%E2%8B%83i%2C%20C%20%E2%88%A9%20A%20i%20%3A%3D%0Asorry%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">variable</span> <span class="o">{</span><span class="n">I</span> <span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">B</span> <span class="o">:</span> <span class="n">I</span> <span class="bp">→</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span> <span class="o">(</span><span class="n">C</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">:</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">∩</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="bp">⊆</span> <span class="o">(</span><span class="bp">⋂</span> <span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span> <span class="bp">∩</span> <span class="n">B</span> <span class="n">i</span><span class="o">)</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">C</span> <span class="bp">∩</span> <span class="o">(</span><span class="bp">⋃</span><span class="n">i</span><span class="o">,</span> <span class="n">A</span> <span class="n">i</span><span class="o">)</span> <span class="bp">⊆</span> <span class="bp">⋃</span><span class="n">i</span><span class="o">,</span> <span class="n">C</span> <span class="bp">∩</span> <span class="n">A</span> <span class="n">i</span> <span class="o">:=</span>
<span class="gr">sorry</span>
</pre></div>
</div>
</div></li>
<li><p>Prove the following fact about power sets.
You can use the theorems <code class="docutils literal notranslate"><span class="pre">Subset.trans</span></code> and <code class="docutils literal notranslate"><span class="pre">Subset.refl</span></code>.</p>
<blockquote>
<div><div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Set.Basic%0Aopen%20Set%0A%0A--%20BEGIN%0Avariable%20%7BU%20%3A%20Type%7D%0Avariable%20(A%20B%20C%20%3A%20Set%20U)%0A%0A--%20For%20this%20exercise%20these%20two%20facts%20are%20useful%0Aexample%20(h1%20%3A%20A%20%E2%8A%86%20B)%20(h2%20%3A%20B%20%E2%8A%86%20C)%20%3A%20A%20%E2%8A%86%20C%20%3A%3D%0ASubset.trans%20h1%20h2%0A%0Aexample%20%3A%20A%20%E2%8A%86%20A%20%3A%3D%0ASubset.refl%20A%0A%0Aexample%20(h%20%3A%20A%20%E2%8A%86%20B)%20%3A%20powerset%20A%20%E2%8A%86%20powerset%20B%20%3A%3D%0Asorry%0A%0Aexample%20(h%20%3A%20powerset%20A%20%E2%8A%86%20powerset%20B)%20%3A%20A%20%E2%8A%86%20B%20%3A%3D%0Asorry%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">variable</span> <span class="o">{</span><span class="n">U</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="n">B</span> <span class="n">C</span> <span class="o">:</span> <span class="n">Set</span> <span class="n">U</span><span class="o">)</span>

<span class="c1">-- For this exercise these two facts are useful</span>
<span class="kd">example</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">B</span><span class="o">)</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">B</span> <span class="bp">⊆</span> <span class="n">C</span><span class="o">)</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">C</span> <span class="o">:=</span>
<span class="n">Subset.trans</span> <span class="n">h1</span> <span class="n">h2</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">A</span> <span class="o">:=</span>
<span class="n">Subset.refl</span> <span class="n">A</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">B</span><span class="o">)</span> <span class="o">:</span> <span class="n">powerset</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">powerset</span> <span class="n">B</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">powerset</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">powerset</span> <span class="n">B</span><span class="o">)</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">⊆</span> <span class="n">B</span> <span class="o">:=</span>
<span class="gr">sorry</span>
</pre></div>
</div>
</div></div></blockquote>
</li>
</ol>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="https://leanprover-community.github.io/logic_and_proof/index.html">Logic and Proof</a></h1>








<!-- <h3>Navigation</h3> -->
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/introduction.html">1. Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/propositional_logic.html">2. Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/natural_deduction_for_propositional_logic.html">3. Natural Deduction for Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/propositional_logic_in_lean.html">4. Propositional Logic in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/classical_reasoning.html">5. Classical Reasoning</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/semantics_of_propositional_logic.html">6. Semantics of Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/first_order_logic.html">7. First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/natural_deduction_for_first_order_logic.html">8. Natural Deduction for First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/first_order_logic_in_lean.html">9. First Order Logic in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/semantics_of_first_order_logic.html">10. Semantics of First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets.html">11. Sets</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#">12. Sets in Lean</a><ul>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#basics">12.1. Basics</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#some-identities">12.2. Some Identities</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#indexed-families">12.3. Indexed Families</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#power-sets">12.4. Power Sets</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html#exercises">12.5. Exercises</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations.html">13. Relations</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html">14. Relations in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/functions.html">15. Functions</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/functions_in_lean.html">16. Functions in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html">17. The Natural Numbers and Induction</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html">18. The Natural Numbers and Induction in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/elementary_number_theory.html">19. Elementary Number Theory</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/combinatorics.html">20. Combinatorics</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_real_numbers.html">21. The Real Numbers</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_infinite.html">22. The Infinite</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/axiomatic_foundations.html">23. Axiomatic Foundations</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/nd_quickref.html">24. Appendix: Natural Deduction Rules</a></li>
</ul>


<hr>
<ul>
    
    <li class="toctree-l1"><a href="https://leanprover.github.io/">Lean Home</a></li>
    
    <li class="toctree-l1"><a href="https://leanprover-community.github.io/logic_and_proof/logic_and_proof.pdf">PDF version</a></li>
    
</ul>

<div id="searchbox" style="" role="search">
  <h3 id="searchlabel">Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="https://leanprover-community.github.io/logic_and_proof/search.html" method="get">
      <input type="text" name="q" aria-labelledby="searchlabel">
      <input type="submit" value="Go">
    </form>
    </div>
</div>

        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      ©2017, Jeremy Avigad, Joseph Hua, Robert Y. Lewis, and Floris van Doorn.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 3.5.4</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="https://leanprover-community.github.io/logic_and_proof/_sources/sets_in_lean.rst.txt" rel="nofollow">Page source</a>
    </div>

    

    
  
<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; min-width: 0px; max-width: none; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-size-adjust: none; font-family: MathJax_Size1, sans-serif;"></div></div></body></html>
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-513356f8-25f8-4a80-a2b4-b41824467528@mhtml.blink

@charset "utf-8";

.MathJax_Hover_Frame { border-radius: 0.25em; box-shadow: rgb(136, 51, 170) 0px 0px 15px; display: inline-block; position: absolute; border: 1px solid rgb(170, 102, 221) !important; }

.MathJax_Menu_Button .MathJax_Hover_Arrow { position: absolute; cursor: pointer; display: inline-block; border: 2px solid rgb(170, 170, 170); border-radius: 4px; font-family: "Courier New", Courier; font-size: 9px; color: rgb(240, 240, 240); }

.MathJax_Menu_Button .MathJax_Hover_Arrow span { display: block; background-color: rgb(170, 170, 170); border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px; }

.MathJax_Hover_Arrow:hover { color: white !important; border: 2px solid rgb(204, 204, 204) !important; }

.MathJax_Hover_Arrow:hover span { background-color: rgb(204, 204, 204) !important; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-9ad1bb7b-4189-4395-967b-f9b397309254@mhtml.blink

@charset "utf-8";

#MathJax_About { position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: rgb(221, 221, 221); color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; box-shadow: rgb(128, 128, 128) 0px 10px 20px; }

#MathJax_About.MathJax_MousePost { outline: none; }

.MathJax_Menu { position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid rgb(204, 204, 204); margin: 0px; cursor: default; font-style: ; font-variant: normal; font-weight: ; font-stretch: ; font-size: ; font-family: ; font-optical-sizing: ; font-size-adjust: ; font-kerning: ; font-feature-settings: ; font-variation-settings: ; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; box-shadow: rgb(128, 128, 128) 0px 10px 20px; }

.MathJax_MenuItem { padding: 1px 2em; background: transparent; }

.MathJax_MenuArrow { position: absolute; right: 0.5em; padding-top: 0.25em; color: rgb(102, 102, 102); font-size: 0.75em; }

.MathJax_MenuActive .MathJax_MenuArrow { color: white; }

.MathJax_MenuArrow.RTL { left: 0.5em; right: auto; }

.MathJax_MenuCheck { position: absolute; left: 0.7em; }

.MathJax_MenuCheck.RTL { right: 0.7em; left: auto; }

.MathJax_MenuRadioCheck { position: absolute; left: 0.7em; }

.MathJax_MenuRadioCheck.RTL { right: 0.7em; left: auto; }

.MathJax_MenuLabel { padding: 1px 2em 3px 1.33em; font-style: italic; }

.MathJax_MenuRule { border-top: 1px solid rgb(221, 221, 221); margin: 4px 3px; }

.MathJax_MenuDisabled { color: graytext; }

.MathJax_MenuActive { background-color: rgb(96, 104, 114); color: white; }

.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus { background-color: rgb(232, 232, 232); }

.MathJax_ContextMenu:focus { outline: none; }

.MathJax_ContextMenu .MathJax_MenuItem:focus { outline: none; }

#MathJax_AboutClose { top: 0.2em; right: 0.2em; }

.MathJax_Menu .MathJax_MenuClose { top: -10px; left: -10px; }

.MathJax_MenuClose { position: absolute; cursor: pointer; display: inline-block; border: 2px solid rgb(170, 170, 170); border-radius: 18px; font-family: "Courier New", Courier; font-size: 24px; color: rgb(240, 240, 240); }

.MathJax_MenuClose span { display: block; background-color: rgb(170, 170, 170); border: 1.5px solid; border-radius: 18px; line-height: 0; padding: 8px 0px 6px; }

.MathJax_MenuClose:hover { color: white !important; border: 2px solid rgb(204, 204, 204) !important; }

.MathJax_MenuClose:hover span { background-color: rgb(204, 204, 204) !important; }

.MathJax_MenuClose:hover:focus { outline: none; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-0542aa98-c020-4796-ba2f-bbcce59000fd@mhtml.blink

@charset "utf-8";

.MathJax_Preview .MJXf-math { color: inherit !important; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-5e916776-c983-45f0-9cdb-42b2956e553a@mhtml.blink

@charset "utf-8";

.MJX_Assistive_MathML { top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); user-select: none; position: absolute !important; padding: 1px 0px 0px !important; border: 0px !important; height: 1px !important; width: 1px !important; overflow: hidden !important; display: block !important; }

.MJX_Assistive_MathML.MJX_Assistive_MathML_Block { width: 100% !important; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-c11c74c7-1299-4900-a58d-2fd52ef55af3@mhtml.blink

@charset "utf-8";

#MathJax_Zoom { position: absolute; background-color: rgb(240, 240, 240); overflow: auto; display: block; z-index: 301; padding: 0.5em; border: 1px solid black; margin: 0px; font-weight: normal; font-style: normal; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; box-sizing: content-box; box-shadow: rgb(170, 170, 170) 5px 5px 15px; }

#MathJax_ZoomOverlay { position: absolute; left: 0px; top: 0px; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0px; padding: 0px; margin: 0px; background-color: white; opacity: 0; }

#MathJax_ZoomFrame { position: relative; display: inline-block; height: 0px; width: 0px; }

#MathJax_ZoomEventTrap { position: absolute; left: 0px; top: 0px; z-index: 302; display: inline-block; border: 0px; padding: 0px; margin: 0px; background-color: white; opacity: 0; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-170d35c3-566b-4045-8866-905b57c12f36@mhtml.blink

@charset "utf-8";

.MathJax_Preview { color: rgb(136, 136, 136); }

#MathJax_Message { position: fixed; left: 1px; bottom: 2px; background-color: rgb(230, 230, 230); border: 1px solid rgb(149, 149, 149); margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap; }

#MathJax_MSIE_Frame { position: absolute; top: 0px; left: 0px; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px; }

.MathJax_Error { color: rgb(204, 0, 0); font-style: italic; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-0754fe98-c7ff-4875-81c1-6922d045612d@mhtml.blink

@charset "utf-8";

.MJXp-script { font-size: 0.8em; }

.MJXp-right { transform-origin: right center; }

.MJXp-bold { font-weight: bold; }

.MJXp-italic { font-style: italic; }

.MJXp-scr { font-family: MathJax_Script, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-frak { font-family: MathJax_Fraktur, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-sf { font-family: MathJax_SansSerif, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-cal { font-family: MathJax_Caligraphic, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-mono { font-family: MathJax_Typewriter, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-largeop { font-size: 150%; }

.MJXp-largeop.MJXp-int { vertical-align: -0.2em; }

.MJXp-math { display: inline-block; line-height: 1.2; text-indent: 0px; font-family: "Times New Roman", Times, STIXGeneral, serif; white-space: nowrap; border-collapse: collapse; }

.MJXp-display { display: block; text-align: center; margin: 1em 0px; }

.MJXp-math span { display: inline-block; }

.MJXp-box { display: block !important; text-align: center; }

.MJXp-box::after { content: " "; }

.MJXp-rule { display: block !important; margin-top: 0.1em; }

.MJXp-char { display: block !important; }

.MJXp-mo { margin: 0px 0.15em; }

.MJXp-mfrac { margin: 0px 0.125em; vertical-align: 0.25em; }

.MJXp-denom { display: inline-table !important; width: 100%; }

.MJXp-denom > * { display: table-row !important; }

.MJXp-surd { vertical-align: top; }

.MJXp-surd > * { display: block !important; }

.MJXp-script-box > * { display: table !important; height: 50%; }

.MJXp-script-box > * > * { display: table-cell !important; vertical-align: top; }

.MJXp-script-box > :last-child > * { vertical-align: bottom; }

.MJXp-script-box > * > * > * { display: block !important; }

.MJXp-mphantom { visibility: hidden; }

.MJXp-munderover, .MJXp-munder { display: inline-table !important; }

.MJXp-over { display: inline-block !important; text-align: center; }

.MJXp-over > * { display: block !important; }

.MJXp-munderover > *, .MJXp-munder > * { display: table-row !important; }

.MJXp-mtable { vertical-align: 0.25em; margin: 0px 0.125em; }

.MJXp-mtable > * { display: inline-table !important; vertical-align: middle; }

.MJXp-mtr { display: table-row !important; }

.MJXp-mtd { text-align: center; padding: 0.5em 0px 0px 0.5em; display: table-cell !important; }

.MJXp-mtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-mlabeledtr { display: table-row !important; }

.MJXp-mlabeledtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mlabeledtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-merror { background-color: rgb(255, 255, 136); color: rgb(204, 0, 0); border: 1px solid rgb(204, 0, 0); padding: 1px 3px; font-style: normal; font-size: 90%; }

.MJXp-scale0 { transform: scaleX(0); }

.MJXp-scale1 { transform: scaleX(0.1); }

.MJXp-scale2 { transform: scaleX(0.2); }

.MJXp-scale3 { transform: scaleX(0.3); }

.MJXp-scale4 { transform: scaleX(0.4); }

.MJXp-scale5 { transform: scaleX(0.5); }

.MJXp-scale6 { transform: scaleX(0.6); }

.MJXp-scale7 { transform: scaleX(0.7); }

.MJXp-scale8 { transform: scaleX(0.8); }

.MJXp-scale9 { transform: scaleX(0.9); }

.MathJax_PHTML .noError { font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-18b6cf87-3807-4919-ac78-0a8c7bcbbc11@mhtml.blink

@charset "utf-8";

.MathJax_Display { text-align: center; margin: 1em 0em; position: relative; text-indent: 0px; max-width: none; max-height: none; min-width: 0px; min-height: 0px; width: 100%; display: block !important; }

.MathJax .merror { background-color: rgb(255, 255, 136); color: rgb(204, 0, 0); border: 1px solid rgb(204, 0, 0); padding: 1px 3px; font-style: normal; font-size: 90%; }

.MathJax .MJX-monospace { font-family: monospace; }

.MathJax .MJX-sans-serif { font-family: sans-serif; }

#MathJax_Tooltip { background-color: infobackground; color: infotext; border: 1px solid black; box-shadow: rgb(170, 170, 170) 2px 2px 5px; padding: 3px 4px; z-index: 401; position: absolute; left: 0px; top: 0px; width: auto; height: auto; display: none; }

.MathJax { display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }

.MathJax:focus, body :focus .MathJax { display: inline-table; }

.MathJax.MathJax_FullWidth { text-align: center; display: table-cell !important; width: 10000em !important; }

.MathJax img, .MathJax nobr, .MathJax a { border: 0px; padding: 0px; margin: 0px; max-width: 5000em; max-height: 5000em; min-width: 0px; min-height: 0px; vertical-align: 0px; line-height: normal; text-decoration: none; }

img.MathJax_strut { border: 0px !important; padding: 0px !important; margin: 0px !important; vertical-align: 0px !important; }

.MathJax span { display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; text-decoration: none; box-sizing: content-box; }

.MathJax nobr { white-space: nowrap !important; }

.MathJax img { display: inline !important; float: none !important; }

.MathJax * { transition: none; }

.MathJax_Processing { visibility: hidden; position: fixed; width: 0px; height: 0px; overflow: hidden; }

.MathJax_Processed { display: none !important; }

.MathJax_test { font-style: normal; font-weight: normal; font-size: 100%; font-size-adjust: none; text-indent: 0px; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow: hidden; height: 1px; }

.MathJax_test.mjx-test-display { display: table !important; }

.MathJax_test.mjx-test-inline { display: inline !important; margin-right: -1px; }

.MathJax_test.mjx-test-default { display: block !important; clear: both; }

.MathJax_ex_box { position: absolute; overflow: hidden; min-height: 0px; max-height: none; padding: 0px; border: 0px; margin: 0px; width: 1px; height: 60ex; display: inline-block !important; }

.MathJax_em_box { position: absolute; overflow: hidden; min-height: 0px; max-height: none; padding: 0px; border: 0px; margin: 0px; width: 1px; height: 60em; display: inline-block !important; }

.mjx-test-inline .MathJax_left_box { display: inline-block; width: 0px; float: left; }

.mjx-test-inline .MathJax_right_box { display: inline-block; width: 0px; float: right; }

.mjx-test-display .MathJax_right_box { min-width: 0px; max-width: none; padding: 0px; border: 0px; margin: 0px; display: table-cell !important; width: 10000em !important; }

.MathJax .MathJax_HitBox { cursor: text; background: white; opacity: 0; }

.MathJax .MathJax_HitBox * { filter: none; opacity: 1; background: transparent; }

#MathJax_Tooltip * { filter: none; opacity: 1; background: transparent; }

@font-face { font-family: MathJax_Main; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Main-bold; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Main-italic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Math-italic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Caligraphic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size1; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size2; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size3; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size4; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?V=2.7.7") format("opentype"); }

.MathJax .noError { font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid; }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/pygments.css

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, 240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/alabaster.css

@charset "utf-8";

@import url("basic.css");

body { font-family: "Times New Roman", Times, serif; font-size: 17px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { width: 940px; margin: 30px auto 0px; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 220px; }

div.sphinxsidebar { width: 220px; font-size: 14px; line-height: 1.5; }

hr { border: 1px solid rgb(177, 180, 182); }

div.body { background-color: rgb(255, 255, 255); color: rgb(62, 67, 73); padding: 0px 30px; }

div.body > .section { text-align: left; }

div.footer { width: 940px; margin: 20px auto 30px; font-size: 14px; color: rgb(136, 136, 136); text-align: right; }

div.footer a { color: rgb(136, 136, 136); }

p.caption { font-family: inherit; font-size: inherit; }

div.relations { display: none; }

div.sphinxsidebar a { color: rgb(68, 68, 68); text-decoration: none; border-bottom: 1px dotted rgb(153, 153, 153); }

div.sphinxsidebar a:hover { border-bottom: 1px solid rgb(153, 153, 153); }

div.sphinxsidebarwrapper { padding: 18px 10px; }

div.sphinxsidebarwrapper p.logo { padding: 0px; margin: -10px 0px 0px; text-align: center; }

div.sphinxsidebarwrapper h1.logo { margin-top: -10px; margin-bottom: 5px; text-align: left; }

div.sphinxsidebarwrapper h1.logo-name { margin-top: 0px; }

div.sphinxsidebarwrapper p.blurb { margin-top: 0px; font-style: normal; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { font-family: "Times New Roman", Times, serif; color: rgb(68, 68, 68); font-size: 24px; font-weight: normal; margin: 0px 0px 5px; padding: 0px; }

div.sphinxsidebar h4 { font-size: 20px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar p.logo a, div.sphinxsidebar h3 a, div.sphinxsidebar p.logo a:hover, div.sphinxsidebar h3 a:hover { border: none; }

div.sphinxsidebar p { color: rgb(85, 85, 85); margin: 10px 0px; }

div.sphinxsidebar ul { margin: 10px 0px; padding: 0px; color: rgb(0, 0, 0); }

div.sphinxsidebar ul li.toctree-l1 > a { font-size: 120%; }

div.sphinxsidebar ul li.toctree-l2 > a { font-size: 110%; }

div.sphinxsidebar input { border: 1px solid rgb(204, 204, 204); font-family: "Times New Roman", Times, serif; font-size: 1em; }

div.sphinxsidebar hr { border: none; height: 1px; color: rgb(170, 170, 170); background: rgb(170, 170, 170); text-align: left; margin-left: 0px; width: 50%; }

div.sphinxsidebar .badge { border-bottom: none; }

div.sphinxsidebar .badge:hover { border-bottom: none; }

div.sphinxsidebar h3.donation { margin-top: 10px; }

a { color: rgb(0, 75, 107); text-decoration: underline; }

a:hover { color: rgb(109, 65, 0); text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h6 { font-family: "Times New Roman", Times, serif; font-weight: normal; margin: 30px 0px 10px; padding: 0px; }

div.body h1 { margin-top: 0px; padding-top: 0px; font-size: 240%; }

div.body h2 { font-size: 180%; }

div.body h3 { font-size: 150%; }

div.body h4 { font-size: 130%; }

div.body h5 { font-size: 100%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(221, 221, 221); padding: 0px 4px; text-decoration: none; }

a.headerlink:hover { color: rgb(68, 68, 68); background: rgb(234, 234, 234); }

div.body p, div.body dd, div.body li { line-height: 1.4em; }

div.admonition { margin: 20px 0px; padding: 10px 30px; background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.admonition tt.xref, div.admonition code.xref, div.admonition a tt { background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(250, 250, 250); }

div.admonition p.admonition-title { font-family: "Times New Roman", Times, serif; font-weight: normal; font-size: 24px; margin: 0px 0px 10px; padding: 0px; line-height: 1; }

div.admonition p.last { margin-bottom: 0px; }

div.highlight { background-color: rgb(255, 255, 255); }

dt:target, .highlight { background: rgb(250, 243, 232); }

div.warning { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.danger { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); box-shadow: rgb(213, 44, 44) 2px 2px 4px; }

div.error { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); box-shadow: rgb(213, 44, 44) 2px 2px 4px; }

div.caution { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.attention { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.important { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.tip { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.hint { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.seealso { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.topic { background-color: rgb(238, 238, 238); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre, tt, code { font-family: Consolas, Menlo, "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace; font-size: 0.9em; }

.hll { background-color: rgb(255, 255, 204); margin: 0px -12px; padding: 0px 12px; display: block; }

img.screenshot { }

tt.descname, tt.descclassname, code.descname, code.descclassname { font-size: 0.95em; }

tt.descname, code.descname { padding-right: 0.08em; }

img.screenshot { box-shadow: rgb(238, 238, 238) 2px 2px 4px; }

table.docutils { border: 1px solid rgb(136, 136, 136); box-shadow: rgb(238, 238, 238) 2px 2px 4px; }

table.docutils td, table.docutils th { border: 1px solid rgb(136, 136, 136); padding: 0.25em 0.7em; }

table.field-list, table.footnote { border: none; box-shadow: none; }

table.footnote { margin: 15px 0px; width: 100%; border: 1px solid rgb(238, 238, 238); background: rgb(253, 253, 253); font-size: 0.9em; }

table.footnote + table.footnote { margin-top: -15px; border-top: none; }

table.field-list th { padding: 0px 0.8em 0px 0px; }

table.field-list td { padding: 0px; }

table.field-list p { margin-bottom: 0.8em; }

.field-name { hyphens: manual; }

table.footnote td.label { width: 0.1px; padding: 0.3em 0px 0.3em 0.5em; }

table.footnote td { padding: 0.3em 0.5em; }

dl { margin: 0px; padding: 0px; }

dl dd { margin-left: 30px; }

blockquote { margin: 0px 0px 0px 30px; padding: 0px; }

ul, ol { margin: 10px 0px 10px 30px; padding: 0px; }

pre { background: rgb(238, 238, 238); padding: 7px 30px; margin: 15px 0px; line-height: 1.3em; }

div.viewcode-block:target { background: rgb(255, 255, 221); }

dl pre, blockquote pre, li pre { margin-left: 0px; padding-left: 30px; }

tt, code { background-color: white; color: rgb(34, 34, 34); }

tt.xref, code.xref, a tt { background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(255, 255, 255); }

a.reference { text-decoration: none; border-bottom: 1px dotted rgb(0, 75, 107); }

a.image-reference, a.image-reference:hover { border-bottom: none; }

a.reference:hover { border-bottom: 1px solid rgb(109, 65, 0); }

a.footnote-reference { text-decoration: none; font-size: 0.7em; vertical-align: top; border-bottom: 1px dotted rgb(0, 75, 107); }

a.footnote-reference:hover { border-bottom: 1px solid rgb(109, 65, 0); }

a:hover tt, a:hover code { background: rgb(238, 238, 238); }

@media screen and (max-width: 870px) {
  div.sphinxsidebar { display: none; }
  div.document { width: 100%; }
  div.documentwrapper { margin: 0px; }
  div.bodywrapper { margin: 0px; }
  ul { margin-left: 0px; }
  li > ul { margin-left: 30px; }
  .document { width: auto; }
  .footer { width: auto; }
  .bodywrapper { margin: 0px; }
  .footer { width: auto; }
  .github { display: none; }
}

@media screen and (max-width: 875px) {
  body { margin: 0px; padding: 20px 30px; }
  div.documentwrapper { float: none; background: rgb(255, 255, 255); }
  div.sphinxsidebar { display: block; float: none; width: 102.5%; margin: 50px -30px -20px; padding: 10px 20px; background: rgb(51, 51, 51); color: rgb(255, 255, 255); }
  div.sphinxsidebar h3, div.sphinxsidebar h4, div.sphinxsidebar p, div.sphinxsidebar h3 a { color: rgb(255, 255, 255); }
  div.sphinxsidebar a { color: rgb(170, 170, 170); }
  div.sphinxsidebar p.logo { display: none; }
  div.document { width: 100%; margin: 0px; }
  div.footer { display: none; }
  div.bodywrapper { margin: 0px; }
  div.body { min-height: 0px; padding: 0px; }
  .rtd_doc_footer { display: none; }
  .document { width: auto; }
  .footer { width: auto; }
  .footer { width: auto; }
  .github { display: none; }
}

.revsys-inline { display: none !important; }

div#changelog > div.section > ul > li > p:only-child { margin-bottom: 0px; }

table.docutils.citation, table.docutils.citation td, table.docutils.citation th { border: none; box-shadow: none; }

.related { line-height: 30px; width: 100%; font-size: 0.9rem; }

.related.top { border-bottom: 1px solid rgb(238, 238, 238); margin-bottom: 20px; }

.related.bottom { border-top: 1px solid rgb(238, 238, 238); }

.related ul { padding: 0px; margin: 0px; list-style: none; }

.related li { display: inline; }

nav#rellinks { float: right; }

nav#rellinks li + li::before { content: "|"; }

nav#breadcrumbs li + li::before { content: "»"; }

@media print {
  div.related { display: none; }
}
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.section::after { display: block; content: ""; clear: left; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; }

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-size: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type="text"] { float: left; width: 80%; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type="submit"] { float: left; width: 20%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png"); background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 30px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type: none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242, 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { hyphens: auto; }

a.headerlink { visibility: hidden; }

a.brackets::before, span.brackets > a::before { content: "["; }

a.brackets::after, span.brackets > a::after { content: "]"; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.headerlink, div.code-block-caption:hover > a.headerlink { visibility: visible; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, figure.align-left, .figure.align-left, object.align-left { clear: left; float: left; margin-right: 1em; }

img.align-right, figure.align-right, .figure.align-right, object.align-right { clear: right; float: right; margin-left: 1em; }

img.align-center, figure.align-center, .figure.align-center, object.align-center { display: block; margin-left: auto; margin-right: auto; }

img.align-default, figure.align-default, .figure.align-default { display: block; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar, aside.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 187); padding: 7px; background-color: rgb(255, 255, 238); width: 40%; float: right; clear: right; overflow-x: auto; }

p.sidebar-title { font-weight: bold; }

div.admonition, div.topic, blockquote { clear: left; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px; margin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

div.sidebar > :last-child, aside.sidebar > :last-child, div.topic > :last-child, div.admonition > :last-child { margin-bottom: 0px; }

div.sidebar::after, aside.sidebar::after, div.topic::after, div.admonition::after, blockquote::after { display: block; content: ""; clear: both; }

table.docutils { margin-top: 10px; margin-bottom: 10px; border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-width: 0px 0px 1px; border-top-style: initial; border-top-color: initial; border-left-style: initial; border-left-color: initial; border-right-style: initial; border-right-color: initial; border-bottom-style: solid; border-bottom-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > :first-child, td > :first-child { margin-top: 0px; }

th > :last-child, td > :last-child { margin-bottom: 0px; }

div.figure, figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption, figcaption { padding: 0.3em; }

div.figure p.caption span.caption-number, figcaption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text, figcaption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist { margin: 1em 0px; }

table.hlist td { vertical-align: top; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

:not(li) > ol > li:first-child > :first-child, :not(li) > ul > li:first-child > :first-child { margin-top: 0px; }

:not(li) > ol > li:last-child > :last-child, :not(li) > ul > li:last-child > :last-child { margin-bottom: 0px; }

ol.simple ol p, ol.simple ul p, ul.simple ol p, ul.simple ul p { margin-top: 0px; }

ol.simple > li:not(:first-child) > p, ul.simple > li:not(:first-child) > p { margin-top: 0px; }

ol.simple p, ul.simple p { margin-bottom: 0px; }

dl.footnote > dt, dl.citation > dt { float: left; margin-right: 0.5em; }

dl.footnote > dd, dl.citation > dd { margin-bottom: 0em; }

dl.footnote > dd::after, dl.citation > dd::after { content: ""; clear: both; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-left: 0.5em; padding-right: 5px; }

dl.field-list > dt::after { content: ":"; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > :first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dl > dd:last-child, dl > dd:last-child > :last-child { margin-bottom: 0px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; border: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left: 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0.5em; content: ":"; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

pre, div[class*="highlight-"] { clear: both; }

span.pre { hyphens: none; }

div[class*="highlight-"] { margin: 1em 0px; }

td.linenos pre { border: 0px; background-color: transparent; color: rgb(170, 170, 170); }

table.highlighttable { display: block; }

table.highlighttable tbody { display: block; }

table.highlighttable tr { display: flex; }

table.highlighttable td { margin: 0px; padding: 0px; }

table.highlighttable td.linenos { padding-right: 0.5em; }

table.highlighttable td.code { flex: 1 1 0%; overflow: hidden; }

.highlight .hll { display: block; }

div.highlight pre, table.highlighttable pre { margin: 0px; }

div.code-block-caption + div { margin-top: 0px; }

div.code-block-caption { margin-top: 1em; padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

table.highlighttable td.linenos, span.linenos, div.doctest > div.highlight span.gp { user-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-style: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { margin: 1em 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: transparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: absolute; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin: 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--MI4f0Qq4dhKcXP9JdEz40GTNuFA4jlSLhldJsHN47W------
