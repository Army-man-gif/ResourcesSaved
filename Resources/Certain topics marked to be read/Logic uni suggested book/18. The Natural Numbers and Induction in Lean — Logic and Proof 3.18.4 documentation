From: <Saved by Blink>
Snapshot-Content-Location: https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html
Subject: =?utf-8?Q?18.=20The=20Natural=20Numbers=20and=20Induction=20in=20Lean=20?=
 =?utf-8?Q?=E2=80=94=20Logic=20and=20Proof=203.18.4=20documentation?=
Date: Thu, 24 Oct 2024 11:11:15 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--ohFQLLAZXXUe4iBpdt53HR39136wTLjrT52CaZ1QGy----"


------MultipartBoundary--ohFQLLAZXXUe4iBpdt53HR39136wTLjrT52CaZ1QGy----
Content-Type: text/html
Content-ID: <frame-06E3CB703B4AF295C9A374F7DD37E8FD@mhtml.blink>
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html

<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>18. The Natural Numbers and Induction in Lean — Logic and Proof 3.18.4 documentation</title>
    <link rel="stylesheet" href="https://leanprover-community.github.io/logic_and_proof/_static/pygments.css" type="text/css">
    <link rel="stylesheet" href="https://leanprover-community.github.io/logic_and_proof/_static/alabaster.css" type="text/css">
    
    
    
    
    <link rel="shortcut icon" href="https://leanprover-community.github.io/logic_and_proof/_static/favicon.ico">
    <link rel="index" title="Index" href="https://leanprover-community.github.io/logic_and_proof/genindex.html">
    <link rel="search" title="Search" href="https://leanprover-community.github.io/logic_and_proof/search.html">
    <link rel="next" title="19. Elementary Number Theory" href="https://leanprover-community.github.io/logic_and_proof/elementary_number_theory.html">
    <link rel="prev" title="17. The Natural Numbers and Induction" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html">
<!-- <link href="https://fonts.googleapis.com/css?family=Sorts+Mill+Goudy" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css?family=Average" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css?family=EB+Garamond" rel="stylesheet"> -->

  </head><body>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="the-natural-numbers-and-induction-in-lean">
<span id="id1"></span><h1><span class="section-number">18. </span>The Natural Numbers and Induction in Lean<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#the-natural-numbers-and-induction-in-lean" title="Permalink to this headline">¶</a></h1>
<div class="section" id="induction-and-recursion-in-lean">
<h2><span class="section-number">18.1. </span>Induction and Recursion in Lean<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#induction-and-recursion-in-lean" title="Permalink to this headline">¶</a></h2>
<p>Internally, in Lean, the natural numbers are defined as a type generated inductively from an axiomatically declared <code class="docutils literal notranslate"><span class="pre">zero</span></code> and <code class="docutils literal notranslate"><span class="pre">succ</span></code> operation:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=namespace%20hidden%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Ainductive%20Nat%20%3A%20Type%0A%7C%20zero%20%3A%20Nat%0A%7C%20succ%20%3A%20Nat%20%E2%86%92%20Nat%0A--%20END%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">inductive</span> <span class="n">Nat</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="bp">|</span> <span class="n">zero</span> <span class="o">:</span> <span class="n">Nat</span>
<span class="bp">|</span> <span class="n">succ</span> <span class="o">:</span> <span class="n">Nat</span> <span class="bp">→</span> <span class="n">Nat</span>
</pre></div>
</div>
</div><p>If you click the button that copies this text into the editor in the online version of this textbook, you will see that we wrap it with the phrases <code class="docutils literal notranslate"><span class="pre">namespace</span> <span class="pre">hidden</span></code> and <code class="docutils literal notranslate"><span class="pre">end</span> <span class="pre">hidden</span></code>. This puts the definition into a new “namespace,” so that the identifiers that are defined are <code class="docutils literal notranslate"><span class="pre">hidden.Nat</span></code>, <code class="docutils literal notranslate"><span class="pre">hidden.Nat.zero</span></code> and <code class="docutils literal notranslate"><span class="pre">hidden.Nat.succ</span></code>, to avoid conflicting with the one that is in the Lean library. Below, we will do that in a number of places where our examples duplicate objects defined in the library. The unicode symbol <code class="docutils literal notranslate"><span class="pre">ℕ</span></code>, entered with <code class="docutils literal notranslate"><span class="pre">\N</span></code> or <code class="docutils literal notranslate"><span class="pre">\nat</span></code>, is a synonym for <code class="docutils literal notranslate"><span class="pre">Nat</span></code>.</p>
<p>Declaring <code class="docutils literal notranslate"><span class="pre">Nat</span></code> as an inductively defined type means that we can define functions by recursion, and prove theorems by induction. For example, these are the first two recursive definitions presented in the last chapter:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0Adef%20two_pow%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20%20%20%20%3D%3E%201%0A%7C%20(succ%20n)%20%3D%3E%202%20*%20two_pow%20n%0A%0Adef%20fact%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20%20%20%20%3D%3E%201%0A%7C%20(succ%20n)%20%3D%3E%20(succ%20n)%20*%20fact%20n" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Nat.Defs</span>

<span class="kn">open</span> <span class="n">Nat</span>

<span class="kd">def</span> <span class="n">two_pow</span> <span class="o">:</span> <span class="n">ℕ</span> <span class="bp">→</span> <span class="n">ℕ</span>
<span class="bp">|</span> <span class="mi">0</span>        <span class="bp">=&gt;</span> <span class="mi">1</span>
<span class="bp">|</span> <span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">=&gt;</span> <span class="mi">2</span> <span class="bp">*</span> <span class="n">two_pow</span> <span class="n">n</span>

<span class="kd">def</span> <span class="n">fact</span> <span class="o">:</span> <span class="n">ℕ</span> <span class="bp">→</span> <span class="n">ℕ</span>
<span class="bp">|</span> <span class="mi">0</span>        <span class="bp">=&gt;</span> <span class="mi">1</span>
<span class="bp">|</span> <span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">=&gt;</span> <span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">fact</span> <span class="n">n</span>
</pre></div>
</div>
</div><p>Addition and numerals are defined in such a way that Lean recognizes <code class="docutils literal notranslate"><span class="pre">succ</span> <span class="pre">n</span></code> and <code class="docutils literal notranslate"><span class="pre">n</span> <span class="pre">+</span> <span class="pre">1</span></code> as essentially the same, so we could instead write these definitions as follows:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Adef%20two_pow%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20%20%20%3D%3E%201%0A%7C%20(n%20%2B%201)%20%3D%3E%202%20*%20two_pow%20n%0A%0Adef%20fact%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20%20%20%3D%3E%201%0A%7C%20(n%20%2B%201)%20%3D%3E%20(n%20%2B%201)%20*%20fact%20n%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">def</span> <span class="n">two_pow</span> <span class="o">:</span> <span class="n">ℕ</span> <span class="bp">→</span> <span class="n">ℕ</span>
<span class="bp">|</span> <span class="mi">0</span>       <span class="bp">=&gt;</span> <span class="mi">1</span>
<span class="bp">|</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span><span class="o">)</span> <span class="bp">=&gt;</span> <span class="mi">2</span> <span class="bp">*</span> <span class="n">two_pow</span> <span class="n">n</span>

<span class="kd">def</span> <span class="n">fact</span> <span class="o">:</span> <span class="n">ℕ</span> <span class="bp">→</span> <span class="n">ℕ</span>
<span class="bp">|</span> <span class="mi">0</span>       <span class="bp">=&gt;</span> <span class="mi">1</span>
<span class="bp">|</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span><span class="o">)</span> <span class="bp">=&gt;</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span><span class="o">)</span> <span class="bp">*</span> <span class="n">fact</span> <span class="n">n</span>
</pre></div>
</div>
</div><p>If we wanted to define the function <code class="docutils literal notranslate"><span class="pre">m^n</span></code>, we would do that by fixing <code class="docutils literal notranslate"><span class="pre">m</span></code>, and writing doing the recursion on the second argument:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Adef%20pow%20(m%20%3A%20%E2%84%95)%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20%20%20%20%3D%3E%201%0A%7C%20(n%20%2B%201)%20%20%3D%3E%20(pow%20m%20n)%20*%20m%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">def</span> <span class="n">pow</span> <span class="o">(</span><span class="n">m</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">ℕ</span> <span class="bp">→</span> <span class="n">ℕ</span>
<span class="bp">|</span> <span class="mi">0</span>        <span class="bp">=&gt;</span> <span class="mi">1</span>
<span class="bp">|</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span><span class="o">)</span>  <span class="bp">=&gt;</span> <span class="o">(</span><span class="n">pow</span> <span class="n">m</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span>
</pre></div>
</div>
</div><p>In fact, this is how the power function on the natural numbers,
<code class="docutils literal notranslate"><span class="pre">Nat.pow</span></code>, is defined in Lean’s library.</p>
<p>Lean is also smart enough to interpret more complicated forms of recursion, like this one:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Adef%20fib%20%3A%20%E2%84%95%20%E2%86%92%20%E2%84%95%0A%7C%200%20%20%20%20%20%20%20%20%3D%3E%200%0A%7C%201%20%20%20%20%20%20%20%20%3D%3E%201%0A%7C%20(n%20%2B%202)%20%20%3D%3E%20fib%20(n%20%2B%201)%20%2B%20fib%20n" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Nat.Defs</span>

<span class="kn">open</span> <span class="n">Nat</span>

<span class="c1">-- BEGIN</span>
<span class="kd">def</span> <span class="n">fib</span> <span class="o">:</span> <span class="n">ℕ</span> <span class="bp">→</span> <span class="n">ℕ</span>
<span class="bp">|</span> <span class="mi">0</span>        <span class="bp">=&gt;</span> <span class="mi">0</span>
<span class="bp">|</span> <span class="mi">1</span>        <span class="bp">=&gt;</span> <span class="mi">1</span>
<span class="bp">|</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="mi">2</span><span class="o">)</span>  <span class="bp">=&gt;</span> <span class="n">fib</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span><span class="o">)</span> <span class="bp">+</span> <span class="n">fib</span> <span class="n">n</span>
</pre></div>
</div>
</div><p>In addition to defining functions by recursion, we can prove theorems by induction. In Lean, each clause of a recursive definition results in a new identity. For example, the two clauses in the definition of <code class="docutils literal notranslate"><span class="pre">pow</span></code> above give rise to the following two theorems:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Aexample%20(n%20%3A%20%E2%84%95)%20%3A%20Nat.pow%20n%200%20%3D%201%20%3A%3D%20rfl%0Aexample%20(m%20n%20%3A%20%E2%84%95)%20%3A%20Nat.pow%20m%20(n%2B1)%20%3D%20(Nat.pow%20m%20n)%20*%20m%20%3A%3D%20rfl%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">Nat.pow</span> <span class="n">n</span> <span class="mi">0</span> <span class="bp">=</span> <span class="mi">1</span> <span class="o">:=</span> <span class="n">rfl</span>
<span class="kd">example</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">Nat.pow</span> <span class="n">m</span> <span class="o">(</span><span class="n">n</span><span class="bp">+</span><span class="mi">1</span><span class="o">)</span> <span class="bp">=</span> <span class="o">(</span><span class="n">Nat.pow</span> <span class="n">m</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span> <span class="o">:=</span> <span class="n">rfl</span>
</pre></div>
</div>
</div><p>Lean defines the usual notation for exponentiation:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Aexample%20(n%20%3A%20%E2%84%95)%20%3A%20n%5E0%20%3D%201%20%3A%3D%20rfl%0Aexample%20(m%20n%20%3A%20%E2%84%95)%20%3A%20m%5E(n%2B1)%20%3D%20m%5En%20*%20m%20%3A%3D%20rfl%0A%0A%23check%20%40Nat.pow_zero%0A%23check%20%40Nat.pow_succ%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">n</span><span class="bp">^</span><span class="mi">0</span> <span class="bp">=</span> <span class="mi">1</span> <span class="o">:=</span> <span class="n">rfl</span>
<span class="kd">example</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">n</span><span class="bp">+</span><span class="mi">1</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="n">n</span> <span class="bp">*</span> <span class="n">m</span> <span class="o">:=</span> <span class="n">rfl</span>

<span class="k">#check</span> <span class="bp">@</span><span class="n">Nat.pow_zero</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">Nat.pow_succ</span>
</pre></div>
</div>
</div><p>Notice that we could alternatively have used <code class="docutils literal notranslate"><span class="pre">m</span> <span class="pre">*</span> <span class="pre">Nat.pow</span> <span class="pre">m</span> <span class="pre">n</span></code>
in the second clause of the definition of <code class="docutils literal notranslate"><span class="pre">Nat.pow</span></code>.
Of course, we can prove that the two definitions are equivalent using the
commutativity of multiplication, but,
using a proof by induction,
we can also prove it using only the associativity of multiplication,
and the properties <code class="docutils literal notranslate"><span class="pre">1</span> <span class="pre">*</span> <span class="pre">m</span> <span class="pre">=</span> <span class="pre">m</span></code> and <code class="docutils literal notranslate"><span class="pre">m</span> <span class="pre">*</span> <span class="pre">1</span> <span class="pre">=</span> <span class="pre">m</span></code>.
This is useful, because the power function is also often used in situations
where multiplication is not commutative,
such as with matrix multiplication.
The theorem can be proved in Lean as follows:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Aexample%20(m%20n%20%3A%20%E2%84%95)%20%3A%20m%5E(succ%20n)%20%3D%20m%20*%20m%5En%20%3A%3D%20by%0A%20%20induction%20n%20with%0A%20%20%7C%20zero%20%3D%3E%0A%20%20%20%20show%20m%5E(succ%200)%20%3D%20m%20*%20m%5E0%0A%20%20%20%20calc%0A%20%20%20%20%20%20%20%20m%5E(succ%200)%20%3D%20m%5E0%20*%20m%20%3A%3D%20by%20rw%20%5BNat.pow_succ%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%201%20*%20m%20%20%20%3A%3D%20by%20rw%20%5BNat.pow_zero%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%20%20%20%20%20%20%20%3A%3D%20by%20rw%20%5BNat.one_mul%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%20*%201%20%20%20%3A%3D%20by%20rw%20%5BNat.mul_one%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%20*%20m%5E0%20%3A%3D%20by%20rw%20%5BNat.pow_zero%5D%0A%20%20%7C%20succ%20n%20ih%20%3D%3E%0A%20%20%20%20show%20m%5E(succ%20(succ%20n))%20%3D%20m%20*%20m%5E(succ%20n)%0A%20%20%20%20calc%0A%20%20%20%20%20%20m%5E(succ%20(succ%20n))%20%3D%20m%5E(succ%20n)%20*%20m%20%20%20%3A%3D%20by%20rw%20%5BNat.pow_succ%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20(m%20*%20m%5En)%20*%20m%20%20%20%20%3A%3D%20by%20rw%20%5Bih%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%20*%20(m%5En%20*%20m)%20%20%20%20%3A%3D%20by%20rw%20%5BNat.mul_assoc%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%20*%20m%5E(succ%20n)%20%20%20%20%3A%3D%20by%20rw%20%5BNat.pow_succ%5D%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">n</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">induction</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">zero</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="mi">0</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="mi">0</span>
    <span class="k">calc</span>
        <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="mi">0</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="mi">0</span> <span class="bp">*</span> <span class="n">m</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_succ</span><span class="o">]</span>
                 <span class="n">_</span> <span class="bp">=</span> <span class="mi">1</span> <span class="bp">*</span> <span class="n">m</span>   <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_zero</span><span class="o">]</span>
                 <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span>       <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.one_mul</span><span class="o">]</span>
                 <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="mi">1</span>   <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.mul_one</span><span class="o">]</span>
                 <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="mi">0</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_zero</span><span class="o">]</span>
  <span class="bp">|</span> <span class="n">succ</span> <span class="n">n</span> <span class="n">ih</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">))</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span>
    <span class="k">calc</span>
      <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">))</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span>   <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_succ</span><span class="o">]</span>
                      <span class="n">_</span> <span class="bp">=</span> <span class="o">(</span><span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span>    <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">ih</span><span class="o">]</span>
                      <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="o">(</span><span class="n">m</span><span class="bp">^</span><span class="n">n</span> <span class="bp">*</span> <span class="n">m</span><span class="o">)</span>    <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.mul_assoc</span><span class="o">]</span>
                      <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span>    <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_succ</span><span class="o">]</span>
</pre></div>
</div>
</div><p>This is a typical proof by induction in Lean.
It begins with the tactic <code class="docutils literal notranslate"><span class="pre">induction</span> <span class="pre">n</span> <span class="pre">with</span></code>,
which is like <code class="docutils literal notranslate"><span class="pre">cases</span> <span class="pre">n</span> <span class="pre">with</span></code>,
but also supplies the induction hypothesis <code class="docutils literal notranslate"><span class="pre">ih</span></code>
in the successor case.
Here is a shorter proof:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Aexample%20(m%20n%20%3A%20%E2%84%95)%20%3A%20m%5E(succ%20n)%20%3D%20m%20*%20m%5En%20%3A%3D%20by%0A%20%20induction%20n%20with%0A%20%20%7C%20zero%20%3D%3E%0A%20%20%20%20show%20m%5E(succ%200)%20%3D%20m%20*%20m%5E0%0A%20%20%20%20rw%20%5BNat.pow_succ%2C%20Nat.pow_zero%2C%20Nat.one_mul%2C%20Nat.mul_one%5D%0A%20%20%7C%20succ%20n%20ih%20%3D%3E%0A%20%20%20%20show%20m%5E(succ%20(succ%20n))%20%3D%20m%20*%20m%5E(succ%20n)%0A%20%20%20%20rw%20%5BNat.pow_succ%2C%20Nat.pow_succ%2C%20%E2%86%90%20Nat.mul_assoc%2C%20%E2%86%90%20ih%2C%20Nat.pow_succ%5D%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">n</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">induction</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">zero</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="mi">0</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="mi">0</span>
    <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_succ</span><span class="o">,</span> <span class="n">Nat.pow_zero</span><span class="o">,</span> <span class="n">Nat.one_mul</span><span class="o">,</span> <span class="n">Nat.mul_one</span><span class="o">]</span>
  <span class="bp">|</span> <span class="n">succ</span> <span class="n">n</span> <span class="n">ih</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">))</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span>
    <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_succ</span><span class="o">,</span> <span class="n">Nat.pow_succ</span><span class="o">,</span> <span class="bp">←</span> <span class="n">Nat.mul_assoc</span><span class="o">,</span> <span class="bp">←</span> <span class="n">ih</span><span class="o">,</span> <span class="n">Nat.pow_succ</span><span class="o">]</span>
</pre></div>
</div>
</div><p>Remember that you can write a <code class="docutils literal notranslate"><span class="pre">rewrite</span></code> proof incrementally, checking the error messages to make sure things are working so far, and to see how far Lean got.</p>
<p>As another example of a proof by induction, here is a proof of the identity <code class="docutils literal notranslate"><span class="pre">m^(n</span> <span class="pre">+</span> <span class="pre">k)</span> <span class="pre">=</span> <span class="pre">m^n</span> <span class="pre">*</span> <span class="pre">m^k</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Aexample%20(m%20n%20k%20%3A%20%E2%84%95)%20%3A%20m%5E(n%20%2B%20k)%20%3D%20m%5En%20*%20m%5Ek%20%3A%3D%20by%0A%20%20induction%20n%20with%0A%20%20%7C%20zero%20%3D%3E%0A%20%20%20%20show%20m%5E(0%20%2B%20k)%20%3D%20m%5E0%20*%20m%5Ek%0A%20%20%20%20calc%20m%5E(0%20%2B%20k)%20%3D%20m%5Ek%20%20%20%20%20%20%20%3A%3D%20by%20rw%20%5BNat.zero_add%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%201%20*%20m%5Ek%20%20%20%3A%3D%20by%20rw%20%5BNat.one_mul%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%5E0%20*%20m%5Ek%20%3A%3D%20by%20rw%20%5BNat.pow_zero%5D%0A%20%20%7C%20succ%20n%20ih%20%3D%3E%0A%20%20%20%20show%20m%5E(succ%20n%20%2B%20k)%20%3D%20m%5E(succ%20n)%20*%20m%5Ek%0A%20%20%20%20calc%0A%20%20%20%20%20%20m%5E(succ%20n%20%2B%20k)%20%3D%20m%5E(succ%20(n%20%2B%20k))%20%3A%3D%20by%20rw%20%5BNat.succ_add%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%20*%20m%5E(n%20%2B%20k)%20%20%20%20%3A%3D%20by%20rw%20%5BNat.pow_succ'%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%20*%20(m%5En%20*%20m%5Ek)%20%20%20%20%3A%3D%20by%20rw%20%5Bih%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20(m%20*%20m%5En)%20*%20m%5Ek%20%20%3A%3D%20by%20rw%20%5BNat.mul_assoc%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20m%5E(succ%20n)%20*%20m%5Ek%20%3A%3D%20by%20rw%20%5BNat.pow_succ'%5D%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="n">n</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">induction</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">zero</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="mi">0</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="mi">0</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span>
    <span class="k">calc</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="mi">0</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span>       <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.zero_add</span><span class="o">]</span>
                 <span class="n">_</span> <span class="bp">=</span> <span class="mi">1</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span>   <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.one_mul</span><span class="o">]</span>
                 <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="mi">0</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_zero</span><span class="o">]</span>
  <span class="bp">|</span> <span class="n">succ</span> <span class="n">n</span> <span class="n">ih</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span>
    <span class="k">calc</span>
      <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">))</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.succ_add</span><span class="o">]</span>
                  <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span>    <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_succ'</span><span class="o">]</span>
                  <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="o">(</span><span class="n">m</span><span class="bp">^</span><span class="n">n</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span><span class="o">)</span>    <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">ih</span><span class="o">]</span>
                  <span class="n">_</span> <span class="bp">=</span> <span class="o">(</span><span class="n">m</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span>  <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.mul_assoc</span><span class="o">]</span>
                  <span class="n">_</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pow_succ'</span><span class="o">]</span>
</pre></div>
</div>
</div><p>Notice the same pattern.
We do induction on <code class="docutils literal notranslate"><span class="pre">n</span></code>,
and the base case and inductive step are routine.
The theorem is called <code class="docutils literal notranslate"><span class="pre">pow_add</span></code> in the library,
and once again, with a bit of cleverness,
we can shorten the proof with <code class="docutils literal notranslate"><span class="pre">rewrite</span></code>:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--%20BEGIN%0Aexample%20(m%20n%20k%20%3A%20%E2%84%95)%20%3A%20m%5E(n%20%2B%20k)%20%3D%20m%5En%20*%20m%5Ek%20%3A%3D%20by%0A%20%20induction%20n%20with%0A%20%20%7C%20zero%20%3D%3E%0A%20%20%20%20show%20m%5E(0%20%2B%20k)%20%3D%20m%5E0%20*%20m%5Ek%0A%20%20%20%20rw%20%5BNat.zero_add%2C%20Nat.pow_zero%2C%20Nat.one_mul%5D%0A%20%20%7C%20succ%20n%20ih%20%3D%3E%0A%20%20%20%20show%20m%5E(succ%20n%20%2B%20k)%20%3D%20m%5E(succ%20n)%20*%20m%5Ek%0A%20%20%20%20rw%20%5BNat.succ_add%2C%20Nat.pow_succ'%2C%20ih%2C%20%E2%86%90%20Nat.mul_assoc%2C%20Nat.pow_succ'%5D%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="n">n</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">induction</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">zero</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="mi">0</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="mi">0</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span>
    <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.zero_add</span><span class="o">,</span> <span class="n">Nat.pow_zero</span><span class="o">,</span> <span class="n">Nat.one_mul</span><span class="o">]</span>
  <span class="bp">|</span> <span class="n">succ</span> <span class="n">n</span> <span class="n">ih</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span><span class="bp">^</span><span class="o">(</span><span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">m</span><span class="bp">^</span><span class="n">k</span>
    <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.succ_add</span><span class="o">,</span> <span class="n">Nat.pow_succ'</span><span class="o">,</span> <span class="n">ih</span><span class="o">,</span> <span class="bp">←</span> <span class="n">Nat.mul_assoc</span><span class="o">,</span> <span class="n">Nat.pow_succ'</span><span class="o">]</span>
</pre></div>
</div>
</div><p>You should not hesitate to use <code class="docutils literal notranslate"><span class="pre">calc</span></code>,
however, to make the proofs more explicit.
Remember that you can also use <code class="docutils literal notranslate"><span class="pre">calc</span></code> and <code class="docutils literal notranslate"><span class="pre">rewrite</span></code> together,
using <code class="docutils literal notranslate"><span class="pre">calc</span></code> to structure the calculational proof,
and using <code class="docutils literal notranslate"><span class="pre">rewrite</span></code> to fill in each justification step.</p>
</div>
<div class="section" id="defining-the-arithmetic-operations-in-lean">
<h2><span class="section-number">18.2. </span>Defining the Arithmetic Operations in Lean<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#defining-the-arithmetic-operations-in-lean" title="Permalink to this headline">¶</a></h2>
<p>In fact, addition and multiplication are defined in Lean essentially as described in <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html#defining-arithmetic-operations"><span class="std std-numref">Section 17.4</span></a>. The defining equations for addition hold by reflexivity, but they are also named <code class="docutils literal notranslate"><span class="pre">add_zero</span></code> and <code class="docutils literal notranslate"><span class="pre">add_succ</span></code>:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0Avariable%20(m%20n%20%3A%20%E2%84%95)%0A%0A--%20BEGIN%0Aexample%20%3A%20m%20%2B%200%20%3D%20m%20%3A%3D%20Nat.add_zero%20m%0Aexample%20%3A%20m%20%2B%20succ%20n%20%3D%20succ%20(m%20%2B%20n)%20%3A%3D%20Nat.add_succ%20m%20n%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">:</span> <span class="n">m</span> <span class="bp">+</span> <span class="mi">0</span> <span class="bp">=</span> <span class="n">m</span> <span class="o">:=</span> <span class="n">Nat.add_zero</span> <span class="n">m</span>
<span class="kd">example</span> <span class="o">:</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">m</span> <span class="bp">+</span> <span class="n">n</span><span class="o">)</span> <span class="o">:=</span> <span class="n">Nat.add_succ</span> <span class="n">m</span> <span class="n">n</span>
</pre></div>
</div>
</div><p>Similarly, we have the defining equations for the predecessor function
and multiplication:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0A--%20BEGIN%0A%23check%20%40Nat.pred_zero%0A%23check%20%40Nat.pred_succ%0A%23check%20%40Nat.mul_zero%0A%23check%20%40Nat.mul_succ%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="k">#check</span> <span class="bp">@</span><span class="n">Nat.pred_zero</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">Nat.pred_succ</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">Nat.mul_zero</span>
<span class="k">#check</span> <span class="bp">@</span><span class="n">Nat.mul_succ</span>
</pre></div>
</div>
</div><p>Here are the five propositions proved in <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html#defining-arithmetic-operations"><span class="std std-numref">Section 17.4</span></a>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0Anamespace%20hidden%0A%0A--%20BEGIN%0Atheorem%20succ_pred%20(n%20%3A%20%E2%84%95)%20%3A%20n%20%E2%89%A0%200%20%E2%86%92%20succ%20(pred%20n)%20%3D%20n%20%3A%3D%20by%0A%20%20intro%20(hn%20%3A%20n%20%E2%89%A0%200)%0A%20%20cases%20n%20with%0A%20%20%7C%20zero%20%3D%3E%20exact%20absurd%20rfl%20(hn%20%3A%200%20%E2%89%A0%200)%0A%20%20%7C%20succ%20n%20%3D%3E%20rw%20%5BNat.pred_succ%5D%0A--%20END%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">theorem</span> <span class="n">succ_pred</span> <span class="o">(</span><span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span> <span class="o">:</span> <span class="n">n</span> <span class="bp">≠</span> <span class="mi">0</span> <span class="bp">→</span> <span class="n">succ</span> <span class="o">(</span><span class="n">pred</span> <span class="n">n</span><span class="o">)</span> <span class="bp">=</span> <span class="n">n</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">hn</span> <span class="o">:</span> <span class="n">n</span> <span class="bp">≠</span> <span class="mi">0</span><span class="o">)</span>
  <span class="n">cases</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">zero</span> <span class="bp">=&gt;</span> <span class="n">exact</span> <span class="n">absurd</span> <span class="n">rfl</span> <span class="o">(</span><span class="n">hn</span> <span class="o">:</span> <span class="mi">0</span> <span class="bp">≠</span> <span class="mi">0</span><span class="o">)</span>
  <span class="bp">|</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=&gt;</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.pred_succ</span><span class="o">]</span>
</pre></div>
</div>
</div><p>Note that we don’t need to use <code class="docutils literal notranslate"><span class="pre">induction</span></code> here, only <code class="docutils literal notranslate"><span class="pre">cases</span></code>.
We prove the next one in term mode instead:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0Anamespace%20hidden%0A%0A--%20BEGIN%0Atheorem%20zero_add%20(n%20%3A%20Nat)%20%3A%200%20%2B%20n%20%3D%20n%20%3A%3D%0A%20%20match%20n%20with%0A%20%20%7C%20zero%20%3D%3E%20show%200%20%2B%200%20%3D%200%20from%20rfl%0A%20%20%7C%20succ%20n%20%3D%3E%0A%20%20%20%20show%200%20%2B%20succ%20n%20%3D%20succ%20n%20from%20calc%0A%20%20%20%20%20%200%20%2B%20succ%20n%20%3D%20succ%20(0%20%2B%20n)%20%3A%3D%20by%20rfl%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20succ%20n%20%3A%3D%20by%20rw%20%5Bzero_add%20n%5D%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">theorem</span> <span class="n">zero_add</span> <span class="o">(</span><span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">)</span> <span class="o">:</span> <span class="mi">0</span> <span class="bp">+</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">n</span> <span class="o">:=</span>
  <span class="k">match</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="n">zero</span> <span class="bp">=&gt;</span> <span class="k">show</span> <span class="mi">0</span> <span class="bp">+</span> <span class="mi">0</span> <span class="bp">=</span> <span class="mi">0</span> <span class="k">from</span> <span class="n">rfl</span>
  <span class="bp">|</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="mi">0</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="n">n</span> <span class="k">from</span> <span class="k">calc</span>
      <span class="mi">0</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="mi">0</span> <span class="bp">+</span> <span class="n">n</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rfl</span>
               <span class="n">_</span> <span class="bp">=</span> <span class="n">succ</span> <span class="n">n</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">zero_add</span> <span class="n">n</span><span class="o">]</span>
</pre></div>
</div>
</div><p>The <code class="docutils literal notranslate"><span class="pre">match</span></code> notation is very similar to <code class="docutils literal notranslate"><span class="pre">induction</span></code>,
except it does not let us provide a name like <code class="docutils literal notranslate"><span class="pre">ih</span></code>
for the induction hypothesis.
Instead, we call <code class="docutils literal notranslate"><span class="pre">zero_add</span> <span class="pre">n</span> <span class="pre">:</span> <span class="pre">0</span> <span class="pre">+</span> <span class="pre">n</span> <span class="pre">=</span> <span class="pre">n</span></code>,
which is the induction hypothesis.
Note that calling <code class="docutils literal notranslate"><span class="pre">zero_add</span> <span class="pre">(succ</span> <span class="pre">n)</span></code> in the same place would be circular,
and if we did so Lean would throw an error.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0Anamespace%20hidden%0A%0A--%20BEGIN%0Atheorem%20succ_add%20(m%20n%20%3A%20Nat)%20%3A%20succ%20m%20%2B%20n%20%3D%20succ%20(m%20%2B%20n)%20%3A%3D%0A%20%20match%20n%20with%0A%20%20%7C%200%20%3D%3E%20show%20succ%20m%20%2B%200%20%3D%20succ%20(m%20%2B%200)%20from%20rfl%0A%20%20%7C%20n%20%2B%201%20%3D%3E%0A%20%20%20%20show%20succ%20m%20%2B%20succ%20n%20%3D%20succ%20(m%20%2B%20succ%20n)%20from%20calc%0A%20%20%20%20%20%20%20%20%20succ%20m%20%2B%20succ%20n%20%3D%20succ%20(succ%20m%20%2B%20n)%20%3A%3D%20by%20rfl%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20succ%20(succ%20(m%20%2B%20n))%20%3A%3D%20by%20rw%20%5Bsucc_add%20m%20n%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20succ%20(m%20%2B%20succ%20n)%20%3A%3D%20by%20rfl%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">theorem</span> <span class="n">succ_add</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">)</span> <span class="o">:</span> <span class="n">succ</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">m</span> <span class="bp">+</span> <span class="n">n</span><span class="o">)</span> <span class="o">:=</span>
  <span class="k">match</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="mi">0</span> <span class="bp">=&gt;</span> <span class="k">show</span> <span class="n">succ</span> <span class="n">m</span> <span class="bp">+</span> <span class="mi">0</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">m</span> <span class="bp">+</span> <span class="mi">0</span><span class="o">)</span> <span class="k">from</span> <span class="n">rfl</span>
  <span class="bp">|</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span> <span class="bp">=&gt;</span>
    <span class="k">show</span> <span class="n">succ</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">m</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="k">from</span> <span class="k">calc</span>
         <span class="n">succ</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">succ</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">n</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rfl</span>
                       <span class="n">_</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">succ</span> <span class="o">(</span><span class="n">m</span> <span class="bp">+</span> <span class="n">n</span><span class="o">))</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">succ_add</span> <span class="n">m</span> <span class="n">n</span><span class="o">]</span>
                       <span class="n">_</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">m</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rfl</span>
</pre></div>
</div>
</div><p>Note that this time we used <code class="docutils literal notranslate"><span class="pre">0</span></code> and <code class="docutils literal notranslate"><span class="pre">n</span> <span class="pre">+</span> <span class="pre">1</span></code> in the <code class="docutils literal notranslate"><span class="pre">match</span></code> cases.
Here are the final two:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0Anamespace%20hidden%0A%0A--%20BEGIN%0Atheorem%20add_assoc%20(m%20n%20k%20%3A%20Nat)%20%3A%20m%20%2B%20n%20%2B%20k%20%3D%20m%20%2B%20(n%20%2B%20k)%20%3A%3D%0A%20%20match%20k%20with%0A%20%20%7C%200%20%3D%3E%20show%20m%20%2B%20n%20%2B%200%20%3D%20m%20%2B%20(n%20%2B%200)%20from%20by%0A%20%20%20%20rw%20%5BNat.add_zero%2C%20Nat.add_zero%5D%0A%20%20%7C%20k%20%2B%201%20%3D%3E%20show%20m%20%2B%20n%20%2B%20succ%20k%20%3D%20m%20%2B%20(n%20%2B%20(succ%20k))%20from%20by%0A%20%20%20%20rw%20%5Badd_succ%2C%20add_assoc%20m%20n%20k%2C%20add_succ%2C%20add_succ%5D%0A%0Atheorem%20add_comm%20(m%20n%20%3A%20Nat)%20%3A%20m%20%2B%20n%20%3D%20n%20%2B%20m%20%3A%3D%0A%20%20match%20n%20with%0A%20%20%7C%200%20%3D%3E%20show%20m%20%2B%200%20%3D%200%20%2B%20m%20from%20by%20rw%20%5BNat.add_zero%2C%20Nat.zero_add%5D%0A%20%20%7C%20n%20%2B%201%20%3D%3E%20show%20m%20%2B%20succ%20n%20%3D%20succ%20n%20%2B%20m%20from%20calc%0A%20%20%20%20%20%20m%20%2B%20succ%20n%20%3D%20succ%20(m%20%2B%20n)%20%3A%3D%20by%20rw%20%5Badd_succ%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20succ%20(n%20%2B%20m)%20%3A%3D%20by%20rw%20%5Badd_comm%20m%20n%5D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20_%20%3D%20succ%20n%20%2B%20m%20%20%20%3A%3D%20by%20rw%20%5Bsucc_add%5D%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">theorem</span> <span class="n">add_assoc</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">)</span> <span class="o">:</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">k</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">+</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="o">:=</span>
  <span class="k">match</span> <span class="n">k</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="mi">0</span> <span class="bp">=&gt;</span> <span class="k">show</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">0</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">+</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="mi">0</span><span class="o">)</span> <span class="k">from</span> <span class="kd">by</span>
    <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.add_zero</span><span class="o">,</span> <span class="n">Nat.add_zero</span><span class="o">]</span>
  <span class="bp">|</span> <span class="n">k</span> <span class="bp">+</span> <span class="mi">1</span> <span class="bp">=&gt;</span> <span class="k">show</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">k</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">+</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="o">(</span><span class="n">succ</span> <span class="n">k</span><span class="o">))</span> <span class="k">from</span> <span class="kd">by</span>
    <span class="n">rw</span> <span class="o">[</span><span class="n">add_succ</span><span class="o">,</span> <span class="n">add_assoc</span> <span class="n">m</span> <span class="n">n</span> <span class="n">k</span><span class="o">,</span> <span class="n">add_succ</span><span class="o">,</span> <span class="n">add_succ</span><span class="o">]</span>

<span class="kd">theorem</span> <span class="n">add_comm</span> <span class="o">(</span><span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">)</span> <span class="o">:</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">m</span> <span class="o">:=</span>
  <span class="k">match</span> <span class="n">n</span> <span class="k">with</span>
  <span class="bp">|</span> <span class="mi">0</span> <span class="bp">=&gt;</span> <span class="k">show</span> <span class="n">m</span> <span class="bp">+</span> <span class="mi">0</span> <span class="bp">=</span> <span class="mi">0</span> <span class="bp">+</span> <span class="n">m</span> <span class="k">from</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">Nat.add_zero</span><span class="o">,</span> <span class="n">Nat.zero_add</span><span class="o">]</span>
  <span class="bp">|</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span> <span class="bp">=&gt;</span> <span class="k">show</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">m</span> <span class="k">from</span> <span class="k">calc</span>
      <span class="n">m</span> <span class="bp">+</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">m</span> <span class="bp">+</span> <span class="n">n</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">add_succ</span><span class="o">]</span>
               <span class="n">_</span> <span class="bp">=</span> <span class="n">succ</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="n">m</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">add_comm</span> <span class="n">m</span> <span class="n">n</span><span class="o">]</span>
               <span class="n">_</span> <span class="bp">=</span> <span class="n">succ</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">m</span>   <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="n">succ_add</span><span class="o">]</span>
</pre></div>
</div>
</div></div>
<div class="section" id="exercises">
<h2><span class="section-number">18.3. </span>Exercises<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#exercises" title="Permalink to this headline">¶</a></h2>
<ol class="arabic">
<li><p>Formalize as many of the identities from
<a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html#defining-arithmetic-operations"><span class="std std-numref">Section 17.4</span></a>
as you can by replacing each <cite>sorry</cite> with a proof.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--1.a.%0Aexample%20%3A%20%E2%88%80%20m%20n%20k%20%3A%20Nat%2C%20m%20*%20(n%20%2B%20k)%20%3D%20m%20*%20n%20%2B%20m%20*%20k%20%3A%3D%20sorry%0A%0A--1.b.%0Aexample%20%3A%20%E2%88%80%20n%20%3A%20Nat%2C%200%20*%20n%20%3D%200%20%3A%3D%20sorry%0A%0A--1.c.%0Aexample%20%3A%20%E2%88%80%20n%20%3A%20Nat%2C%201%20*%20n%20%3D%20n%20%3A%3D%20sorry%0A%0A--1.d.%0Aexample%20%3A%20%E2%88%80%20m%20n%20k%20%3A%20Nat%2C%20(m%20*%20n)%20*%20k%20%3D%20m%20*%20(n%20*%20k)%20%3A%3D%20sorry%0A%0A--1.e.%0Aexample%20%3A%20%E2%88%80%20m%20n%20%3A%20Nat%2C%20m%20*%20n%20%3D%20n%20*%20m%20%3A%3D%20sorry" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Nat.Defs</span>

<span class="kn">open</span> <span class="n">Nat</span>

<span class="c1">--1.a.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="n">m</span> <span class="bp">*</span> <span class="o">(</span><span class="n">n</span> <span class="bp">+</span> <span class="n">k</span><span class="o">)</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">k</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--1.b.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="mi">0</span> <span class="bp">*</span> <span class="n">n</span> <span class="bp">=</span> <span class="mi">0</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--1.c.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="mi">1</span> <span class="bp">*</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">n</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--1.d.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="o">(</span><span class="n">m</span> <span class="bp">*</span> <span class="n">n</span><span class="o">)</span> <span class="bp">*</span> <span class="n">k</span> <span class="bp">=</span> <span class="n">m</span> <span class="bp">*</span> <span class="o">(</span><span class="n">n</span> <span class="bp">*</span> <span class="n">k</span><span class="o">)</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--1.e.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">n</span> <span class="bp">=</span> <span class="n">n</span> <span class="bp">*</span> <span class="n">m</span> <span class="o">:=</span> <span class="gr">sorry</span>
</pre></div>
</div>
</div></li>
<li><p>Formalize as many of the identities from <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html#arithmetic-on-the-natural-numbers"><span class="std std-numref">Section 17.5</span></a> as you can by replacing each <cite>sorry</cite> with a proof.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0A%0A--2.a.%0Aexample%20%3A%20%E2%88%80%20m%20n%20k%20%3A%20Nat%2C%20n%20%E2%89%A4%20m%20%E2%86%92%20n%20%2B%20k%20%E2%89%A4%20m%20%2B%20k%20%3A%3D%20sorry%0A%0A--2.b.%0Aexample%20%3A%20%E2%88%80%20m%20n%20k%20%3A%20Nat%2C%20n%20%2B%20k%20%E2%89%A4%20m%20%2B%20k%20%E2%86%92%20n%20%E2%89%A4%20m%20%3A%3D%20sorry%0A%0A--2.c.%0Aexample%20%3A%20%E2%88%80%20m%20n%20k%20%3A%20Nat%2C%20n%20%E2%89%A4%20m%20%E2%86%92%20n%20*%20k%20%E2%89%A4%20m%20*%20k%20%3A%3D%20sorry%0A%0A--2.d.%0Aexample%20%3A%20%E2%88%80%20m%20n%20%3A%20Nat%2C%20m%20%E2%89%A5%20n%20%E2%86%92%20m%20%3D%20n%20%E2%88%A8%20m%20%E2%89%A5%20n%2B1%20%3A%3D%20sorry%0A%0A--2.e.%0Aexample%20%3A%20%E2%88%80%20n%20%3A%20Nat%2C%200%20%E2%89%A4%20n%20%3A%3D%20sorry" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Nat.Defs</span>

<span class="kn">open</span> <span class="n">Nat</span>

<span class="c1">--2.a.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="n">n</span> <span class="bp">≤</span> <span class="n">m</span> <span class="bp">→</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">k</span> <span class="bp">≤</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">k</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--2.b.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="n">n</span> <span class="bp">+</span> <span class="n">k</span> <span class="bp">≤</span> <span class="n">m</span> <span class="bp">+</span> <span class="n">k</span> <span class="bp">→</span> <span class="n">n</span> <span class="bp">≤</span> <span class="n">m</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--2.c.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">m</span> <span class="n">n</span> <span class="n">k</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="n">n</span> <span class="bp">≤</span> <span class="n">m</span> <span class="bp">→</span> <span class="n">n</span> <span class="bp">*</span> <span class="n">k</span> <span class="bp">≤</span> <span class="n">m</span> <span class="bp">*</span> <span class="n">k</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--2.d.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">m</span> <span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="n">m</span> <span class="bp">≥</span> <span class="n">n</span> <span class="bp">→</span> <span class="n">m</span> <span class="bp">=</span> <span class="n">n</span> <span class="bp">∨</span> <span class="n">m</span> <span class="bp">≥</span> <span class="n">n</span><span class="bp">+</span><span class="mi">1</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="c1">--2.e.</span>
<span class="kd">example</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">n</span> <span class="o">:</span> <span class="n">Nat</span><span class="o">,</span> <span class="mi">0</span> <span class="bp">≤</span> <span class="n">n</span> <span class="o">:=</span> <span class="gr">sorry</span>
</pre></div>
</div>
</div></li>
</ol>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="https://leanprover-community.github.io/logic_and_proof/index.html">Logic and Proof</a></h1>








<!-- <h3>Navigation</h3> -->
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/introduction.html">1. Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/propositional_logic.html">2. Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/natural_deduction_for_propositional_logic.html">3. Natural Deduction for Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/propositional_logic_in_lean.html">4. Propositional Logic in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/classical_reasoning.html">5. Classical Reasoning</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/semantics_of_propositional_logic.html">6. Semantics of Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/first_order_logic.html">7. First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/natural_deduction_for_first_order_logic.html">8. Natural Deduction for First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/first_order_logic_in_lean.html">9. First Order Logic in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/semantics_of_first_order_logic.html">10. Semantics of First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets.html">11. Sets</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html">12. Sets in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations.html">13. Relations</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html">14. Relations in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/functions.html">15. Functions</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/functions_in_lean.html">16. Functions in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html">17. The Natural Numbers and Induction</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#">18. The Natural Numbers and Induction in Lean</a><ul>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#induction-and-recursion-in-lean">18.1. Induction and Recursion in Lean</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#defining-the-arithmetic-operations-in-lean">18.2. Defining the Arithmetic Operations in Lean</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html#exercises">18.3. Exercises</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/elementary_number_theory.html">19. Elementary Number Theory</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/combinatorics.html">20. Combinatorics</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_real_numbers.html">21. The Real Numbers</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_infinite.html">22. The Infinite</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/axiomatic_foundations.html">23. Axiomatic Foundations</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/nd_quickref.html">24. Appendix: Natural Deduction Rules</a></li>
</ul>


<hr>
<ul>
    
    <li class="toctree-l1"><a href="https://leanprover.github.io/">Lean Home</a></li>
    
    <li class="toctree-l1"><a href="https://leanprover-community.github.io/logic_and_proof/logic_and_proof.pdf">PDF version</a></li>
    
</ul>

<div id="searchbox" style="" role="search">
  <h3 id="searchlabel">Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="https://leanprover-community.github.io/logic_and_proof/search.html" method="get">
      <input type="text" name="q" aria-labelledby="searchlabel">
      <input type="submit" value="Go">
    </form>
    </div>
</div>

        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      ©2017, Jeremy Avigad, Joseph Hua, Robert Y. Lewis, and Floris van Doorn.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 3.5.4</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="https://leanprover-community.github.io/logic_and_proof/_sources/the_natural_numbers_and_induction_in_lean.rst.txt" rel="nofollow">Page source</a>
    </div>

    

    
  
</body></html>
------MultipartBoundary--ohFQLLAZXXUe4iBpdt53HR39136wTLjrT52CaZ1QGy----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/pygments.css

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, 240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--ohFQLLAZXXUe4iBpdt53HR39136wTLjrT52CaZ1QGy----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/alabaster.css

@charset "utf-8";

@import url("basic.css");

body { font-family: "Times New Roman", Times, serif; font-size: 17px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { width: 940px; margin: 30px auto 0px; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 220px; }

div.sphinxsidebar { width: 220px; font-size: 14px; line-height: 1.5; }

hr { border: 1px solid rgb(177, 180, 182); }

div.body { background-color: rgb(255, 255, 255); color: rgb(62, 67, 73); padding: 0px 30px; }

div.body > .section { text-align: left; }

div.footer { width: 940px; margin: 20px auto 30px; font-size: 14px; color: rgb(136, 136, 136); text-align: right; }

div.footer a { color: rgb(136, 136, 136); }

p.caption { font-family: inherit; font-size: inherit; }

div.relations { display: none; }

div.sphinxsidebar a { color: rgb(68, 68, 68); text-decoration: none; border-bottom: 1px dotted rgb(153, 153, 153); }

div.sphinxsidebar a:hover { border-bottom: 1px solid rgb(153, 153, 153); }

div.sphinxsidebarwrapper { padding: 18px 10px; }

div.sphinxsidebarwrapper p.logo { padding: 0px; margin: -10px 0px 0px; text-align: center; }

div.sphinxsidebarwrapper h1.logo { margin-top: -10px; margin-bottom: 5px; text-align: left; }

div.sphinxsidebarwrapper h1.logo-name { margin-top: 0px; }

div.sphinxsidebarwrapper p.blurb { margin-top: 0px; font-style: normal; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { font-family: "Times New Roman", Times, serif; color: rgb(68, 68, 68); font-size: 24px; font-weight: normal; margin: 0px 0px 5px; padding: 0px; }

div.sphinxsidebar h4 { font-size: 20px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar p.logo a, div.sphinxsidebar h3 a, div.sphinxsidebar p.logo a:hover, div.sphinxsidebar h3 a:hover { border: none; }

div.sphinxsidebar p { color: rgb(85, 85, 85); margin: 10px 0px; }

div.sphinxsidebar ul { margin: 10px 0px; padding: 0px; color: rgb(0, 0, 0); }

div.sphinxsidebar ul li.toctree-l1 > a { font-size: 120%; }

div.sphinxsidebar ul li.toctree-l2 > a { font-size: 110%; }

div.sphinxsidebar input { border: 1px solid rgb(204, 204, 204); font-family: "Times New Roman", Times, serif; font-size: 1em; }

div.sphinxsidebar hr { border: none; height: 1px; color: rgb(170, 170, 170); background: rgb(170, 170, 170); text-align: left; margin-left: 0px; width: 50%; }

div.sphinxsidebar .badge { border-bottom: none; }

div.sphinxsidebar .badge:hover { border-bottom: none; }

div.sphinxsidebar h3.donation { margin-top: 10px; }

a { color: rgb(0, 75, 107); text-decoration: underline; }

a:hover { color: rgb(109, 65, 0); text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h6 { font-family: "Times New Roman", Times, serif; font-weight: normal; margin: 30px 0px 10px; padding: 0px; }

div.body h1 { margin-top: 0px; padding-top: 0px; font-size: 240%; }

div.body h2 { font-size: 180%; }

div.body h3 { font-size: 150%; }

div.body h4 { font-size: 130%; }

div.body h5 { font-size: 100%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(221, 221, 221); padding: 0px 4px; text-decoration: none; }

a.headerlink:hover { color: rgb(68, 68, 68); background: rgb(234, 234, 234); }

div.body p, div.body dd, div.body li { line-height: 1.4em; }

div.admonition { margin: 20px 0px; padding: 10px 30px; background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.admonition tt.xref, div.admonition code.xref, div.admonition a tt { background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(250, 250, 250); }

div.admonition p.admonition-title { font-family: "Times New Roman", Times, serif; font-weight: normal; font-size: 24px; margin: 0px 0px 10px; padding: 0px; line-height: 1; }

div.admonition p.last { margin-bottom: 0px; }

div.highlight { background-color: rgb(255, 255, 255); }

dt:target, .highlight { background: rgb(250, 243, 232); }

div.warning { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.danger { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); box-shadow: rgb(213, 44, 44) 2px 2px 4px; }

div.error { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); box-shadow: rgb(213, 44, 44) 2px 2px 4px; }

div.caution { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.attention { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.important { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.tip { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.hint { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.seealso { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.topic { background-color: rgb(238, 238, 238); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre, tt, code { font-family: Consolas, Menlo, "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace; font-size: 0.9em; }

.hll { background-color: rgb(255, 255, 204); margin: 0px -12px; padding: 0px 12px; display: block; }

img.screenshot { }

tt.descname, tt.descclassname, code.descname, code.descclassname { font-size: 0.95em; }

tt.descname, code.descname { padding-right: 0.08em; }

img.screenshot { box-shadow: rgb(238, 238, 238) 2px 2px 4px; }

table.docutils { border: 1px solid rgb(136, 136, 136); box-shadow: rgb(238, 238, 238) 2px 2px 4px; }

table.docutils td, table.docutils th { border: 1px solid rgb(136, 136, 136); padding: 0.25em 0.7em; }

table.field-list, table.footnote { border: none; box-shadow: none; }

table.footnote { margin: 15px 0px; width: 100%; border: 1px solid rgb(238, 238, 238); background: rgb(253, 253, 253); font-size: 0.9em; }

table.footnote + table.footnote { margin-top: -15px; border-top: none; }

table.field-list th { padding: 0px 0.8em 0px 0px; }

table.field-list td { padding: 0px; }

table.field-list p { margin-bottom: 0.8em; }

.field-name { hyphens: manual; }

table.footnote td.label { width: 0.1px; padding: 0.3em 0px 0.3em 0.5em; }

table.footnote td { padding: 0.3em 0.5em; }

dl { margin: 0px; padding: 0px; }

dl dd { margin-left: 30px; }

blockquote { margin: 0px 0px 0px 30px; padding: 0px; }

ul, ol { margin: 10px 0px 10px 30px; padding: 0px; }

pre { background: rgb(238, 238, 238); padding: 7px 30px; margin: 15px 0px; line-height: 1.3em; }

div.viewcode-block:target { background: rgb(255, 255, 221); }

dl pre, blockquote pre, li pre { margin-left: 0px; padding-left: 30px; }

tt, code { background-color: white; color: rgb(34, 34, 34); }

tt.xref, code.xref, a tt { background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(255, 255, 255); }

a.reference { text-decoration: none; border-bottom: 1px dotted rgb(0, 75, 107); }

a.image-reference, a.image-reference:hover { border-bottom: none; }

a.reference:hover { border-bottom: 1px solid rgb(109, 65, 0); }

a.footnote-reference { text-decoration: none; font-size: 0.7em; vertical-align: top; border-bottom: 1px dotted rgb(0, 75, 107); }

a.footnote-reference:hover { border-bottom: 1px solid rgb(109, 65, 0); }

a:hover tt, a:hover code { background: rgb(238, 238, 238); }

@media screen and (max-width: 870px) {
  div.sphinxsidebar { display: none; }
  div.document { width: 100%; }
  div.documentwrapper { margin: 0px; }
  div.bodywrapper { margin: 0px; }
  ul { margin-left: 0px; }
  li > ul { margin-left: 30px; }
  .document { width: auto; }
  .footer { width: auto; }
  .bodywrapper { margin: 0px; }
  .footer { width: auto; }
  .github { display: none; }
}

@media screen and (max-width: 875px) {
  body { margin: 0px; padding: 20px 30px; }
  div.documentwrapper { float: none; background: rgb(255, 255, 255); }
  div.sphinxsidebar { display: block; float: none; width: 102.5%; margin: 50px -30px -20px; padding: 10px 20px; background: rgb(51, 51, 51); color: rgb(255, 255, 255); }
  div.sphinxsidebar h3, div.sphinxsidebar h4, div.sphinxsidebar p, div.sphinxsidebar h3 a { color: rgb(255, 255, 255); }
  div.sphinxsidebar a { color: rgb(170, 170, 170); }
  div.sphinxsidebar p.logo { display: none; }
  div.document { width: 100%; margin: 0px; }
  div.footer { display: none; }
  div.bodywrapper { margin: 0px; }
  div.body { min-height: 0px; padding: 0px; }
  .rtd_doc_footer { display: none; }
  .document { width: auto; }
  .footer { width: auto; }
  .footer { width: auto; }
  .github { display: none; }
}

.revsys-inline { display: none !important; }

div#changelog > div.section > ul > li > p:only-child { margin-bottom: 0px; }

table.docutils.citation, table.docutils.citation td, table.docutils.citation th { border: none; box-shadow: none; }

.related { line-height: 30px; width: 100%; font-size: 0.9rem; }

.related.top { border-bottom: 1px solid rgb(238, 238, 238); margin-bottom: 20px; }

.related.bottom { border-top: 1px solid rgb(238, 238, 238); }

.related ul { padding: 0px; margin: 0px; list-style: none; }

.related li { display: inline; }

nav#rellinks { float: right; }

nav#rellinks li + li::before { content: "|"; }

nav#breadcrumbs li + li::before { content: "»"; }

@media print {
  div.related { display: none; }
}
------MultipartBoundary--ohFQLLAZXXUe4iBpdt53HR39136wTLjrT52CaZ1QGy----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.section::after { display: block; content: ""; clear: left; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; }

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-size: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type="text"] { float: left; width: 80%; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type="submit"] { float: left; width: 20%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png"); background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 30px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type: none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242, 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { hyphens: auto; }

a.headerlink { visibility: hidden; }

a.brackets::before, span.brackets > a::before { content: "["; }

a.brackets::after, span.brackets > a::after { content: "]"; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.headerlink, div.code-block-caption:hover > a.headerlink { visibility: visible; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, figure.align-left, .figure.align-left, object.align-left { clear: left; float: left; margin-right: 1em; }

img.align-right, figure.align-right, .figure.align-right, object.align-right { clear: right; float: right; margin-left: 1em; }

img.align-center, figure.align-center, .figure.align-center, object.align-center { display: block; margin-left: auto; margin-right: auto; }

img.align-default, figure.align-default, .figure.align-default { display: block; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar, aside.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 187); padding: 7px; background-color: rgb(255, 255, 238); width: 40%; float: right; clear: right; overflow-x: auto; }

p.sidebar-title { font-weight: bold; }

div.admonition, div.topic, blockquote { clear: left; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px; margin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

div.sidebar > :last-child, aside.sidebar > :last-child, div.topic > :last-child, div.admonition > :last-child { margin-bottom: 0px; }

div.sidebar::after, aside.sidebar::after, div.topic::after, div.admonition::after, blockquote::after { display: block; content: ""; clear: both; }

table.docutils { margin-top: 10px; margin-bottom: 10px; border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-width: 0px 0px 1px; border-top-style: initial; border-top-color: initial; border-left-style: initial; border-left-color: initial; border-right-style: initial; border-right-color: initial; border-bottom-style: solid; border-bottom-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > :first-child, td > :first-child { margin-top: 0px; }

th > :last-child, td > :last-child { margin-bottom: 0px; }

div.figure, figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption, figcaption { padding: 0.3em; }

div.figure p.caption span.caption-number, figcaption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text, figcaption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist { margin: 1em 0px; }

table.hlist td { vertical-align: top; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

:not(li) > ol > li:first-child > :first-child, :not(li) > ul > li:first-child > :first-child { margin-top: 0px; }

:not(li) > ol > li:last-child > :last-child, :not(li) > ul > li:last-child > :last-child { margin-bottom: 0px; }

ol.simple ol p, ol.simple ul p, ul.simple ol p, ul.simple ul p { margin-top: 0px; }

ol.simple > li:not(:first-child) > p, ul.simple > li:not(:first-child) > p { margin-top: 0px; }

ol.simple p, ul.simple p { margin-bottom: 0px; }

dl.footnote > dt, dl.citation > dt { float: left; margin-right: 0.5em; }

dl.footnote > dd, dl.citation > dd { margin-bottom: 0em; }

dl.footnote > dd::after, dl.citation > dd::after { content: ""; clear: both; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-left: 0.5em; padding-right: 5px; }

dl.field-list > dt::after { content: ":"; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > :first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dl > dd:last-child, dl > dd:last-child > :last-child { margin-bottom: 0px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; border: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left: 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0.5em; content: ":"; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

pre, div[class*="highlight-"] { clear: both; }

span.pre { hyphens: none; }

div[class*="highlight-"] { margin: 1em 0px; }

td.linenos pre { border: 0px; background-color: transparent; color: rgb(170, 170, 170); }

table.highlighttable { display: block; }

table.highlighttable tbody { display: block; }

table.highlighttable tr { display: flex; }

table.highlighttable td { margin: 0px; padding: 0px; }

table.highlighttable td.linenos { padding-right: 0.5em; }

table.highlighttable td.code { flex: 1 1 0%; overflow: hidden; }

.highlight .hll { display: block; }

div.highlight pre, table.highlighttable pre { margin: 0px; }

div.code-block-caption + div { margin-top: 0px; }

div.code-block-caption { margin-top: 1em; padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

table.highlighttable td.linenos, span.linenos, div.doctest > div.highlight span.gp { user-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-style: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { margin: 1em 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: transparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: absolute; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin: 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--ohFQLLAZXXUe4iBpdt53HR39136wTLjrT52CaZ1QGy------
