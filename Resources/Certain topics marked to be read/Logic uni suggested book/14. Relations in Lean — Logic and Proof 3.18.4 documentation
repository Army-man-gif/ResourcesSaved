From: <Saved by Blink>
Snapshot-Content-Location: https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html
Subject: =?utf-8?Q?14.=20Relations=20in=20Lean=20=E2=80=94=20Logic=20and=20Proof?=
 =?utf-8?Q?=203.18.4=20documentation?=
Date: Thu, 24 Oct 2024 11:10:48 +0100
MIME-Version: 1.0
Content-Type: multipart/related;
	type="text/html";
	boundary="----MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----"


------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/html
Content-ID: <frame-06E3CB703B4AF295C9A374F7DD37E8FD@mhtml.blink>
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html

<!DOCTYPE html><html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><link rel="stylesheet" type="text/css" href="cid:css-3e416f96-aa3f-4a2c-bc15-a43b5bd44e73@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-b175d5c8-9a87-4333-8fe4-15b4590dc3f9@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-eb1f0629-94fe-49d5-960a-bd12b54f7fba@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-adf86bdb-3cbe-4bd2-b7c6-ea0772282141@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-0c55494e-6a7d-4103-8dc9-726ff4de5532@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-c580c1d7-e856-4596-abe7-18d3ce214758@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-ca197a30-dd73-4ac3-95d2-7ceda64984f1@mhtml.blink" /><link rel="stylesheet" type="text/css" href="cid:css-619a17b1-9234-4f67-bd54-fbffe4398e25@mhtml.blink" />
    
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>14. Relations in Lean — Logic and Proof 3.18.4 documentation</title>
    <link rel="stylesheet" href="https://leanprover-community.github.io/logic_and_proof/_static/pygments.css" type="text/css">
    <link rel="stylesheet" href="https://leanprover-community.github.io/logic_and_proof/_static/alabaster.css" type="text/css">
    
    
    
    
    
    <link rel="shortcut icon" href="https://leanprover-community.github.io/logic_and_proof/_static/favicon.ico">
    <link rel="index" title="Index" href="https://leanprover-community.github.io/logic_and_proof/genindex.html">
    <link rel="search" title="Search" href="https://leanprover-community.github.io/logic_and_proof/search.html">
    <link rel="next" title="15. Functions" href="https://leanprover-community.github.io/logic_and_proof/functions.html">
    <link rel="prev" title="13. Relations" href="https://leanprover-community.github.io/logic_and_proof/relations.html">
<!-- <link href="https://fonts.googleapis.com/css?family=Sorts+Mill+Goudy" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css?family=Average" rel="stylesheet"> -->
<!-- <link href="https://fonts.googleapis.com/css?family=EB+Garamond" rel="stylesheet"> -->

  </head><body><div style="visibility: hidden; overflow: hidden; position: absolute; top: 0px; height: 1px; width: auto; padding: 0px; border: 0px; margin: 0px; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal;"><div id="MathJax_Hidden"></div></div><div id="MathJax_Message" style="display: none;"></div>
  

    <div class="document">
      <div class="documentwrapper">
        <div class="bodywrapper">
          

          <div class="body" role="main">
            
  <div class="section" id="relations-in-lean">
<h1><span class="section-number">14. </span>Relations in Lean<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#relations-in-lean" title="Permalink to this headline">¶</a></h1>
<p>In the last chapter, we noted that set theorists think of a binary relation
<span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-1-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>R</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-1" style="width: 0.951em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.759em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.357em, 1000.75em, 2.345em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-2"><span class="mi" id="MathJax-Span-3" style="font-family: MathJax_Math-italic;">R</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.085em; border-left: 0px solid; width: 0px; height: 0.991em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math></span></span></span> on a set <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-2-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>A</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-4" style="width: 0.951em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.759em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.324em, 1000.74em, 2.324em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-5"><span class="mi" id="MathJax-Span-6" style="font-family: MathJax_Math-italic;">A</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 1.005em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math></span></span></span> as a set of ordered pairs,
so that <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-3-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>R</mi><mo stretchy=&quot;false&quot;>(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy=&quot;false&quot;>)</mo></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-7" style="width: 3.655em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.941em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1002.85em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-8"><span class="mi" id="MathJax-Span-9" style="font-family: MathJax_Math-italic;">R</span><span class="mo" id="MathJax-Span-10" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-11" style="font-family: MathJax_Math-italic;">a</span><span class="mo" id="MathJax-Span-12" style="font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-13" style="font-family: MathJax_Math-italic; padding-left: 0.167em;">b</span><span class="mo" id="MathJax-Span-14" style="font-family: MathJax_Main;">)</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo stretchy="false">(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy="false">)</mo></math></span></span></span> really means <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-4-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mo stretchy=&quot;false&quot;>(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy=&quot;false&quot;>)</mo><mo>&amp;#x2208;</mo><mi>R</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-15" style="width: 5.173em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.175em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1004.17em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-16"><span class="mo" id="MathJax-Span-17" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-18" style="font-family: MathJax_Math-italic;">a</span><span class="mo" id="MathJax-Span-19" style="font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-20" style="font-family: MathJax_Math-italic; padding-left: 0.167em;">b</span><span class="mo" id="MathJax-Span-21" style="font-family: MathJax_Main;">)</span><span class="mo" id="MathJax-Span-22" style="font-family: MathJax_Main; padding-left: 0.278em;">∈</span><span class="mi" id="MathJax-Span-23" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">R</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mo stretchy="false">(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>R</mi></math></span></span></span>.
An alternative is to think of <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-5-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>R</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-24" style="width: 0.951em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.759em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.357em, 1000.75em, 2.345em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-25"><span class="mi" id="MathJax-Span-26" style="font-family: MathJax_Math-italic;">R</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.085em; border-left: 0px solid; width: 0px; height: 0.991em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi></math></span></span></span> as a function which,
when applied to <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-6-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>a</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-27" style="width: 0.667em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.522em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.599em, 1000.5em, 2.334em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-28"><span class="mi" id="MathJax-Span-29" style="font-family: MathJax_Math-italic;">a</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.071em; border-left: 0px solid; width: 0px; height: 0.677em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>a</mi></math></span></span></span> and <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-7-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>b</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-30" style="width: 0.524em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.427em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.346em, 1000.42em, 2.335em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-31"><span class="mi" id="MathJax-Span-32" style="font-family: MathJax_Math-italic;">b</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.072em; border-left: 0px solid; width: 0px; height: 0.992em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>b</mi></math></span></span></span>,
returns the proposition that <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-8-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>R</mi><mo stretchy=&quot;false&quot;>(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy=&quot;false&quot;>)</mo></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-33" style="width: 3.655em; display: inline-block;"><span style="display: inline-block; position: relative; width: 2.941em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1002.85em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-34"><span class="mi" id="MathJax-Span-35" style="font-family: MathJax_Math-italic;">R</span><span class="mo" id="MathJax-Span-36" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-37" style="font-family: MathJax_Math-italic;">a</span><span class="mo" id="MathJax-Span-38" style="font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-39" style="font-family: MathJax_Math-italic; padding-left: 0.167em;">b</span><span class="mo" id="MathJax-Span-40" style="font-family: MathJax_Main;">)</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>R</mi><mo stretchy="false">(</mo><mi>a</mi><mo>,</mo><mi>b</mi><mo stretchy="false">)</mo></math></span></span></span> holds.
This is the viewpoint adopted by Lean:
a binary relation on a type <code class="docutils literal notranslate"><span class="pre">A</span></code> is a function <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">→</span> <span class="pre">A</span> <span class="pre">→</span> <span class="pre">Prop</span></code>.
Remember that the arrows associate to the right,
so <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">→</span> <span class="pre">A</span> <span class="pre">→</span> <span class="pre">Prop</span></code> really means <code class="docutils literal notranslate"><span class="pre">A</span> <span class="pre">→</span> <span class="pre">(A</span> <span class="pre">→</span> <span class="pre">Prop)</span></code>.
So, given <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">:</span> <span class="pre">A</span></code>,
<code class="docutils literal notranslate"><span class="pre">R</span> <span class="pre">a</span></code> is a predicate (the property of being related to <code class="docutils literal notranslate"><span class="pre">A</span></code>),
and given <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">b</span> <span class="pre">:</span> <span class="pre">A</span></code>, <code class="docutils literal notranslate"><span class="pre">R</span> <span class="pre">a</span> <span class="pre">b</span></code> is a proposition.</p>
<div class="section" id="order-relations">
<h2><span class="section-number">14.1. </span>Order Relations<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#order-relations" title="Permalink to this headline">¶</a></h2>
<p>With first-order logic,
we can say what it means for a relation to be reflexive,
symmetric, transitive, antisymmetric, and so on:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=namespace%20hidden%0A%0Avariable%20%7BA%20%3A%20Type%7D%0A%0Adef%20Reflexive%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%2C%20R%20x%20x%0A%0Adef%20Symmetric%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%2C%20R%20x%20y%20%E2%86%92%20R%20y%20x%0A%0Adef%20Transitive%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%20z%2C%20R%20x%20y%20%E2%86%92%20R%20y%20z%20%E2%86%92%20R%20x%20z%0A%0Adef%20AntiSymmetric%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%2C%20R%20x%20y%20%E2%86%92%20R%20y%20x%20%E2%86%92%20x%20%3D%20y%0A%0Adef%20Irreflexive%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%2C%20%C2%AC%20R%20x%20x%0A%0Adef%20Total%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%2C%20R%20x%20y%20%E2%88%A8%20R%20y%20x%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">namespace</span> <span class="n">hidden</span>

<span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>

<span class="kd">def</span> <span class="n">Reflexive</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="n">R</span> <span class="n">x</span> <span class="n">x</span>

<span class="kd">def</span> <span class="n">Symmetric</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="n">x</span> <span class="n">y</span><span class="o">,</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span>

<span class="kd">def</span> <span class="n">Transitive</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="n">x</span> <span class="n">y</span> <span class="n">z</span><span class="o">,</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">y</span> <span class="n">z</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">x</span> <span class="n">z</span>

<span class="kd">def</span> <span class="n">AntiSymmetric</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="n">x</span> <span class="n">y</span><span class="o">,</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span> <span class="bp">→</span> <span class="n">x</span> <span class="bp">=</span> <span class="n">y</span>

<span class="kd">def</span> <span class="n">Irreflexive</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="n">x</span><span class="o">,</span> <span class="bp">¬</span> <span class="n">R</span> <span class="n">x</span> <span class="n">x</span>

<span class="kd">def</span> <span class="n">Total</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="n">x</span> <span class="n">y</span><span class="o">,</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">∨</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span>

<span class="kd">end</span> <span class="n">hidden</span>
</pre></div>
</div>
</div><p>Notice that Lean will unfold the definitions when necessary,
for example, treating <code class="docutils literal notranslate"><span class="pre">Reflexive</span> <span class="pre">R</span></code> as <code class="docutils literal notranslate"><span class="pre">∀</span> <span class="pre">x,</span> <span class="pre">R</span> <span class="pre">x</span> <span class="pre">x</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=namespace%20hidden%0A%0Avariable%20%7BA%20%3A%20Type%7D%0A%0Adef%20Reflexive%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%2C%20R%20x%20x%0A%0Adef%20Symmetric%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%2C%20R%20x%20y%20%E2%86%92%20R%20y%20x%0A%0Adef%20Transitive%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%20z%2C%20R%20x%20y%20%E2%86%92%20R%20y%20z%20%E2%86%92%20R%20x%20z%0A%0Adef%20AntiSymmetric%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%2C%20R%20x%20y%20%E2%86%92%20R%20y%20x%20%E2%86%92%20x%20%3D%20y%0A%0A--%20BEGIN%0Avariable%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%0A%0Aexample%20(h%20%3A%20Reflexive%20R)%20(x%20%3A%20A)%20%3A%20R%20x%20x%20%3A%3D%20h%20x%0A%0Aexample%20(h%20%3A%20Symmetric%20R)%20(x%20y%20%3A%20A)%20(h1%20%3A%20R%20x%20y)%20%3A%20R%20y%20x%20%3A%3D%0Ah%20x%20y%20h1%0A%0Aexample%20(h%20%3A%20Transitive%20R)%20(x%20y%20z%20%3A%20A)%20(h1%20%3A%20R%20x%20y)%20(h2%20%3A%20R%20y%20z)%20%3A%0A%20%20R%20x%20z%20%3A%3D%0Ah%20x%20y%20z%20h1%20h2%0A%0Aexample%20(h%20%3A%20AntiSymmetric%20R)%20(x%20y%20%3A%20A)%20(h1%20%3A%20R%20x%20y)%0A%20%20%20%20(h2%20%3A%20R%20y%20x)%20%3A%0A%20%20x%20%3D%20y%20%3A%3D%0Ah%20x%20y%20h1%20h2%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">variable</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">h</span> <span class="n">x</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">Symmetric</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="n">y</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span><span class="o">)</span> <span class="o">:</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span> <span class="o">:=</span>
<span class="n">h</span> <span class="n">x</span> <span class="n">y</span> <span class="n">h1</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span><span class="o">)</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">R</span> <span class="n">y</span> <span class="n">z</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">R</span> <span class="n">x</span> <span class="n">z</span> <span class="o">:=</span>
<span class="n">h</span> <span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="n">h1</span> <span class="n">h2</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">AntiSymmetric</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="n">y</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span><span class="o">)</span>
    <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">x</span> <span class="bp">=</span> <span class="n">y</span> <span class="o">:=</span>
<span class="n">h</span> <span class="n">x</span> <span class="n">y</span> <span class="n">h1</span> <span class="n">h2</span>
</pre></div>
</div>
</div><p>In the command <code class="docutils literal notranslate"><span class="pre">variable</span> <span class="pre">{A</span> <span class="pre">:</span> <span class="pre">Type}</span></code>,
we put curly braces around <code class="docutils literal notranslate"><span class="pre">A</span></code> to indicate that it is an <em>implicit</em> argument,
which is to say, you do not have to write it explicitly;
Lean can infer it from the argument <code class="docutils literal notranslate"><span class="pre">R</span></code>.
That is why we can write <code class="docutils literal notranslate"><span class="pre">Reflexive</span> <span class="pre">R</span></code> rather than <code class="docutils literal notranslate"><span class="pre">Reflexive</span> <span class="pre">A</span> <span class="pre">R</span></code>:
Lean knows that <code class="docutils literal notranslate"><span class="pre">R</span></code> is a binary relation on <code class="docutils literal notranslate"><span class="pre">A</span></code>,
so it can infer that we mean reflexivity for binary relations on <code class="docutils literal notranslate"><span class="pre">A</span></code>.</p>
<p>Given <code class="docutils literal notranslate"><span class="pre">h</span> <span class="pre">:</span> <span class="pre">Transitive</span> <span class="pre">R</span></code>, <code class="docutils literal notranslate"><span class="pre">h1</span> <span class="pre">:</span> <span class="pre">R</span> <span class="pre">x</span> <span class="pre">y</span></code>, and <code class="docutils literal notranslate"><span class="pre">h2</span> <span class="pre">:</span> <span class="pre">R</span> <span class="pre">y</span> <span class="pre">z</span></code>,
it is annoying to have to write <code class="docutils literal notranslate"><span class="pre">h</span> <span class="pre">x</span> <span class="pre">y</span> <span class="pre">z</span> <span class="pre">h1</span> <span class="pre">h2</span></code> to prove <code class="docutils literal notranslate"><span class="pre">R</span> <span class="pre">x</span> <span class="pre">z</span></code>.
After all,
Lean should be able to infer that we are talking about transitivity at
<code class="docutils literal notranslate"><span class="pre">x</span></code>, <code class="docutils literal notranslate"><span class="pre">y</span></code>, and <code class="docutils literal notranslate"><span class="pre">z</span></code>,
from the fact that <code class="docutils literal notranslate"><span class="pre">h1</span></code> is <code class="docutils literal notranslate"><span class="pre">R</span> <span class="pre">x</span> <span class="pre">y</span></code> and <code class="docutils literal notranslate"><span class="pre">h2</span></code> is <code class="docutils literal notranslate"><span class="pre">R</span> <span class="pre">y</span> <span class="pre">z</span></code>.
Indeed, we can replace that information by underscores:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=namespace%20hidden%0A%0Avariable%20%7BA%20%3A%20Type%7D%0A%0Adef%20Transitive%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20x%20y%20z%2C%20R%20x%20y%20%E2%86%92%20R%20y%20z%20%E2%86%92%20R%20x%20z%0A%0A--%20BEGIN%0Avariable%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%0A%0Aexample%20(h%20%3A%20Transitive%20R)%20(x%20y%20z%20%3A%20A)%20(h1%20%3A%20R%20x%20y)%0A%20%20%20%20(h2%20%3A%20R%20y%20z)%20%3A%0A%20%20R%20x%20z%20%3A%3D%0Ah%20_%20_%20_%20h1%20h2%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">variable</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span><span class="o">)</span>
    <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">R</span> <span class="n">y</span> <span class="n">z</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">R</span> <span class="n">x</span> <span class="n">z</span> <span class="o">:=</span>
<span class="n">h</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="n">h1</span> <span class="n">h2</span>
</pre></div>
</div>
</div><p>But typing underscores is annoying, too.
The best solution is to declare the arguments <code class="docutils literal notranslate"><span class="pre">x</span> <span class="pre">y</span> <span class="pre">z</span></code>
to a transitivity hypothesis to be implicit as well.
We can do this by introducing curly braces around the
variables in the definition.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=namespace%20hidden%0A%0Avariable%20%7BA%20%3A%20Type%7D%0A%0A--%20BEGIN%0Adef%20Transitive'%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20%7Bx%7D%20%7By%7D%20%7Bz%7D%2C%20R%20x%20y%20%E2%86%92%20R%20y%20z%20%E2%86%92%20R%20x%20z%0A%0Adef%20Transitive%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%20%3A%20Prop%20%3A%3D%0A%E2%88%80%20%7Bx%20y%20z%7D%2C%20R%20x%20y%20%E2%86%92%20R%20y%20z%20%E2%86%92%20R%20x%20z%0A%0Avariable%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%0A%0Aexample%20(h%20%3A%20Transitive%20R)%20(x%20y%20z%20%3A%20A)%20(h1%20%3A%20R%20x%20y)%0A%20%20%20%20(h2%20%3A%20R%20y%20z)%20%3A%0A%20%20R%20x%20z%20%3A%3D%0Ah%20h1%20h2%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">def</span> <span class="n">Transitive'</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="o">{</span><span class="n">x</span><span class="o">}</span> <span class="o">{</span><span class="n">y</span><span class="o">}</span> <span class="o">{</span><span class="n">z</span><span class="o">},</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">y</span> <span class="n">z</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">x</span> <span class="n">z</span>

<span class="kd">def</span> <span class="n">Transitive</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="bp">∀</span> <span class="o">{</span><span class="n">x</span> <span class="n">y</span> <span class="n">z</span><span class="o">},</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">y</span> <span class="n">z</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">x</span> <span class="n">z</span>

<span class="kd">variable</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span><span class="o">)</span>
    <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">R</span> <span class="n">y</span> <span class="n">z</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">R</span> <span class="n">x</span> <span class="n">z</span> <span class="o">:=</span>
<span class="n">h</span> <span class="n">h1</span> <span class="n">h2</span>
</pre></div>
</div>
</div><p>In fact, the notions
<code class="docutils literal notranslate"><span class="pre">Reflexive</span></code>, <code class="docutils literal notranslate"><span class="pre">Symmetric</span></code>, <code class="docutils literal notranslate"><span class="pre">Transitive</span></code>,
and so on are defined in Mathlib in exactly this way,
so we are free to use them by doing <code class="docutils literal notranslate"><span class="pre">import</span> <span class="pre">Mathlib.Init.Logic</span></code>
at the top of the file.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Init.Logic%0A%0A%23check%20Reflexive%0A%23check%20Symmetric%0A%23check%20Transitive%0A%23check%20AntiSymmetric%0A%23check%20Irreflexive" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Init.Logic</span>

<span class="k">#check</span> <span class="n">Reflexive</span>
<span class="k">#check</span> <span class="n">Symmetric</span>
<span class="k">#check</span> <span class="n">Transitive</span>
<span class="k">#check</span> <span class="n">AntiSymmetric</span>
<span class="k">#check</span> <span class="n">Irreflexive</span>
</pre></div>
</div>
</div><p>We put our temporary definitions of in a namespace <code class="docutils literal notranslate"><span class="pre">hidden</span></code>;
that means that the full name of our version of <code class="docutils literal notranslate"><span class="pre">Reflexive</span></code> is
<code class="docutils literal notranslate"><span class="pre">hidden.Reflexive</span></code>,
which would not conflict with the one defined in the library
were we to import that module.</p>
<p>In <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations.html#order-relations"><span class="std std-numref">Section 13.1</span></a> we showed that a strict partial order -
that is, a binary relation that is transitive and irreflexive -
is also asymmetric. Here is a proof of that fact in Lean.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Init.Logic%0A%0Avariable%20(A%20%3A%20Type)%0Avariable%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%0A%0A--%20BEGIN%0Aexample%20(h1%20%3A%20Irreflexive%20R)%20(h2%20%3A%20Transitive%20R)%20%3A%0A%20%20%20%20%E2%88%80%20x%20y%2C%20R%20x%20y%20%E2%86%92%20%C2%AC%20R%20y%20x%20%3A%3D%20by%0A%20%20intro%20x%20y%0A%20%20intro%20(h3%20%3A%20R%20x%20y)%0A%20%20intro%20(h4%20%3A%20R%20y%20x)%0A%20%20have%20h5%20%3A%20R%20x%20x%20%3A%3D%20h2%20h3%20h4%0A%20%20have%20h6%20%3A%20%C2%AC%20R%20x%20x%20%3A%3D%20h1%20x%0A%20%20show%20False%0A%20%20exact%20h6%20h5%0Avariable%20A%20%3A%20Type%0Avariable%20R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">example</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">Irreflexive</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">R</span><span class="o">)</span> <span class="o">:</span>
    <span class="bp">∀</span> <span class="n">x</span> <span class="n">y</span><span class="o">,</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">→</span> <span class="bp">¬</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">intro</span> <span class="n">x</span> <span class="n">y</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">h3</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span><span class="o">)</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">h4</span> <span class="o">:</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span><span class="o">)</span>
  <span class="k">have</span> <span class="n">h5</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">h2</span> <span class="n">h3</span> <span class="n">h4</span>
  <span class="k">have</span> <span class="n">h6</span> <span class="o">:</span> <span class="bp">¬</span> <span class="n">R</span> <span class="n">x</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">h1</span> <span class="n">x</span>
  <span class="k">show</span> <span class="n">False</span>
  <span class="n">exact</span> <span class="n">h6</span> <span class="n">h5</span>
<span class="kd">variable</span> <span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kd">variable</span> <span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
</pre></div>
</div>
</div><p>In mathematics,
it is common to use infix notation and a symbol like <code class="docutils literal notranslate"><span class="pre">≼</span></code>
to denote a partial order,
which you can input by typing <code class="docutils literal notranslate"><span class="pre">\preceq</span></code>.
Lean supports this practice:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Init.Logic%0A%0A--%20BEGIN%0Asection%0Avariable%20(A%20%3A%20Type)%0Avariable%20(R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop)%0A%0A--%20type%20%5Cpreceq%20for%20the%20symbol%20%E2%89%BC%0Alocal%20infix%3A50%20%22%20%E2%89%BC%20%22%20%3D%3E%20R%0A%0Aexample%20(h1%20%3A%20Irreflexive%20R)%20(h2%20%3A%20Transitive%20R)%20%3A%0A%20%20%20%20%E2%88%80%20x%20y%2C%20x%20%E2%89%BC%20y%20%E2%86%92%20%C2%AC%20y%20%E2%89%BC%20x%20%3A%3D%20by%0A%20%20intro%20x%20y%0A%20%20intro%20(h3%20%3A%20x%20%E2%89%BC%20y)%0A%20%20intro%20(h4%20%3A%20y%20%E2%89%BC%20x)%0A%20%20have%20h5%20%3A%20x%20%E2%89%BC%20x%20%3A%3D%20h2%20h3%20h4%0A%20%20have%20h6%20%3A%20%C2%AC%20x%20%E2%89%BC%20x%20%3A%3D%20h1%20x%0A%20%20show%20False%0A%20%20exact%20h6%20h5%0A%0Aend%0A--%20END" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">section</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">)</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span><span class="o">)</span>

<span class="c1">-- type \preceq for the symbol ≼</span>
<span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ≼ "</span> <span class="bp">=&gt;</span> <span class="n">R</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">Irreflexive</span> <span class="n">R</span><span class="o">)</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">R</span><span class="o">)</span> <span class="o">:</span>
    <span class="bp">∀</span> <span class="n">x</span> <span class="n">y</span><span class="o">,</span> <span class="n">x</span> <span class="bp">≼</span> <span class="n">y</span> <span class="bp">→</span> <span class="bp">¬</span> <span class="n">y</span> <span class="bp">≼</span> <span class="n">x</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">intro</span> <span class="n">x</span> <span class="n">y</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">h3</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">≼</span> <span class="n">y</span><span class="o">)</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">h4</span> <span class="o">:</span> <span class="n">y</span> <span class="bp">≼</span> <span class="n">x</span><span class="o">)</span>
  <span class="k">have</span> <span class="n">h5</span> <span class="o">:</span> <span class="n">x</span> <span class="bp">≼</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">h2</span> <span class="n">h3</span> <span class="n">h4</span>
  <span class="k">have</span> <span class="n">h6</span> <span class="o">:</span> <span class="bp">¬</span> <span class="n">x</span> <span class="bp">≼</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">h1</span> <span class="n">x</span>
  <span class="k">show</span> <span class="n">False</span>
  <span class="n">exact</span> <span class="n">h6</span> <span class="n">h5</span>

<span class="kd">end</span>
</pre></div>
</div>
</div><p>The structure of a partial order consists of a type <code class="docutils literal notranslate"><span class="pre">A</span></code>
(traditionally a set <code class="docutils literal notranslate"><span class="pre">A</span></code>)
with a binary relation <code class="docutils literal notranslate"><span class="pre">le</span> <span class="pre">:</span> <span class="pre">A</span> <span class="pre">→</span> <span class="pre">A</span> <span class="pre">→</span> <span class="pre">Prop</span></code>
(short for “lesser or equal”)
on it that is reflexive,
transitive, and antisymmetric.
We can package this structure as a “class” in Lean.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.Basic%0A%0Anamespace%20hidden%0A%0A--%20BEGIN%0Aclass%20PartialOrder%20(A%20%3A%20Type%20u)%20where%0A%20%20le%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20refl%20%3A%20Reflexive%20le%0A%20%20trans%20%3A%20Transitive%20le%0A%20%20antisymm%20%3A%20%E2%88%80%20%7Ba%20b%20%3A%20A%7D%2C%20le%20a%20b%20%E2%86%92%20le%20b%20a%20%E2%86%92%20a%20%3D%20b%0A%0A--%20type%20%5Cpreceq%20for%20the%20symbol%20%E2%89%BC%0Alocal%20infix%3A50%20%22%20%E2%89%BC%20%22%20%3D%3E%20PartialOrder.le%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">class</span> <span class="n">PartialOrder</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
  <span class="n">le</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
  <span class="n">refl</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">le</span>
  <span class="n">trans</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">le</span>
  <span class="n">antisymm</span> <span class="o">:</span> <span class="bp">∀</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="o">:</span> <span class="n">A</span><span class="o">},</span> <span class="n">le</span> <span class="n">a</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">le</span> <span class="n">b</span> <span class="n">a</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">=</span> <span class="n">b</span>

<span class="c1">-- type \preceq for the symbol ≼</span>
<span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ≼ "</span> <span class="bp">=&gt;</span> <span class="n">PartialOrder.le</span>
</pre></div>
</div>
</div><p>Assuming we have a type <code class="docutils literal notranslate"><span class="pre">A</span></code> that is a partial order,
we can define the corresponding strict partial order <code class="docutils literal notranslate"><span class="pre">lt</span> <span class="pre">:</span> <span class="pre">A</span> <span class="pre">→</span> <span class="pre">A</span> <span class="pre">→</span> <span class="pre">Prop</span></code>
(short for “lesser than”)
and prove that it is,
indeed, a strict order.
We also introduce notation <code class="docutils literal notranslate"><span class="pre">≺</span></code> for <code class="docutils literal notranslate"><span class="pre">le</span></code>,
which you can write by typing <code class="docutils literal notranslate"><span class="pre">\prec</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Tactic.Basic%0Aimport%20Mathlib.Order.Basic%0A%0Anamespace%20hidden%0A%0Aclass%20PartialOrder%20(A%20%3A%20Type%20u)%20where%0A%20%20le%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20refl%20%3A%20Reflexive%20le%0A%20%20trans%20%3A%20Transitive%20le%0A%20%20antisymm%20%3A%20%E2%88%80%20%7Ba%20b%20%3A%20A%7D%2C%20le%20a%20b%20%E2%86%92%20le%20b%20a%20%E2%86%92%20a%20%3D%20b%0A%0A--%20type%20%5Cpreceq%20for%20the%20symbol%20%E2%89%BC%0Alocal%20infix%3A50%20%22%20%E2%89%BC%20%22%20%3D%3E%20PartialOrder.le%0A%0A--%20BEGIN%0Anamespace%20PartialOrder%0Avariable%20%7BA%20%3A%20Type%7D%20%5BPartialOrder%20A%5D%0A%0Adef%20lt%20(a%20b%20%3A%20A)%20%3A%20Prop%20%3A%3D%20a%20%E2%89%BC%20b%20%E2%88%A7%20a%20%E2%89%A0%20b%0A%0A--%20type%20%5Cprec%20for%20the%20symbol%20%E2%89%BA%0Alocal%20infix%3A50%20%22%20%E2%89%BA%20%22%20%3D%3E%20lt%0A%0Atheorem%20irrefl_lt%20(a%20%3A%20A)%20%3A%20%C2%AC%20(a%20%E2%89%BA%20a)%20%3A%3D%20by%0A%20%20intro%20(h%20%3A%20a%20%E2%89%BA%20a)%0A%20%20have%20%3A%20a%20%E2%89%A0%20a%20%3A%3D%20And.right%20h%0A%20%20have%20%3A%20a%20%3D%20a%20%3A%3D%20rfl%0A%20%20contradiction%0A%0Atheorem%20trans_lt%20%7Ba%20b%20c%20%3A%20A%7D%20(h%E2%82%81%20%3A%20a%20%E2%89%BA%20b)%20(h%E2%82%82%20%3A%20b%20%E2%89%BA%20c)%20%3A%20a%20%E2%89%BA%20c%20%3A%3D%0A%20%20have%20%3A%20a%20%E2%89%BC%20b%20%3A%3D%20And.left%20h%E2%82%81%0A%20%20have%20%3A%20a%20%E2%89%A0%20b%20%3A%3D%20And.right%20h%E2%82%81%0A%20%20have%20%3A%20b%20%E2%89%BC%20c%20%3A%3D%20And.left%20h%E2%82%82%0A%20%20have%20%3A%20b%20%E2%89%A0%20c%20%3A%3D%20And.right%20h%E2%82%82%0A%20%20have%20%3A%20a%20%E2%89%BC%20c%20%3A%3D%20trans%20%E2%80%B9a%20%E2%89%BC%20b%E2%80%BA%20%E2%80%B9b%20%E2%89%BC%20c%E2%80%BA%0A%20%20have%20%3A%20a%20%E2%89%A0%20c%20%3A%3D%0A%20%20%20%20fun%20hac%20%3A%20a%20%3D%20c%20%E2%86%A6%0A%20%20%20%20have%20%3A%20c%20%E2%89%BC%20b%20%3A%3D%20by%20rw%20%5B%E2%86%90%20hac%5D%3B%20assumption%0A%20%20%20%20have%20%3A%20b%20%3D%20c%20%3A%3D%20antisymm%20%E2%80%B9b%20%E2%89%BC%20c%E2%80%BA%20%E2%80%B9c%20%E2%89%BC%20b%E2%80%BA%0A%20%20%20%20show%20False%20from%20%E2%80%B9b%20%E2%89%A0%20c%E2%80%BA%20%E2%80%B9b%20%3D%20c%E2%80%BA%0A%20%20show%20a%20%E2%89%BA%20c%20from%20And.intro%20%E2%80%B9a%20%E2%89%BC%20c%E2%80%BA%20%E2%80%B9a%20%E2%89%A0%20c%E2%80%BA%0A%0Aend%20PartialOrder%0A--%20END%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">namespace</span> <span class="n">PartialOrder</span>
<span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span> <span class="o">[</span><span class="n">PartialOrder</span> <span class="n">A</span><span class="o">]</span>

<span class="kd">def</span> <span class="n">lt</span> <span class="o">(</span><span class="n">a</span> <span class="n">b</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span> <span class="n">a</span> <span class="bp">≼</span> <span class="n">b</span> <span class="bp">∧</span> <span class="n">a</span> <span class="bp">≠</span> <span class="n">b</span>

<span class="c1">-- type \prec for the symbol ≺</span>
<span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ≺ "</span> <span class="bp">=&gt;</span> <span class="n">lt</span>

<span class="kd">theorem</span> <span class="n">irrefl_lt</span> <span class="o">(</span><span class="n">a</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="bp">¬</span> <span class="o">(</span><span class="n">a</span> <span class="bp">≺</span> <span class="n">a</span><span class="o">)</span> <span class="o">:=</span> <span class="kd">by</span>
  <span class="n">intro</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≺</span> <span class="n">a</span><span class="o">)</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≠</span> <span class="n">a</span> <span class="o">:=</span> <span class="n">And.right</span> <span class="n">h</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">=</span> <span class="n">a</span> <span class="o">:=</span> <span class="n">rfl</span>
  <span class="n">contradiction</span>

<span class="kd">theorem</span> <span class="n">trans_lt</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span><span class="o">}</span> <span class="o">(</span><span class="n">h₁</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≺</span> <span class="n">b</span><span class="o">)</span> <span class="o">(</span><span class="n">h₂</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">≺</span> <span class="n">c</span><span class="o">)</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≺</span> <span class="n">c</span> <span class="o">:=</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≼</span> <span class="n">b</span> <span class="o">:=</span> <span class="n">And.left</span> <span class="n">h₁</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≠</span> <span class="n">b</span> <span class="o">:=</span> <span class="n">And.right</span> <span class="n">h₁</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">≼</span> <span class="n">c</span> <span class="o">:=</span> <span class="n">And.left</span> <span class="n">h₂</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">≠</span> <span class="n">c</span> <span class="o">:=</span> <span class="n">And.right</span> <span class="n">h₂</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≼</span> <span class="n">c</span> <span class="o">:=</span> <span class="n">trans</span> <span class="o">‹</span><span class="n">a</span> <span class="bp">≼</span> <span class="n">b</span><span class="o">›</span> <span class="o">‹</span><span class="n">b</span> <span class="bp">≼</span> <span class="n">c</span><span class="o">›</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≠</span> <span class="n">c</span> <span class="o">:=</span>
    <span class="k">fun</span> <span class="n">hac</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">=</span> <span class="n">c</span> <span class="bp">↦</span>
    <span class="k">have</span> <span class="o">:</span> <span class="n">c</span> <span class="bp">≼</span> <span class="n">b</span> <span class="o">:=</span> <span class="kd">by</span> <span class="n">rw</span> <span class="o">[</span><span class="bp">←</span> <span class="n">hac</span><span class="o">]</span><span class="bp">;</span> <span class="n">assumption</span>
    <span class="k">have</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">=</span> <span class="n">c</span> <span class="o">:=</span> <span class="n">antisymm</span> <span class="o">‹</span><span class="n">b</span> <span class="bp">≼</span> <span class="n">c</span><span class="o">›</span> <span class="o">‹</span><span class="n">c</span> <span class="bp">≼</span> <span class="n">b</span><span class="o">›</span>
    <span class="k">show</span> <span class="n">False</span> <span class="k">from</span> <span class="o">‹</span><span class="n">b</span> <span class="bp">≠</span> <span class="n">c</span><span class="o">›</span> <span class="o">‹</span><span class="n">b</span> <span class="bp">=</span> <span class="n">c</span><span class="o">›</span>
  <span class="k">show</span> <span class="n">a</span> <span class="bp">≺</span> <span class="n">c</span> <span class="k">from</span> <span class="n">And.intro</span> <span class="o">‹</span><span class="n">a</span> <span class="bp">≼</span> <span class="n">c</span><span class="o">›</span> <span class="o">‹</span><span class="n">a</span> <span class="bp">≠</span> <span class="n">c</span><span class="o">›</span>

<span class="kd">end</span> <span class="n">PartialOrder</span>
</pre></div>
</div>
</div><p>The variable declaration <code class="docutils literal notranslate"><span class="pre">[PartialOrder</span> <span class="pre">A]</span></code> can be read as
“assume <code class="docutils literal notranslate"><span class="pre">A</span></code> is a partial order”.
Then Lean will use this “instance” of the class <code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code>
to figure out what <code class="docutils literal notranslate"><span class="pre">le</span></code> and <code class="docutils literal notranslate"><span class="pre">lt</span></code> are referring to.</p>
<p>The proofs use anonymous <code class="docutils literal notranslate"><span class="pre">have</span></code>,
referring back to them with the French quotes, <code class="docutils literal notranslate"><span class="pre">`\f&lt;</span></code> and <code class="docutils literal notranslate"><span class="pre">\f&gt;</span></code>,
or <code class="docutils literal notranslate"><span class="pre">assumption</span></code> (in tactic mode).
The proof of transitivity switches from term mode to tactic mode,
to use <code class="docutils literal notranslate"><span class="pre">rewrite</span></code> to replace <code class="docutils literal notranslate"><span class="pre">c</span></code> for <code class="docutils literal notranslate"><span class="pre">a</span></code> in <code class="docutils literal notranslate"><span class="pre">a</span> <span class="pre">≤</span> <span class="pre">b</span></code>.
Recall that <code class="docutils literal notranslate"><span class="pre">contradiction</span></code> instructs Lean to find
a hypothesis and its negation in the context, and hence complete the proof.</p>
<p>We could even define the class <code class="docutils literal notranslate"><span class="pre">StrictPartialOrder</span></code> in a similar manner,
then use the above theorems to show that any (weak) <code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code> is also a
<code class="docutils literal notranslate"><span class="pre">StrictPartialOrder</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Tactic.Basic%0Aimport%20Mathlib.Order.Basic%0A%0Anamespace%20hidden%0A%0Aclass%20PartialOrder%20(A%20%3A%20Type%20u)%20where%0A%20%20le%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20refl%20%3A%20Reflexive%20le%0A%20%20trans%20%3A%20Transitive%20le%0A%20%20antisymm%20%3A%20%E2%88%80%20%7Ba%20b%20%3A%20A%7D%2C%20le%20a%20b%20%E2%86%92%20le%20b%20a%20%E2%86%92%20a%20%3D%20b%0A%0A--%20type%20%5Cpreceq%20for%20the%20symbol%20%E2%89%BC%0Alocal%20infix%3A50%20%22%20%E2%89%BC%20%22%20%3D%3E%20PartialOrder.le%0A%0Anamespace%20PartialOrder%0Avariable%20%7BA%20%3A%20Type%7D%20%5BPartialOrder%20A%5D%0A%0Adef%20lt%20(a%20b%20%3A%20A)%20%3A%20Prop%20%3A%3D%20a%20%E2%89%BC%20b%20%E2%88%A7%20a%20%E2%89%A0%20b%0A%0A--%20type%20%5Cprec%20for%20the%20symbol%20%E2%89%BA%0Alocal%20infix%3A50%20%22%20%E2%89%BA%20%22%20%3D%3E%20PartialOrder.lt%0A%0Atheorem%20irrefl_lt%20(a%20%3A%20A)%20%3A%20%C2%AC%20(a%20%E2%89%BA%20a)%20%3A%3D%20by%0A%20%20intro%20(h%20%3A%20a%20%E2%89%BA%20a)%0A%20%20have%20%3A%20a%20%E2%89%A0%20a%20%3A%3D%20And.right%20h%0A%20%20have%20%3A%20a%20%3D%20a%20%3A%3D%20rfl%0A%20%20contradiction%0A%0Atheorem%20trans_lt%20%7Ba%20b%20c%20%3A%20A%7D%20(h%E2%82%81%20%3A%20a%20%E2%89%BA%20b)%20(h%E2%82%82%20%3A%20b%20%E2%89%BA%20c)%20%3A%20a%20%E2%89%BA%20c%20%3A%3D%0A%20%20have%20%3A%20a%20%E2%89%BC%20b%20%3A%3D%20And.left%20h%E2%82%81%0A%20%20have%20%3A%20a%20%E2%89%A0%20b%20%3A%3D%20And.right%20h%E2%82%81%0A%20%20have%20%3A%20b%20%E2%89%BC%20c%20%3A%3D%20And.left%20h%E2%82%82%0A%20%20have%20%3A%20b%20%E2%89%A0%20c%20%3A%3D%20And.right%20h%E2%82%82%0A%20%20have%20%3A%20a%20%E2%89%BC%20c%20%3A%3D%20trans%20%E2%80%B9a%20%E2%89%BC%20b%E2%80%BA%20%E2%80%B9b%20%E2%89%BC%20c%E2%80%BA%0A%20%20have%20%3A%20a%20%E2%89%A0%20c%20%3A%3D%0A%20%20%20%20fun%20hac%20%3A%20a%20%3D%20c%20%E2%86%A6%0A%20%20%20%20have%20%3A%20c%20%E2%89%BC%20b%20%3A%3D%20by%20rw%20%5B%E2%86%90%20hac%5D%3B%20assumption%0A%20%20%20%20have%20%3A%20b%20%3D%20c%20%3A%3D%20antisymm%20%E2%80%B9b%20%E2%89%BC%20c%E2%80%BA%20%E2%80%B9c%20%E2%89%BC%20b%E2%80%BA%0A%20%20%20%20show%20False%20from%20%E2%80%B9b%20%E2%89%A0%20c%E2%80%BA%20%E2%80%B9b%20%3D%20c%E2%80%BA%0A%20%20show%20a%20%E2%89%BA%20c%20from%20And.intro%20%E2%80%B9a%20%E2%89%BC%20c%E2%80%BA%20%E2%80%B9a%20%E2%89%A0%20c%E2%80%BA%0A%0Aend%20PartialOrder%0A%0A--%20BEGIN%0Aclass%20StrictPartialOrder%20(A%20%3A%20Type%20u)%20where%0A%20%20lt%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20irrefl%20%3A%20Irreflexive%20lt%0A%20%20trans%20%3A%20Transitive%20lt%0A%0A--%20type%20%5Cprec%20for%20the%20symbol%20%E2%89%BA%0Alocal%20infix%3A50%20%22%20%E2%89%BA%20%22%20%3D%3E%20StrictPartialOrder.lt%0A%0Ainstance%20%7BA%20%3A%20Type%7D%20%5BPartialOrder%20A%5D%20%3A%20StrictPartialOrder%20A%20where%0A%20%20lt%20%20%20%20%20%20%20%20%20%20%3A%3D%20PartialOrder.lt%0A%20%20irrefl%20%20%20%20%20%20%3A%3D%20PartialOrder.irrefl_lt%0A%20%20trans%20_%20_%20_%20%3A%3D%20PartialOrder.trans_lt%0A%0Aexample%20(a%20%3A%20A)%20%5BPartialOrder%20A%5D%20%3A%20%C2%AC%20a%20%E2%89%BA%20a%20%3A%3D%0AStrictPartialOrder.irrefl%20a%0A--%20END%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kd">class</span> <span class="n">StrictPartialOrder</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
  <span class="n">lt</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
  <span class="n">irrefl</span> <span class="o">:</span> <span class="n">Irreflexive</span> <span class="n">lt</span>
  <span class="n">trans</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">lt</span>

<span class="c1">-- type \prec for the symbol ≺</span>
<span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ≺ "</span> <span class="bp">=&gt;</span> <span class="n">StrictPartialOrder.lt</span>

<span class="kd">instance</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span> <span class="o">[</span><span class="n">PartialOrder</span> <span class="n">A</span><span class="o">]</span> <span class="o">:</span> <span class="n">StrictPartialOrder</span> <span class="n">A</span> <span class="n">where</span>
  <span class="n">lt</span>          <span class="o">:=</span> <span class="n">PartialOrder.lt</span>
  <span class="n">irrefl</span>      <span class="o">:=</span> <span class="n">PartialOrder.irrefl_lt</span>
  <span class="n">trans</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">PartialOrder.trans_lt</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">a</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">[</span><span class="n">PartialOrder</span> <span class="n">A</span><span class="o">]</span> <span class="o">:</span> <span class="bp">¬</span> <span class="n">a</span> <span class="bp">≺</span> <span class="n">a</span> <span class="o">:=</span>
<span class="n">StrictPartialOrder.irrefl</span> <span class="n">a</span>
</pre></div>
</div>
</div><p>Once we have shown this instance, we would be able to use the inherited
<code class="docutils literal notranslate"><span class="pre">≺</span></code> (not the one we defined in the <code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code> namespace!)
and facts about <code class="docutils literal notranslate"><span class="pre">StrictPartialOrder</span></code> on any partial order.</p>
<p>In Section <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations.html#order-relations"><span class="std std-numref">Section 13.1</span></a>,
we also noted that you can define a (weak) partial order from a strict one.
We ask you to do this formally in the exercises below.</p>
<p>Mathlib defines <code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code> in roughly the same way as we have,
which is why we enclosed our definitions in the <code class="docutils literal notranslate"><span class="pre">hidden</span></code> namespace,
so that our definition is called <code class="docutils literal notranslate"><span class="pre">hidden.PartialOrder</span></code>
rather than just <code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code> outside the namespace.
There is no <code class="docutils literal notranslate"><span class="pre">StrictPartialOrder</span></code> definition,
but we can refer to the strict partial order, given a partial order.
The notation used by Mathlib is the more common <code class="docutils literal notranslate"><span class="pre">≤</span></code>
(input <code class="docutils literal notranslate"><span class="pre">\le</span></code>) and <code class="docutils literal notranslate"><span class="pre">&lt;</span></code>.</p>
<p>Here is one more example. Suppose <code class="docutils literal notranslate"><span class="pre">R</span></code> is a binary relation on a type <code class="docutils literal notranslate"><span class="pre">A</span></code>, and we define <code class="docutils literal notranslate"><span class="pre">S</span> <span class="pre">x</span> <span class="pre">y</span></code> to mean that both <code class="docutils literal notranslate"><span class="pre">R</span> <span class="pre">x</span> <span class="pre">y</span></code> and <code class="docutils literal notranslate"><span class="pre">R</span> <span class="pre">y</span> <span class="pre">x</span></code> holds. Below we show that the resulting relation is reflexive and symmetric.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=section%0Aaxiom%20A%20%3A%20Type%0Aaxiom%20R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%0Avariable%20(h1%20%3A%20Transitive%20R)%0Avariable%20(h2%20%3A%20Reflexive%20R)%0A%0Adef%20S%20(x%20y%20%3A%20A)%20%3A%3D%20R%20x%20y%20%E2%88%A7%20R%20y%20x%0A%0Aexample%20%3A%20Reflexive%20S%20%3A%3D%0Afun%20x%20%E2%86%A6%0A%20%20have%20%3A%20R%20x%20x%20%3A%3D%20h2%20x%0A%20%20show%20S%20x%20x%20from%20And.intro%20this%20this%0A%0Aexample%20%3A%20Symmetric%20S%20%3A%3D%0Afun%20x%20y%20%E2%86%A6%0Afun%20h%20%3A%20S%20x%20y%20%E2%86%A6%0Ahave%20h1%20%3A%20R%20x%20y%20%3A%3D%20h.left%0Ahave%20h2%20%3A%20R%20y%20x%20%3A%3D%20h.right%0Ashow%20S%20y%20x%20from%20%E2%9F%A8h2%2C%20h1%E2%9F%A9%0A%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">section</span>
<span class="kd">axiom</span> <span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kd">axiom</span> <span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>

<span class="kd">variable</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">R</span><span class="o">)</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">R</span><span class="o">)</span>

<span class="kd">def</span> <span class="n">S</span> <span class="o">(</span><span class="n">x</span> <span class="n">y</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">:=</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">∧</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">S</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="bp">↦</span>
  <span class="k">have</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">h2</span> <span class="n">x</span>
  <span class="k">show</span> <span class="n">S</span> <span class="n">x</span> <span class="n">x</span> <span class="k">from</span> <span class="n">And.intro</span> <span class="n">this</span> <span class="n">this</span>

<span class="kd">example</span> <span class="o">:</span> <span class="n">Symmetric</span> <span class="n">S</span> <span class="o">:=</span>
<span class="k">fun</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">↦</span>
<span class="k">fun</span> <span class="n">h</span> <span class="o">:</span> <span class="n">S</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">↦</span>
<span class="k">have</span> <span class="n">h1</span> <span class="o">:</span> <span class="n">R</span> <span class="n">x</span> <span class="n">y</span> <span class="o">:=</span> <span class="n">h.left</span>
<span class="k">have</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">R</span> <span class="n">y</span> <span class="n">x</span> <span class="o">:=</span> <span class="n">h.right</span>
<span class="k">show</span> <span class="n">S</span> <span class="n">y</span> <span class="n">x</span> <span class="k">from</span> <span class="o">⟨</span><span class="n">h2</span><span class="o">,</span> <span class="n">h1</span><span class="o">⟩</span>

<span class="kd">end</span>
</pre></div>
</div>
</div><p>In the exercises below, we ask you to show that <code class="docutils literal notranslate"><span class="pre">S</span></code> is transitive as well.</p>
<p>In the first example,
we use the anonymous <code class="docutils literal notranslate"><span class="pre">have</span></code>,
and then refer back to the <code class="docutils literal notranslate"><span class="pre">have</span></code> with the keyword <code class="docutils literal notranslate"><span class="pre">this</span></code>.
In the second example,
we abbreviate <code class="docutils literal notranslate"><span class="pre">And.left</span> <span class="pre">h</span></code> and <code class="docutils literal notranslate"><span class="pre">And.right</span> <span class="pre">h</span></code> as <code class="docutils literal notranslate"><span class="pre">h.left</span></code> and <code class="docutils literal notranslate"><span class="pre">h.right</span></code>,
respectively.
We also abbreviate <code class="docutils literal notranslate"><span class="pre">And.intro</span> <span class="pre">h2</span> <span class="pre">h1</span></code> with an anonymous constructor,
writing <code class="docutils literal notranslate"><span class="pre">⟨h2,</span> <span class="pre">h1⟩</span></code>.
Lean figures out that we are trying to prove a conjunction,
and figures out that <code class="docutils literal notranslate"><span class="pre">And.intro</span></code> is the relevant introduction principle.
You can type the corner brackets with <code class="docutils literal notranslate"><span class="pre">\&lt;</span></code> and <code class="docutils literal notranslate"><span class="pre">\&gt;</span></code>, respectively.</p>
</div>
<div class="section" id="orderings-on-numbers">
<h2><span class="section-number">14.2. </span>Orderings on Numbers<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#orderings-on-numbers" title="Permalink to this headline">¶</a></h2>
<p>Conveniently,
Lean has the normal orderings on the natural numbers, integers,
and so on defined already in Mathlib.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Aopen%20Nat%0Avariable%20(n%20m%20%3A%20%E2%84%95)%0A%0A%23check%200%20%E2%89%A4%20n%0A%23check%20n%20%3C%20n%20%2B%201%0A%0Aexample%20%3A%200%20%E2%89%A4%20n%20%3A%3D%20Nat.zero_le%20n%0Aexample%20%3A%20n%20%3C%20n%20%2B%201%20%3A%3D%20lt_succ_self%20n%0A%0Aexample%20(h%20%3A%20n%20%2B%201%20%E2%89%A4%20m)%20%3A%20n%20%3C%20m%20%2B%201%20%3A%3D%0Ahave%20h1%20%3A%20n%20%3C%20n%20%2B%201%20%3A%3D%20lt_succ_self%20n%0Ahave%20h2%20%3A%20n%20%3C%20m%20%3A%3D%20lt_of_lt_of_le%20h1%20h%0Ahave%20h3%20%3A%20m%20%3C%20m%20%2B%201%20%3A%3D%20lt_succ_self%20m%0Ashow%20n%20%3C%20m%20%2B%201%20from%20lt_trans%20h2%20h3" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Nat.Defs</span>

<span class="kn">open</span> <span class="n">Nat</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">n</span> <span class="n">m</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span>

<span class="k">#check</span> <span class="mi">0</span> <span class="bp">≤</span> <span class="n">n</span>
<span class="k">#check</span> <span class="n">n</span> <span class="bp">&lt;</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span>

<span class="kd">example</span> <span class="o">:</span> <span class="mi">0</span> <span class="bp">≤</span> <span class="n">n</span> <span class="o">:=</span> <span class="n">Nat.zero_le</span> <span class="n">n</span>
<span class="kd">example</span> <span class="o">:</span> <span class="n">n</span> <span class="bp">&lt;</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span> <span class="o">:=</span> <span class="n">lt_succ_self</span> <span class="n">n</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">h</span> <span class="o">:</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span> <span class="bp">≤</span> <span class="n">m</span><span class="o">)</span> <span class="o">:</span> <span class="n">n</span> <span class="bp">&lt;</span> <span class="n">m</span> <span class="bp">+</span> <span class="mi">1</span> <span class="o">:=</span>
<span class="k">have</span> <span class="n">h1</span> <span class="o">:</span> <span class="n">n</span> <span class="bp">&lt;</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span> <span class="o">:=</span> <span class="n">lt_succ_self</span> <span class="n">n</span>
<span class="k">have</span> <span class="n">h2</span> <span class="o">:</span> <span class="n">n</span> <span class="bp">&lt;</span> <span class="n">m</span> <span class="o">:=</span> <span class="n">lt_of_lt_of_le</span> <span class="n">h1</span> <span class="n">h</span>
<span class="k">have</span> <span class="n">h3</span> <span class="o">:</span> <span class="n">m</span> <span class="bp">&lt;</span> <span class="n">m</span> <span class="bp">+</span> <span class="mi">1</span> <span class="o">:=</span> <span class="n">lt_succ_self</span> <span class="n">m</span>
<span class="k">show</span> <span class="n">n</span> <span class="bp">&lt;</span> <span class="n">m</span> <span class="bp">+</span> <span class="mi">1</span> <span class="k">from</span> <span class="n">lt_trans</span> <span class="n">h2</span> <span class="n">h3</span>
</pre></div>
</div>
</div><p>There are many theorems in Lean that are useful for proving facts about inequality relations. We list some common ones here.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.Basic%0A%0Avariable%20(A%20%3A%20Type)%20%5BPartialOrder%20A%5D%0Avariable%20(a%20b%20c%20%3A%20A)%0A%0A%23check%20(le_trans%20%3A%20a%20%E2%89%A4%20b%20%E2%86%92%20b%20%E2%89%A4%20c%20%E2%86%92%20a%20%E2%89%A4%20c)%0A%23check%20(lt_trans%20%3A%20a%20%3C%20b%20%E2%86%92%20b%20%3C%20c%20%E2%86%92%20a%20%3C%20c)%0A%23check%20(lt_of_lt_of_le%20%3A%20a%20%3C%20b%20%E2%86%92%20b%20%E2%89%A4%20c%20%E2%86%92%20a%20%3C%20c)%0A%23check%20(lt_of_le_of_lt%20%3A%20a%20%E2%89%A4%20b%20%E2%86%92%20b%20%3C%20c%20%E2%86%92%20a%20%3C%20c)%0A%23check%20(le_of_lt%20%3A%20a%20%3C%20b%20%E2%86%92%20a%20%E2%89%A4%20b)" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Order.Basic</span>

<span class="kd">variable</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">)</span> <span class="o">[</span><span class="n">PartialOrder</span> <span class="n">A</span><span class="o">]</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span>

<span class="k">#check</span> <span class="o">(</span><span class="n">le_trans</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≤</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">b</span> <span class="bp">≤</span> <span class="n">c</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">≤</span> <span class="n">c</span><span class="o">)</span>
<span class="k">#check</span> <span class="o">(</span><span class="n">lt_trans</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">&lt;</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">b</span> <span class="bp">&lt;</span> <span class="n">c</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">&lt;</span> <span class="n">c</span><span class="o">)</span>
<span class="k">#check</span> <span class="o">(</span><span class="n">lt_of_lt_of_le</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">&lt;</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">b</span> <span class="bp">≤</span> <span class="n">c</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">&lt;</span> <span class="n">c</span><span class="o">)</span>
<span class="k">#check</span> <span class="o">(</span><span class="n">lt_of_le_of_lt</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≤</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">b</span> <span class="bp">&lt;</span> <span class="n">c</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">&lt;</span> <span class="n">c</span><span class="o">)</span>
<span class="k">#check</span> <span class="o">(</span><span class="n">le_of_lt</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">&lt;</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">≤</span> <span class="n">b</span><span class="o">)</span>
</pre></div>
</div>
</div><p>Notice that we assume an instance of <code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code> on <code class="docutils literal notranslate"><span class="pre">A</span></code>.
There are also properties that are specific to some domains,
like the natural numbers:</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Avariable%20(n%20%3A%20%E2%84%95)%0A%0A%23check%20(Nat.zero_le%20%3A%20%E2%88%80%20n%20%3A%20%E2%84%95%2C%200%20%E2%89%A4%20n)%0A%23check%20(Nat.lt_succ_self%20%3A%20%E2%88%80%20n%20%3A%20%E2%84%95%2C%20n%20%3C%20n%20%2B%201)%0A%23check%20(Nat.le_succ%20%3A%20%E2%88%80%20n%20%3A%20%E2%84%95%2C%20n%20%E2%89%A4%20n%20%2B%201)" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Nat.Defs</span>

<span class="kd">variable</span> <span class="o">(</span><span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span>

<span class="k">#check</span> <span class="o">(</span><span class="n">Nat.zero_le</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">,</span> <span class="mi">0</span> <span class="bp">≤</span> <span class="n">n</span><span class="o">)</span>
<span class="k">#check</span> <span class="o">(</span><span class="n">Nat.lt_succ_self</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">,</span> <span class="n">n</span> <span class="bp">&lt;</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span><span class="o">)</span>
<span class="k">#check</span> <span class="o">(</span><span class="n">Nat.le_succ</span> <span class="o">:</span> <span class="bp">∀</span> <span class="n">n</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">,</span> <span class="n">n</span> <span class="bp">≤</span> <span class="n">n</span> <span class="bp">+</span> <span class="mi">1</span><span class="o">)</span>
</pre></div>
</div>
</div></div>
<div class="section" id="equivalence-relations">
<h2><span class="section-number">14.3. </span>Equivalence Relations<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#equivalence-relations" title="Permalink to this headline">¶</a></h2>
<p>In <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations.html#equivalence-relations-and-equality"><span class="std std-numref">Section 13.3</span></a> we saw that an <em>equivalence relation</em> is a binary relation on some domain <span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-9-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi>A</mi></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-41" style="width: 0.951em; display: inline-block;"><span style="display: inline-block; position: relative; width: 0.759em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.324em, 1000.74em, 2.324em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-42"><span class="mi" id="MathJax-Span-43" style="font-family: MathJax_Math-italic;">A</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.059em; border-left: 0px solid; width: 0px; height: 1.005em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi>A</mi></math></span></span></span> that is reflexive, symmetric, and transitive. We will see such relations in Lean in a moment, but first let’s define another kind of relation called a <em>preorder</em>, which is a binary relation that is reflexive and transitive.
Again, we use a <code class="docutils literal notranslate"><span class="pre">class</span></code> to capture this data.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.Basic%0A%0Anamespace%20hidden%0A%0Avariable%20%7BA%20%3A%20Type%7D%0A%0Aclass%20Preorder%20(A%20%3A%20Type%20u)%20where%0A%20%20le%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20refl%20%3A%20Reflexive%20le%0A%20%20trans%20%3A%20Transitive%20le%0A%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Order.Basic</span>

<span class="kn">namespace</span> <span class="n">hidden</span>

<span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>

<span class="kd">class</span> <span class="n">Preorder</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
  <span class="n">le</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
  <span class="n">refl</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">le</span>
  <span class="n">trans</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">le</span>

<span class="kd">end</span> <span class="n">hidden</span>
</pre></div>
</div>
</div><p>Lean’s library provides its own formulation of preorders.
In order to use the same name, we have to put it in the <code class="docutils literal notranslate"><span class="pre">hidden</span></code> namespace.
Lean’s library defines other properties of relations, such as these:</p>
<p>Building on our definition of a preorder,
we can describe partial orders as antisymmetric preorders,
and equivalences as symmetric preorders.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=%20import%20Mathlib.Order.Basic%0A%0A%20namespace%20hidden%0A%0A%20variable%20%7BA%20%3A%20Type%7D%0A%0A%20class%20Preorder%20(A%20%3A%20Type%20u)%20where%0A%20%20%20le%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20%20refl%20%3A%20Reflexive%20le%0A%20%20%20trans%20%3A%20Transitive%20le%0A%0A%20class%20PartialOrder%20(A%20%3A%20Type%20u)%20extends%20Preorder%20A%20where%0A%20%20%20antisymm%20%3A%20AntiSymmetric%20le%0A%0Aclass%20Equivalence%20(A%20%3A%20Type%20u)%20extends%20Preorder%20A%20where%0A%20%20symm%20%3A%20Symmetric%20le%0A%0A%20end%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span> <span class="kn">import</span> <span class="n">Mathlib.Order.Basic</span>

 <span class="kn">namespace</span> <span class="n">hidden</span>

 <span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span><span class="o">}</span>

 <span class="kd">class</span> <span class="n">Preorder</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
   <span class="n">le</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
   <span class="n">refl</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">le</span>
   <span class="n">trans</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">le</span>

 <span class="kd">class</span> <span class="n">PartialOrder</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="kd">extends</span> <span class="n">Preorder</span> <span class="n">A</span> <span class="n">where</span>
   <span class="n">antisymm</span> <span class="o">:</span> <span class="n">AntiSymmetric</span> <span class="n">le</span>

<span class="kd">class</span> <span class="n">Equivalence</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="kd">extends</span> <span class="n">Preorder</span> <span class="n">A</span> <span class="n">where</span>
  <span class="n">symm</span> <span class="o">:</span> <span class="n">Symmetric</span> <span class="n">le</span>

 <span class="kd">end</span> <span class="n">hidden</span>
</pre></div>
</div>
</div><p>The <code class="docutils literal notranslate"><span class="pre">extends</span> <span class="pre">Preorder</span> <span class="pre">A</span></code> in this definition now makes
<code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code> a class that automatically
inherits all the definitions and theorems from <code class="docutils literal notranslate"><span class="pre">Preorder</span></code>.
In particular <code class="docutils literal notranslate"><span class="pre">le</span></code>, <code class="docutils literal notranslate"><span class="pre">refl</span></code>, and <code class="docutils literal notranslate"><span class="pre">trans</span></code> become part of the data of
<code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code>.
Using classes in this way we can write very general proofs
(for example proofs just about preorders)
and apply them in contexts that are more specific
(for example proofs about equivalence relations and partial orders).</p>
<p>Note: we might <em>not</em> want to design the library in this way specifically.
Since we might want to use <code class="docutils literal notranslate"><span class="pre">≤</span></code> as notation for a partial order,
but for an equivalence relation.
Indeed <code class="docutils literal notranslate"><span class="pre">Mathlib</span></code> does not define <code class="docutils literal notranslate"><span class="pre">Equivalence</span></code> as an extension of
<code class="docutils literal notranslate"><span class="pre">PartialOrder</span></code>.</p>
<p>In <a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations.html#equivalence-relations-and-equality"><span class="std std-numref">Section 13.3</span></a> we claimed that there is
another way to define an equivalence relation,
namely as a binary relation satisfying the following two properties:</p>
<ul class="simple">
<li><p><span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-10-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi mathvariant=&quot;normal&quot;>&amp;#x2200;</mi><mi>a</mi><mspace width=&quot;thickmathspace&quot; /><mo stretchy=&quot;false&quot;>(</mo><mi>a</mi><mo>&amp;#x2261;</mo><mi>a</mi><mo stretchy=&quot;false&quot;>)</mo></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-44" style="width: 5.648em; display: inline-block;"><span style="display: inline-block; position: relative; width: 4.554em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1004.46em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-45"><span class="mi" id="MathJax-Span-46" style="font-family: MathJax_Main;">∀</span><span class="mi" id="MathJax-Span-47" style="font-family: MathJax_Math-italic;">a</span><span class="mspace" id="MathJax-Span-48" style="height: 0em; vertical-align: 0em; width: 0.278em; display: inline-block; overflow: hidden;"></span><span class="mo" id="MathJax-Span-49" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-50" style="font-family: MathJax_Math-italic;">a</span><span class="mo" id="MathJax-Span-51" style="font-family: MathJax_Main; padding-left: 0.278em;">≡</span><span class="mi" id="MathJax-Span-52" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">a</span><span class="mo" id="MathJax-Span-53" style="font-family: MathJax_Main;">)</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="normal">∀</mi><mi>a</mi><mspace width="thickmathspace"></mspace><mo stretchy="false">(</mo><mi>a</mi><mo>≡</mo><mi>a</mi><mo stretchy="false">)</mo></math></span></span></span></p></li>
<li><p><span class="math notranslate nohighlight"><span class="MathJax_Preview" style="color: inherit;"></span><span class="MathJax" id="MathJax-Element-11-Frame" tabindex="0" data-mathml="<math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;><mi mathvariant=&quot;normal&quot;>&amp;#x2200;</mi><mrow class=&quot;MJX-TeXAtom-ORD&quot;><mi>a</mi><mo>,</mo><mi>b</mi><mo>,</mo><mi>c</mi></mrow><mspace width=&quot;thickmathspace&quot; /><mo stretchy=&quot;false&quot;>(</mo><mi>a</mi><mo>&amp;#x2261;</mo><mi>b</mi><mo>&amp;#x2227;</mo><mi>c</mi><mo>&amp;#x2261;</mo><mi>b</mi><mo stretchy=&quot;false&quot;>&amp;#x2192;</mo><mi>a</mi><mo>&amp;#x2261;</mo><mi>c</mi><mo stretchy=&quot;false&quot;>)</mo></math>" role="presentation" style="position: relative;"><nobr aria-hidden="true"><span class="math" id="MathJax-Span-54" style="width: 16.558em; display: inline-block;"><span style="display: inline-block; position: relative; width: 13.33em; height: 0px; font-size: 124%;"><span style="position: absolute; clip: rect(1.29em, 1013.24em, 2.574em, -1000em); top: -2.182em; left: 0em;"><span class="mrow" id="MathJax-Span-55"><span class="mi" id="MathJax-Span-56" style="font-family: MathJax_Main;">∀</span><span class="texatom" id="MathJax-Span-57"><span class="mrow" id="MathJax-Span-58"><span class="mi" id="MathJax-Span-59" style="font-family: MathJax_Math-italic;">a</span><span class="mo" id="MathJax-Span-60" style="font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-61" style="font-family: MathJax_Math-italic; padding-left: 0.167em;">b</span><span class="mo" id="MathJax-Span-62" style="font-family: MathJax_Main;">,</span><span class="mi" id="MathJax-Span-63" style="font-family: MathJax_Math-italic; padding-left: 0.167em;">c</span></span></span><span class="mspace" id="MathJax-Span-64" style="height: 0em; vertical-align: 0em; width: 0.278em; display: inline-block; overflow: hidden;"></span><span class="mo" id="MathJax-Span-65" style="font-family: MathJax_Main;">(</span><span class="mi" id="MathJax-Span-66" style="font-family: MathJax_Math-italic;">a</span><span class="mo" id="MathJax-Span-67" style="font-family: MathJax_Main; padding-left: 0.278em;">≡</span><span class="mi" id="MathJax-Span-68" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">b</span><span class="mo" id="MathJax-Span-69" style="font-family: MathJax_Main; padding-left: 0.222em;">∧</span><span class="mi" id="MathJax-Span-70" style="font-family: MathJax_Math-italic; padding-left: 0.222em;">c</span><span class="mo" id="MathJax-Span-71" style="font-family: MathJax_Main; padding-left: 0.278em;">≡</span><span class="mi" id="MathJax-Span-72" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">b</span><span class="mo" id="MathJax-Span-73" style="font-family: MathJax_Main; padding-left: 0.278em;">→</span><span class="mi" id="MathJax-Span-74" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">a</span><span class="mo" id="MathJax-Span-75" style="font-family: MathJax_Main; padding-left: 0.278em;">≡</span><span class="mi" id="MathJax-Span-76" style="font-family: MathJax_Math-italic; padding-left: 0.278em;">c</span><span class="mo" id="MathJax-Span-77" style="font-family: MathJax_Main;">)</span></span><span style="display: inline-block; width: 0px; height: 2.182em;"></span></span></span><span style="display: inline-block; overflow: hidden; vertical-align: -0.369em; border-left: 0px solid; width: 0px; height: 1.358em;"></span></span></nobr><span class="MJX_Assistive_MathML" role="presentation"><math xmlns="http://www.w3.org/1998/Math/MathML"><mi mathvariant="normal">∀</mi><mrow class="MJX-TeXAtom-ORD"><mi>a</mi><mo>,</mo><mi>b</mi><mo>,</mo><mi>c</mi></mrow><mspace width="thickmathspace"></mspace><mo stretchy="false">(</mo><mi>a</mi><mo>≡</mo><mi>b</mi><mo>∧</mo><mi>c</mi><mo>≡</mo><mi>b</mi><mo stretchy="false">→</mo><mi>a</mi><mo>≡</mo><mi>c</mi><mo stretchy="false">)</mo></math></span></span></span></p></li>
</ul>
<p>We derive the two definitions from each other in the following</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=%20import%20Mathlib.Order.Basic%0A%0A%20namespace%20hidden%0A%0A%20class%20Equivalence%20(A%20%3A%20Type%20u)%20where%0A%20%20%20R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20%20refl%20%3A%20Reflexive%20R%0A%20%20%20symm%20%3A%20Symmetric%20R%0A%20%20%20trans%20%3A%20Transitive%20R%0A%0A%20local%20infix%3A50%20%22%20~%20%22%20%3D%3E%20Equivalence.R%0A%0A%20class%20Equivalence'%20(A%20%3A%20Type%20u)%20where%0A%20%20%20R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20%20refl%20%3A%20Reflexive%20R%0A%20%20%20trans'%20%3A%20%E2%88%80%20%7Ba%20b%20c%7D%2C%20R%20a%20b%20%E2%86%92%20R%20c%20b%20%E2%86%92%20R%20a%20c%0A%0A%20--%20type%20%60%60%E2%89%88%60%60%20as%20%60%60%5C~~%60%60%0A%20local%20infix%3A50%20%22%20%E2%89%88%20%22%20%3D%3E%20Equivalence'.R%0A%0A%20section%0A%20variable%20%7BA%20%3A%20Type%20u%7D%0A%0A%20theorem%20Equivalence.trans'%20%5BEquivalence%20A%5D%20%7Ba%20b%20c%20%3A%20A%7D%20%3A%0A%20%20%20%20%20a%20~%20b%20%E2%86%92%20c%20~%20b%20%E2%86%92%20a%20~%20c%20%3A%3D%20by%0A%20%20%20intro%20(hab%20%3A%20a%20~%20b)%0A%20%20%20intro%20(hcb%20%3A%20c%20~%20b)%0A%20%20%20apply%20trans%20hab%0A%20%20%20show%20b%20~%20c%0A%20%20%20exact%20symm%20hcb%0A%0A%20example%20%5BEquivalence%20A%5D%20%3A%20Equivalence'%20A%20where%0A%20%20%20R%20%3A%3D%20Equivalence.R%0A%20%20%20refl%20%3A%3D%20Equivalence.refl%0A%20%20%20trans'%3A%3D%20Equivalence.trans'%0A%0A%20theorem%20Equivalence'.symm%20%5BEquivalence'%20A%5D%20%7Ba%20b%20%3A%20A%7D%20%3A%0A%20%20%20%20%20a%20%E2%89%88%20b%20%E2%86%92%20b%20%E2%89%88%20a%20%3A%3D%20by%0A%20%20%20intro%20(hab%20%3A%20a%20%E2%89%88%20b)%0A%20%20%20have%20hbb%20%3A%20b%20%E2%89%88%20b%20%3A%3D%20Equivalence'.refl%20b%0A%20%20%20show%20b%20%E2%89%88%20a%0A%20%20%20exact%20Equivalence'.trans'%20hbb%20hab%0A%0A%20theorem%20Equivalence'.trans%20%5BEquivalence'%20A%5D%20%7Ba%20b%20c%20%3A%20A%7D%20%3A%0A%20%20%20a%20%E2%89%88%20b%20%E2%86%92%20b%20%E2%89%88%20c%20%E2%86%92%20a%20%E2%89%88%20c%20%3A%3D%20by%0A%20%20%20intro%20(hab%20%3A%20a%20%E2%89%88%20b)%20(hbc%20%3A%20b%20%E2%89%88%20c)%0A%20%20%20have%20hcb%20%3A%20c%20%E2%89%88%20b%20%3A%3D%20Equivalence'.symm%20hbc%0A%20%20%20show%20a%20%E2%89%88%20c%0A%20%20%20exact%20Equivalence'.trans'%20hab%20hcb%0A%0Aexample%20%5BEquivalence'%20A%5D%20%3A%20Equivalence%20A%20where%0A%20%20R%20%3A%3D%20Equivalence'.R%0A%20%20refl%20%3A%3D%20Equivalence'.refl%0A%20%20symm%20_%20_%3A%3D%20Equivalence'.symm%0A%20%20trans%20_%20_%20_%20%3A%3D%20Equivalence'.trans%0A%0A%20end%0A%20end%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span> <span class="kn">import</span> <span class="n">Mathlib.Order.Basic</span>

 <span class="kn">namespace</span> <span class="n">hidden</span>

 <span class="kd">class</span> <span class="n">Equivalence</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
   <span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
   <span class="n">refl</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">R</span>
   <span class="n">symm</span> <span class="o">:</span> <span class="n">Symmetric</span> <span class="n">R</span>
   <span class="n">trans</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">R</span>

 <span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ~ "</span> <span class="bp">=&gt;</span> <span class="n">Equivalence.R</span>

 <span class="kd">class</span> <span class="n">Equivalence'</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
   <span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
   <span class="n">refl</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">R</span>
   <span class="n">trans'</span> <span class="o">:</span> <span class="bp">∀</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span><span class="o">},</span> <span class="n">R</span> <span class="n">a</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">c</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">R</span> <span class="n">a</span> <span class="n">c</span>

 <span class="c1">-- type ``≈`` as ``\~~``</span>
 <span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ≈ "</span> <span class="bp">=&gt;</span> <span class="n">Equivalence'.R</span>

 <span class="kn">section</span>
 <span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">}</span>

 <span class="kd">theorem</span> <span class="n">Equivalence.trans'</span> <span class="o">[</span><span class="n">Equivalence</span> <span class="n">A</span><span class="o">]</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span><span class="o">}</span> <span class="o">:</span>
     <span class="n">a</span> <span class="bp">~</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">c</span> <span class="bp">~</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">~</span> <span class="n">c</span> <span class="o">:=</span> <span class="kd">by</span>
   <span class="n">intro</span> <span class="o">(</span><span class="n">hab</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">~</span> <span class="n">b</span><span class="o">)</span>
   <span class="n">intro</span> <span class="o">(</span><span class="n">hcb</span> <span class="o">:</span> <span class="n">c</span> <span class="bp">~</span> <span class="n">b</span><span class="o">)</span>
   <span class="n">apply</span> <span class="n">trans</span> <span class="n">hab</span>
   <span class="k">show</span> <span class="n">b</span> <span class="bp">~</span> <span class="n">c</span>
   <span class="n">exact</span> <span class="n">symm</span> <span class="n">hcb</span>

 <span class="kd">example</span> <span class="o">[</span><span class="n">Equivalence</span> <span class="n">A</span><span class="o">]</span> <span class="o">:</span> <span class="n">Equivalence'</span> <span class="n">A</span> <span class="n">where</span>
   <span class="n">R</span> <span class="o">:=</span> <span class="n">Equivalence.R</span>
   <span class="n">refl</span> <span class="o">:=</span> <span class="n">Equivalence.refl</span>
   <span class="n">trans'</span><span class="o">:=</span> <span class="n">Equivalence.trans'</span>

 <span class="kd">theorem</span> <span class="n">Equivalence'.symm</span> <span class="o">[</span><span class="n">Equivalence'</span> <span class="n">A</span><span class="o">]</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="o">:</span> <span class="n">A</span><span class="o">}</span> <span class="o">:</span>
     <span class="n">a</span> <span class="bp">≈</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">b</span> <span class="bp">≈</span> <span class="n">a</span> <span class="o">:=</span> <span class="kd">by</span>
   <span class="n">intro</span> <span class="o">(</span><span class="n">hab</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≈</span> <span class="n">b</span><span class="o">)</span>
   <span class="k">have</span> <span class="n">hbb</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">≈</span> <span class="n">b</span> <span class="o">:=</span> <span class="n">Equivalence'.refl</span> <span class="n">b</span>
   <span class="k">show</span> <span class="n">b</span> <span class="bp">≈</span> <span class="n">a</span>
   <span class="n">exact</span> <span class="n">Equivalence'.trans'</span> <span class="n">hbb</span> <span class="n">hab</span>

 <span class="kd">theorem</span> <span class="n">Equivalence'.trans</span> <span class="o">[</span><span class="n">Equivalence'</span> <span class="n">A</span><span class="o">]</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span><span class="o">}</span> <span class="o">:</span>
   <span class="n">a</span> <span class="bp">≈</span> <span class="n">b</span> <span class="bp">→</span> <span class="n">b</span> <span class="bp">≈</span> <span class="n">c</span> <span class="bp">→</span> <span class="n">a</span> <span class="bp">≈</span> <span class="n">c</span> <span class="o">:=</span> <span class="kd">by</span>
   <span class="n">intro</span> <span class="o">(</span><span class="n">hab</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≈</span> <span class="n">b</span><span class="o">)</span> <span class="o">(</span><span class="n">hbc</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">≈</span> <span class="n">c</span><span class="o">)</span>
   <span class="k">have</span> <span class="n">hcb</span> <span class="o">:</span> <span class="n">c</span> <span class="bp">≈</span> <span class="n">b</span> <span class="o">:=</span> <span class="n">Equivalence'.symm</span> <span class="n">hbc</span>
   <span class="k">show</span> <span class="n">a</span> <span class="bp">≈</span> <span class="n">c</span>
   <span class="n">exact</span> <span class="n">Equivalence'.trans'</span> <span class="n">hab</span> <span class="n">hcb</span>

<span class="kd">example</span> <span class="o">[</span><span class="n">Equivalence'</span> <span class="n">A</span><span class="o">]</span> <span class="o">:</span> <span class="n">Equivalence</span> <span class="n">A</span> <span class="n">where</span>
  <span class="n">R</span> <span class="o">:=</span> <span class="n">Equivalence'.R</span>
  <span class="n">refl</span> <span class="o">:=</span> <span class="n">Equivalence'.refl</span>
  <span class="n">symm</span> <span class="n">_</span> <span class="n">_</span><span class="o">:=</span> <span class="n">Equivalence'.symm</span>
  <span class="n">trans</span> <span class="n">_</span> <span class="n">_</span> <span class="n">_</span> <span class="o">:=</span> <span class="n">Equivalence'.trans</span>

 <span class="kd">end</span>
 <span class="kd">end</span> <span class="n">hidden</span>
</pre></div>
</div>
</div><p>For one of the definitions we use the infix notation <code class="docutils literal notranslate"><span class="pre">~</span></code> and we use
<code class="docutils literal notranslate"><span class="pre">≈</span></code> for the other. (You can type <code class="docutils literal notranslate"><span class="pre">≈</span></code> as <code class="docutils literal notranslate"><span class="pre">\~~</span></code>.)
We use <code class="docutils literal notranslate"><span class="pre">example</span></code> instead of <code class="docutils literal notranslate"><span class="pre">instance</span></code> so that we don’t actually
instantiate instances of the classes.</p>
</div>
<div class="section" id="exercises">
<h2><span class="section-number">14.4. </span>Exercises<a class="headerlink" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#exercises" title="Permalink to this headline">¶</a></h2>
<ol class="arabic">
<li><p>Replace the <code class="docutils literal notranslate"><span class="pre">sorry</span></code> commands in the following proofs to show that we can
create a partial order <code class="docutils literal notranslate"><span class="pre">R'​</span></code> out of a strict partial order <code class="docutils literal notranslate"><span class="pre">R</span></code>.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.Basic%0A%0Aclass%20StrictPartialOrder%20(A%20%3A%20Type%20u)%20where%0A%20%20lt%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20irrefl%20%3A%20Irreflexive%20lt%0A%20%20trans%20%3A%20Transitive%20lt%0A%0Alocal%20infix%3A50%20%22%20%E2%89%BA%20%22%20%3D%3E%20StrictPartialOrder.lt%0A%0Asection%0Avariable%20%7BA%20%3A%20Type%20u%7D%20%5BStrictPartialOrder%20A%5D%0A%0Adef%20R'%20(a%20b%20%3A%20A)%20%3A%20Prop%20%3A%3D%0A(a%20%E2%89%BA%20b)%20%E2%88%A8%20a%20%3D%20b%0A%0Alocal%20infix%3A50%20%22%20%E2%89%BC%20%22%20%3D%3E%20R'%0A%0Atheorem%20reflR'%20(a%20%3A%20A)%20%3A%20a%20%E2%89%BC%20a%20%3A%3D%20sorry%0A%0Atheorem%20transR'%20%7Ba%20b%20c%20%3A%20A%7D%20(h1%20%3A%20a%20%E2%89%BC%20b)%20(h2%20%3A%20b%20%E2%89%BC%20c)%20%3A%0A%20%20a%20%E2%89%BC%20c%20%3A%3D%0Asorry%0A%0Atheorem%20antisymmR'%20%7Ba%20b%20%3A%20A%7D%20(h1%20%3A%20a%20%E2%89%BC%20b)%20(h2%20%3A%20b%20%E2%89%BC%20a)%20%3A%0A%20%20a%20%3D%20b%20%3A%3D%0Asorry%0A%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Order.Basic</span>

<span class="kd">class</span> <span class="n">StrictPartialOrder</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
  <span class="n">lt</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
  <span class="n">irrefl</span> <span class="o">:</span> <span class="n">Irreflexive</span> <span class="n">lt</span>
  <span class="n">trans</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">lt</span>

<span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ≺ "</span> <span class="bp">=&gt;</span> <span class="n">StrictPartialOrder.lt</span>

<span class="kn">section</span>
<span class="kd">variable</span> <span class="o">{</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">}</span> <span class="o">[</span><span class="n">StrictPartialOrder</span> <span class="n">A</span><span class="o">]</span>

<span class="kd">def</span> <span class="n">R'</span> <span class="o">(</span><span class="n">a</span> <span class="n">b</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span>
<span class="o">(</span><span class="n">a</span> <span class="bp">≺</span> <span class="n">b</span><span class="o">)</span> <span class="bp">∨</span> <span class="n">a</span> <span class="bp">=</span> <span class="n">b</span>

<span class="kn">local</span> <span class="kd">infix</span><span class="o">:</span><span class="mi">50</span> <span class="s2">" ≼ "</span> <span class="bp">=&gt;</span> <span class="n">R'</span>

<span class="kd">theorem</span> <span class="n">reflR'</span> <span class="o">(</span><span class="n">a</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≼</span> <span class="n">a</span> <span class="o">:=</span> <span class="gr">sorry</span>

<span class="kd">theorem</span> <span class="n">transR'</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span><span class="o">}</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≼</span> <span class="n">b</span><span class="o">)</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">≼</span> <span class="n">c</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">a</span> <span class="bp">≼</span> <span class="n">c</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">theorem</span> <span class="n">antisymmR'</span> <span class="o">{</span><span class="n">a</span> <span class="n">b</span> <span class="o">:</span> <span class="n">A</span><span class="o">}</span> <span class="o">(</span><span class="n">h1</span> <span class="o">:</span> <span class="n">a</span> <span class="bp">≼</span> <span class="n">b</span><span class="o">)</span> <span class="o">(</span><span class="n">h2</span> <span class="o">:</span> <span class="n">b</span> <span class="bp">≼</span> <span class="n">a</span><span class="o">)</span> <span class="o">:</span>
  <span class="n">a</span> <span class="bp">=</span> <span class="n">b</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">end</span>
</pre></div>
</div>
</div></li>
<li><p>Replace the <code class="docutils literal notranslate"><span class="pre">sorry</span></code> by a proof.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.Basic%0A%0Anamespace%20hidden%0Aclass%20Preorder%20(A%20%3A%20Type%20u)%20where%0A%20%20%20%20le%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0A%20%20%20%20refl%20%3A%20Reflexive%20le%0A%20%20%20%20trans%20%3A%20Transitive%20le%0A%0Anamespace%20Preorder%0Adef%20S%20(a%20b%20%3A%20A)%20%5BPreorder%20A%5D%20%3A%20Prop%20%3A%3D%20le%20a%20b%20%E2%88%A7%20le%20b%20a%0A%0Aexample%20(A%20%3A%20Type%20u)%20%5BPreorder%20A%5D%20%7Bx%20y%20z%20%3A%20A%7D%20%3A%0A%20%20S%20x%20y%20%E2%86%92%20S%20y%20z%20%E2%86%92%20S%20x%20z%20%3A%3D%0Asorry%0A%0Aend%20Preorder%0Aend%20hidden" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Order.Basic</span>

<span class="kn">namespace</span> <span class="n">hidden</span>
<span class="kd">class</span> <span class="n">Preorder</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="n">where</span>
    <span class="n">le</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
    <span class="n">refl</span> <span class="o">:</span> <span class="n">Reflexive</span> <span class="n">le</span>
    <span class="n">trans</span> <span class="o">:</span> <span class="n">Transitive</span> <span class="n">le</span>

<span class="kn">namespace</span> <span class="n">Preorder</span>
<span class="kd">def</span> <span class="n">S</span> <span class="o">(</span><span class="n">a</span> <span class="n">b</span> <span class="o">:</span> <span class="n">A</span><span class="o">)</span> <span class="o">[</span><span class="n">Preorder</span> <span class="n">A</span><span class="o">]</span> <span class="o">:</span> <span class="kt">Prop</span> <span class="o">:=</span> <span class="n">le</span> <span class="n">a</span> <span class="n">b</span> <span class="bp">∧</span> <span class="n">le</span> <span class="n">b</span> <span class="n">a</span>

<span class="kd">example</span> <span class="o">(</span><span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span> <span class="n">u</span><span class="o">)</span> <span class="o">[</span><span class="n">Preorder</span> <span class="n">A</span><span class="o">]</span> <span class="o">{</span><span class="n">x</span> <span class="n">y</span> <span class="n">z</span> <span class="o">:</span> <span class="n">A</span><span class="o">}</span> <span class="o">:</span>
  <span class="n">S</span> <span class="n">x</span> <span class="n">y</span> <span class="bp">→</span> <span class="n">S</span> <span class="n">y</span> <span class="n">z</span> <span class="bp">→</span> <span class="n">S</span> <span class="n">x</span> <span class="n">z</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">end</span> <span class="n">Preorder</span>
<span class="kd">end</span> <span class="n">hidden</span>
</pre></div>
</div>
</div></li>
<li><p>Only one of the following two theorems is provable. Figure out which one is true, and replace the <code class="docutils literal notranslate"><span class="pre">sorry</span></code> command with a complete proof.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Order.Basic%0A%0Aaxiom%20A%20%3A%20Type%0Aaxiom%20a%20%3A%20A%0Aaxiom%20b%20%3A%20A%0Aaxiom%20c%20%3A%20A%0Aaxiom%20R%20%3A%20A%20%E2%86%92%20A%20%E2%86%92%20Prop%0Aaxiom%20Rab%20%3A%20R%20a%20b%0Aaxiom%20Rbc%20%3A%20R%20b%20c%0Aaxiom%20nRac%20%3A%20%C2%AC%20R%20a%20c%0A%0A--%20Prove%20one%20of%20the%20following%20two%20theorems%3A%0A%0Atheorem%20R_is_strict_partial_order%20%3A%0A%20%20Irreflexive%20R%20%E2%88%A7%20Transitive%20R%20%3A%3D%0Asorry%0A%0Atheorem%20R_is_not_strict_partial_order%20%3A%0A%20%20%C2%AC(Irreflexive%20R%20%E2%88%A7%20Transitive%20R)%20%3A%3D%0Asorry" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Order.Basic</span>

<span class="kd">axiom</span> <span class="n">A</span> <span class="o">:</span> <span class="kt">Type</span>
<span class="kd">axiom</span> <span class="n">a</span> <span class="o">:</span> <span class="n">A</span>
<span class="kd">axiom</span> <span class="n">b</span> <span class="o">:</span> <span class="n">A</span>
<span class="kd">axiom</span> <span class="n">c</span> <span class="o">:</span> <span class="n">A</span>
<span class="kd">axiom</span> <span class="n">R</span> <span class="o">:</span> <span class="n">A</span> <span class="bp">→</span> <span class="n">A</span> <span class="bp">→</span> <span class="kt">Prop</span>
<span class="kd">axiom</span> <span class="n">Rab</span> <span class="o">:</span> <span class="n">R</span> <span class="n">a</span> <span class="n">b</span>
<span class="kd">axiom</span> <span class="n">Rbc</span> <span class="o">:</span> <span class="n">R</span> <span class="n">b</span> <span class="n">c</span>
<span class="kd">axiom</span> <span class="n">nRac</span> <span class="o">:</span> <span class="bp">¬</span> <span class="n">R</span> <span class="n">a</span> <span class="n">c</span>

<span class="c1">-- Prove one of the following two theorems:</span>

<span class="kd">theorem</span> <span class="n">R_is_strict_partial_order</span> <span class="o">:</span>
  <span class="n">Irreflexive</span> <span class="n">R</span> <span class="bp">∧</span> <span class="n">Transitive</span> <span class="n">R</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">theorem</span> <span class="n">R_is_not_strict_partial_order</span> <span class="o">:</span>
  <span class="bp">¬</span><span class="o">(</span><span class="n">Irreflexive</span> <span class="n">R</span> <span class="bp">∧</span> <span class="n">Transitive</span> <span class="n">R</span><span class="o">)</span> <span class="o">:=</span>
<span class="gr">sorry</span>
</pre></div>
</div>
</div></li>
<li><p>Complete the following proof. You may use results from Mathlib.</p>
<div style="position: relative">
<div style="position: absolute; right: 0; top: 0; padding: 1ex"><a href="https://live.lean-lang.org/#code=import%20Mathlib.Data.Nat.Defs%0A%0Asection%0Aopen%20Nat%0Avariable%20(n%20m%20%3A%20%E2%84%95)%0A%0Aexample%20%3A%201%20%E2%89%A4%204%20%3A%3D%0Asorry%0A%0Aend" target="_blank">
try it!</a></div><div class="highlight-lean notranslate"><div class="highlight"><pre><span></span><span class="kn">import</span> <span class="n">Mathlib.Data.Nat.Defs</span>

<span class="kn">section</span>
<span class="kn">open</span> <span class="n">Nat</span>
<span class="kd">variable</span> <span class="o">(</span><span class="n">n</span> <span class="n">m</span> <span class="o">:</span> <span class="n">ℕ</span><span class="o">)</span>

<span class="kd">example</span> <span class="o">:</span> <span class="mi">1</span> <span class="bp">≤</span> <span class="mi">4</span> <span class="o">:=</span>
<span class="gr">sorry</span>

<span class="kd">end</span>
</pre></div>
</div>
</div></li>
</ol>
</div>
</div>


          </div>
          
        </div>
      </div>
      <div class="sphinxsidebar" role="navigation" aria-label="main navigation">
        <div class="sphinxsidebarwrapper">
<h1 class="logo"><a href="https://leanprover-community.github.io/logic_and_proof/index.html">Logic and Proof</a></h1>








<!-- <h3>Navigation</h3> -->
<ul class="current">
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/introduction.html">1. Introduction</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/propositional_logic.html">2. Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/natural_deduction_for_propositional_logic.html">3. Natural Deduction for Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/propositional_logic_in_lean.html">4. Propositional Logic in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/classical_reasoning.html">5. Classical Reasoning</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/semantics_of_propositional_logic.html">6. Semantics of Propositional Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/first_order_logic.html">7. First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/natural_deduction_for_first_order_logic.html">8. Natural Deduction for First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/first_order_logic_in_lean.html">9. First Order Logic in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/semantics_of_first_order_logic.html">10. Semantics of First Order Logic</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets.html">11. Sets</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/sets_in_lean.html">12. Sets in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations.html">13. Relations</a></li>
<li class="toctree-l1 current"><a class="current reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#">14. Relations in Lean</a><ul>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#order-relations">14.1. Order Relations</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#orderings-on-numbers">14.2. Orderings on Numbers</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#equivalence-relations">14.3. Equivalence Relations</a></li>
<li class="toctree-l2"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/relations_in_lean.html#exercises">14.4. Exercises</a></li>
</ul>
</li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/functions.html">15. Functions</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/functions_in_lean.html">16. Functions in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction.html">17. The Natural Numbers and Induction</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_natural_numbers_and_induction_in_lean.html">18. The Natural Numbers and Induction in Lean</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/elementary_number_theory.html">19. Elementary Number Theory</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/combinatorics.html">20. Combinatorics</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_real_numbers.html">21. The Real Numbers</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/the_infinite.html">22. The Infinite</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/axiomatic_foundations.html">23. Axiomatic Foundations</a></li>
<li class="toctree-l1"><a class="reference internal" href="https://leanprover-community.github.io/logic_and_proof/nd_quickref.html">24. Appendix: Natural Deduction Rules</a></li>
</ul>


<hr>
<ul>
    
    <li class="toctree-l1"><a href="https://leanprover.github.io/">Lean Home</a></li>
    
    <li class="toctree-l1"><a href="https://leanprover-community.github.io/logic_and_proof/logic_and_proof.pdf">PDF version</a></li>
    
</ul>

<div id="searchbox" style="" role="search">
  <h3 id="searchlabel">Quick search</h3>
    <div class="searchformwrapper">
    <form class="search" action="https://leanprover-community.github.io/logic_and_proof/search.html" method="get">
      <input type="text" name="q" aria-labelledby="searchlabel">
      <input type="submit" value="Go">
    </form>
    </div>
</div>

        </div>
      </div>
      <div class="clearer"></div>
    </div>
    <div class="footer">
      ©2017, Jeremy Avigad, Joseph Hua, Robert Y. Lewis, and Floris van Doorn.
      
      |
      Powered by <a href="http://sphinx-doc.org/">Sphinx 3.5.4</a>
      &amp; <a href="https://github.com/bitprophet/alabaster">Alabaster 0.7.12</a>
      
      |
      <a href="https://leanprover-community.github.io/logic_and_proof/_sources/relations_in_lean.rst.txt" rel="nofollow">Page source</a>
    </div>

    

    
  
<div style="position: absolute; width: 0px; height: 0px; overflow: hidden; padding: 0px; border: 0px; margin: 0px;"><div id="MathJax_Font_Test" style="position: absolute; visibility: hidden; top: 0px; left: 0px; width: auto; min-width: 0px; max-width: none; padding: 0px; border: 0px; margin: 0px; white-space: nowrap; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; font-size: 40px; font-weight: normal; font-style: normal; font-size-adjust: none; font-family: MathJax_Main, sans-serif;"></div></div></body></html>
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-3e416f96-aa3f-4a2c-bc15-a43b5bd44e73@mhtml.blink

@charset "utf-8";

.MathJax_Hover_Frame { border-radius: 0.25em; box-shadow: rgb(136, 51, 170) 0px 0px 15px; display: inline-block; position: absolute; border: 1px solid rgb(170, 102, 221) !important; }

.MathJax_Menu_Button .MathJax_Hover_Arrow { position: absolute; cursor: pointer; display: inline-block; border: 2px solid rgb(170, 170, 170); border-radius: 4px; font-family: "Courier New", Courier; font-size: 9px; color: rgb(240, 240, 240); }

.MathJax_Menu_Button .MathJax_Hover_Arrow span { display: block; background-color: rgb(170, 170, 170); border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px; }

.MathJax_Hover_Arrow:hover { color: white !important; border: 2px solid rgb(204, 204, 204) !important; }

.MathJax_Hover_Arrow:hover span { background-color: rgb(204, 204, 204) !important; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-b175d5c8-9a87-4333-8fe4-15b4590dc3f9@mhtml.blink

@charset "utf-8";

#MathJax_About { position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: rgb(221, 221, 221); color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; box-shadow: rgb(128, 128, 128) 0px 10px 20px; }

#MathJax_About.MathJax_MousePost { outline: none; }

.MathJax_Menu { position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid rgb(204, 204, 204); margin: 0px; cursor: default; font-style: ; font-variant: normal; font-weight: ; font-stretch: ; font-size: ; font-family: ; font-optical-sizing: ; font-size-adjust: ; font-kerning: ; font-feature-settings: ; font-variation-settings: ; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; box-shadow: rgb(128, 128, 128) 0px 10px 20px; }

.MathJax_MenuItem { padding: 1px 2em; background: transparent; }

.MathJax_MenuArrow { position: absolute; right: 0.5em; padding-top: 0.25em; color: rgb(102, 102, 102); font-size: 0.75em; }

.MathJax_MenuActive .MathJax_MenuArrow { color: white; }

.MathJax_MenuArrow.RTL { left: 0.5em; right: auto; }

.MathJax_MenuCheck { position: absolute; left: 0.7em; }

.MathJax_MenuCheck.RTL { right: 0.7em; left: auto; }

.MathJax_MenuRadioCheck { position: absolute; left: 0.7em; }

.MathJax_MenuRadioCheck.RTL { right: 0.7em; left: auto; }

.MathJax_MenuLabel { padding: 1px 2em 3px 1.33em; font-style: italic; }

.MathJax_MenuRule { border-top: 1px solid rgb(221, 221, 221); margin: 4px 3px; }

.MathJax_MenuDisabled { color: graytext; }

.MathJax_MenuActive { background-color: rgb(96, 104, 114); color: white; }

.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus { background-color: rgb(232, 232, 232); }

.MathJax_ContextMenu:focus { outline: none; }

.MathJax_ContextMenu .MathJax_MenuItem:focus { outline: none; }

#MathJax_AboutClose { top: 0.2em; right: 0.2em; }

.MathJax_Menu .MathJax_MenuClose { top: -10px; left: -10px; }

.MathJax_MenuClose { position: absolute; cursor: pointer; display: inline-block; border: 2px solid rgb(170, 170, 170); border-radius: 18px; font-family: "Courier New", Courier; font-size: 24px; color: rgb(240, 240, 240); }

.MathJax_MenuClose span { display: block; background-color: rgb(170, 170, 170); border: 1.5px solid; border-radius: 18px; line-height: 0; padding: 8px 0px 6px; }

.MathJax_MenuClose:hover { color: white !important; border: 2px solid rgb(204, 204, 204) !important; }

.MathJax_MenuClose:hover span { background-color: rgb(204, 204, 204) !important; }

.MathJax_MenuClose:hover:focus { outline: none; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-eb1f0629-94fe-49d5-960a-bd12b54f7fba@mhtml.blink

@charset "utf-8";

.MathJax_Preview .MJXf-math { color: inherit !important; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-adf86bdb-3cbe-4bd2-b7c6-ea0772282141@mhtml.blink

@charset "utf-8";

.MJX_Assistive_MathML { top: 0px; left: 0px; clip: rect(1px, 1px, 1px, 1px); user-select: none; position: absolute !important; padding: 1px 0px 0px !important; border: 0px !important; height: 1px !important; width: 1px !important; overflow: hidden !important; display: block !important; }

.MJX_Assistive_MathML.MJX_Assistive_MathML_Block { width: 100% !important; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-0c55494e-6a7d-4103-8dc9-726ff4de5532@mhtml.blink

@charset "utf-8";

#MathJax_Zoom { position: absolute; background-color: rgb(240, 240, 240); overflow: auto; display: block; z-index: 301; padding: 0.5em; border: 1px solid black; margin: 0px; font-weight: normal; font-style: normal; text-align: left; text-indent: 0px; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; box-sizing: content-box; box-shadow: rgb(170, 170, 170) 5px 5px 15px; }

#MathJax_ZoomOverlay { position: absolute; left: 0px; top: 0px; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0px; padding: 0px; margin: 0px; background-color: white; opacity: 0; }

#MathJax_ZoomFrame { position: relative; display: inline-block; height: 0px; width: 0px; }

#MathJax_ZoomEventTrap { position: absolute; left: 0px; top: 0px; z-index: 302; display: inline-block; border: 0px; padding: 0px; margin: 0px; background-color: white; opacity: 0; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-c580c1d7-e856-4596-abe7-18d3ce214758@mhtml.blink

@charset "utf-8";

.MathJax_Preview { color: rgb(136, 136, 136); }

#MathJax_Message { position: fixed; left: 1px; bottom: 2px; background-color: rgb(230, 230, 230); border: 1px solid rgb(149, 149, 149); margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap; }

#MathJax_MSIE_Frame { position: absolute; top: 0px; left: 0px; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px; }

.MathJax_Error { color: rgb(204, 0, 0); font-style: italic; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-ca197a30-dd73-4ac3-95d2-7ceda64984f1@mhtml.blink

@charset "utf-8";

.MJXp-script { font-size: 0.8em; }

.MJXp-right { transform-origin: right center; }

.MJXp-bold { font-weight: bold; }

.MJXp-italic { font-style: italic; }

.MJXp-scr { font-family: MathJax_Script, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-frak { font-family: MathJax_Fraktur, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-sf { font-family: MathJax_SansSerif, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-cal { font-family: MathJax_Caligraphic, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-mono { font-family: MathJax_Typewriter, "Times New Roman", Times, STIXGeneral, serif; }

.MJXp-largeop { font-size: 150%; }

.MJXp-largeop.MJXp-int { vertical-align: -0.2em; }

.MJXp-math { display: inline-block; line-height: 1.2; text-indent: 0px; font-family: "Times New Roman", Times, STIXGeneral, serif; white-space: nowrap; border-collapse: collapse; }

.MJXp-display { display: block; text-align: center; margin: 1em 0px; }

.MJXp-math span { display: inline-block; }

.MJXp-box { display: block !important; text-align: center; }

.MJXp-box::after { content: " "; }

.MJXp-rule { display: block !important; margin-top: 0.1em; }

.MJXp-char { display: block !important; }

.MJXp-mo { margin: 0px 0.15em; }

.MJXp-mfrac { margin: 0px 0.125em; vertical-align: 0.25em; }

.MJXp-denom { display: inline-table !important; width: 100%; }

.MJXp-denom > * { display: table-row !important; }

.MJXp-surd { vertical-align: top; }

.MJXp-surd > * { display: block !important; }

.MJXp-script-box > * { display: table !important; height: 50%; }

.MJXp-script-box > * > * { display: table-cell !important; vertical-align: top; }

.MJXp-script-box > :last-child > * { vertical-align: bottom; }

.MJXp-script-box > * > * > * { display: block !important; }

.MJXp-mphantom { visibility: hidden; }

.MJXp-munderover, .MJXp-munder { display: inline-table !important; }

.MJXp-over { display: inline-block !important; text-align: center; }

.MJXp-over > * { display: block !important; }

.MJXp-munderover > *, .MJXp-munder > * { display: table-row !important; }

.MJXp-mtable { vertical-align: 0.25em; margin: 0px 0.125em; }

.MJXp-mtable > * { display: inline-table !important; vertical-align: middle; }

.MJXp-mtr { display: table-row !important; }

.MJXp-mtd { text-align: center; padding: 0.5em 0px 0px 0.5em; display: table-cell !important; }

.MJXp-mtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-mlabeledtr { display: table-row !important; }

.MJXp-mlabeledtr > .MJXp-mtd:first-child { padding-left: 0px; }

.MJXp-mlabeledtr:first-child > .MJXp-mtd { padding-top: 0px; }

.MJXp-merror { background-color: rgb(255, 255, 136); color: rgb(204, 0, 0); border: 1px solid rgb(204, 0, 0); padding: 1px 3px; font-style: normal; font-size: 90%; }

.MJXp-scale0 { transform: scaleX(0); }

.MJXp-scale1 { transform: scaleX(0.1); }

.MJXp-scale2 { transform: scaleX(0.2); }

.MJXp-scale3 { transform: scaleX(0.3); }

.MJXp-scale4 { transform: scaleX(0.4); }

.MJXp-scale5 { transform: scaleX(0.5); }

.MJXp-scale6 { transform: scaleX(0.6); }

.MJXp-scale7 { transform: scaleX(0.7); }

.MJXp-scale8 { transform: scaleX(0.8); }

.MJXp-scale9 { transform: scaleX(0.9); }

.MathJax_PHTML .noError { font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: cid:css-619a17b1-9234-4f67-bd54-fbffe4398e25@mhtml.blink

@charset "utf-8";

.MathJax_Display { text-align: center; margin: 1em 0em; position: relative; text-indent: 0px; max-width: none; max-height: none; min-width: 0px; min-height: 0px; width: 100%; display: block !important; }

.MathJax .merror { background-color: rgb(255, 255, 136); color: rgb(204, 0, 0); border: 1px solid rgb(204, 0, 0); padding: 1px 3px; font-style: normal; font-size: 90%; }

.MathJax .MJX-monospace { font-family: monospace; }

.MathJax .MJX-sans-serif { font-family: sans-serif; }

#MathJax_Tooltip { background-color: infobackground; color: infotext; border: 1px solid black; box-shadow: rgb(170, 170, 170) 2px 2px 5px; padding: 3px 4px; z-index: 401; position: absolute; left: 0px; top: 0px; width: auto; height: auto; display: none; }

.MathJax { display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0px; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0px; min-height: 0px; border: 0px; padding: 0px; margin: 0px; }

.MathJax:focus, body :focus .MathJax { display: inline-table; }

.MathJax.MathJax_FullWidth { text-align: center; display: table-cell !important; width: 10000em !important; }

.MathJax img, .MathJax nobr, .MathJax a { border: 0px; padding: 0px; margin: 0px; max-width: 5000em; max-height: 5000em; min-width: 0px; min-height: 0px; vertical-align: 0px; line-height: normal; text-decoration: none; }

img.MathJax_strut { border: 0px !important; padding: 0px !important; margin: 0px !important; vertical-align: 0px !important; }

.MathJax span { display: inline; position: static; border: 0px; padding: 0px; margin: 0px; vertical-align: 0px; line-height: normal; text-decoration: none; box-sizing: content-box; }

.MathJax nobr { white-space: nowrap !important; }

.MathJax img { display: inline !important; float: none !important; }

.MathJax * { transition: none; }

.MathJax_Processing { visibility: hidden; position: fixed; width: 0px; height: 0px; overflow: hidden; }

.MathJax_Processed { display: none !important; }

.MathJax_test { font-style: normal; font-weight: normal; font-size: 100%; font-size-adjust: none; text-indent: 0px; text-transform: none; letter-spacing: normal; word-spacing: normal; overflow: hidden; height: 1px; }

.MathJax_test.mjx-test-display { display: table !important; }

.MathJax_test.mjx-test-inline { display: inline !important; margin-right: -1px; }

.MathJax_test.mjx-test-default { display: block !important; clear: both; }

.MathJax_ex_box { position: absolute; overflow: hidden; min-height: 0px; max-height: none; padding: 0px; border: 0px; margin: 0px; width: 1px; height: 60ex; display: inline-block !important; }

.MathJax_em_box { position: absolute; overflow: hidden; min-height: 0px; max-height: none; padding: 0px; border: 0px; margin: 0px; width: 1px; height: 60em; display: inline-block !important; }

.mjx-test-inline .MathJax_left_box { display: inline-block; width: 0px; float: left; }

.mjx-test-inline .MathJax_right_box { display: inline-block; width: 0px; float: right; }

.mjx-test-display .MathJax_right_box { min-width: 0px; max-width: none; padding: 0px; border: 0px; margin: 0px; display: table-cell !important; width: 10000em !important; }

.MathJax .MathJax_HitBox { cursor: text; background: white; opacity: 0; }

.MathJax .MathJax_HitBox * { filter: none; opacity: 1; background: transparent; }

#MathJax_Tooltip * { filter: none; opacity: 1; background: transparent; }

@font-face { font-family: MathJax_Main; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Main-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Main-bold; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Main-Bold.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Main-italic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Main-Italic.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Math-italic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Math-Italic.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Caligraphic; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Caligraphic-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Caligraphic-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size1; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size1-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size2; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size2-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size3; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size3-Regular.otf?V=2.7.7") format("opentype"); }

@font-face { font-family: MathJax_Size4; src: url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff?V=2.7.7") format("woff"), url("https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/fonts/HTML-CSS/TeX/otf/MathJax_Size4-Regular.otf?V=2.7.7") format("opentype"); }

.MathJax .noError { font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid; }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/pygments.css

@charset "utf-8";

pre { line-height: 125%; }

td.linenos .normal { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

span.linenos { color: inherit; background-color: transparent; padding-left: 5px; padding-right: 5px; }

td.linenos .special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

span.linenos.special { color: rgb(0, 0, 0); background-color: rgb(255, 255, 192); padding-left: 5px; padding-right: 5px; }

.highlight .hll { background-color: rgb(255, 255, 204); }

.highlight { background: rgb(238, 255, 204); }

.highlight .c { color: rgb(64, 128, 144); font-style: italic; }

.highlight .err { border: 1px solid rgb(255, 0, 0); }

.highlight .k { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .o { color: rgb(102, 102, 102); }

.highlight .ch { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cm { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cp { color: rgb(0, 112, 32); }

.highlight .cpf { color: rgb(64, 128, 144); font-style: italic; }

.highlight .c1 { color: rgb(64, 128, 144); font-style: italic; }

.highlight .cs { color: rgb(64, 128, 144); background-color: rgb(255, 240, 240); }

.highlight .gd { color: rgb(160, 0, 0); }

.highlight .ge { font-style: italic; }

.highlight .gr { color: rgb(255, 0, 0); }

.highlight .gh { color: rgb(0, 0, 128); font-weight: bold; }

.highlight .gi { color: rgb(0, 160, 0); }

.highlight .go { color: rgb(51, 51, 51); }

.highlight .gp { color: rgb(198, 93, 9); font-weight: bold; }

.highlight .gs { font-weight: bold; }

.highlight .gu { color: rgb(128, 0, 128); font-weight: bold; }

.highlight .gt { color: rgb(0, 68, 221); }

.highlight .kc { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kd { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kn { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kp { color: rgb(0, 112, 32); }

.highlight .kr { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .kt { color: rgb(144, 32, 0); }

.highlight .m { color: rgb(32, 128, 80); }

.highlight .s { color: rgb(64, 112, 160); }

.highlight .na { color: rgb(64, 112, 160); }

.highlight .nb { color: rgb(0, 112, 32); }

.highlight .nc { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .no { color: rgb(96, 173, 213); }

.highlight .nd { color: rgb(85, 85, 85); font-weight: bold; }

.highlight .ni { color: rgb(213, 85, 55); font-weight: bold; }

.highlight .ne { color: rgb(0, 112, 32); }

.highlight .nf { color: rgb(6, 40, 126); }

.highlight .nl { color: rgb(0, 32, 112); font-weight: bold; }

.highlight .nn { color: rgb(14, 132, 181); font-weight: bold; }

.highlight .nt { color: rgb(6, 40, 115); font-weight: bold; }

.highlight .nv { color: rgb(187, 96, 213); }

.highlight .ow { color: rgb(0, 112, 32); font-weight: bold; }

.highlight .w { color: rgb(187, 187, 187); }

.highlight .mb { color: rgb(32, 128, 80); }

.highlight .mf { color: rgb(32, 128, 80); }

.highlight .mh { color: rgb(32, 128, 80); }

.highlight .mi { color: rgb(32, 128, 80); }

.highlight .mo { color: rgb(32, 128, 80); }

.highlight .sa { color: rgb(64, 112, 160); }

.highlight .sb { color: rgb(64, 112, 160); }

.highlight .sc { color: rgb(64, 112, 160); }

.highlight .dl { color: rgb(64, 112, 160); }

.highlight .sd { color: rgb(64, 112, 160); font-style: italic; }

.highlight .s2 { color: rgb(64, 112, 160); }

.highlight .se { color: rgb(64, 112, 160); font-weight: bold; }

.highlight .sh { color: rgb(64, 112, 160); }

.highlight .si { color: rgb(112, 160, 208); font-style: italic; }

.highlight .sx { color: rgb(198, 93, 9); }

.highlight .sr { color: rgb(35, 83, 136); }

.highlight .s1 { color: rgb(64, 112, 160); }

.highlight .ss { color: rgb(81, 121, 24); }

.highlight .bp { color: rgb(0, 112, 32); }

.highlight .fm { color: rgb(6, 40, 126); }

.highlight .vc { color: rgb(187, 96, 213); }

.highlight .vg { color: rgb(187, 96, 213); }

.highlight .vi { color: rgb(187, 96, 213); }

.highlight .vm { color: rgb(187, 96, 213); }

.highlight .il { color: rgb(32, 128, 80); }
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/alabaster.css

@charset "utf-8";

@import url("basic.css");

body { font-family: "Times New Roman", Times, serif; font-size: 17px; background-color: rgb(255, 255, 255); color: rgb(0, 0, 0); margin: 0px; padding: 0px; }

div.document { width: 940px; margin: 30px auto 0px; }

div.documentwrapper { float: left; width: 100%; }

div.bodywrapper { margin: 0px 0px 0px 220px; }

div.sphinxsidebar { width: 220px; font-size: 14px; line-height: 1.5; }

hr { border: 1px solid rgb(177, 180, 182); }

div.body { background-color: rgb(255, 255, 255); color: rgb(62, 67, 73); padding: 0px 30px; }

div.body > .section { text-align: left; }

div.footer { width: 940px; margin: 20px auto 30px; font-size: 14px; color: rgb(136, 136, 136); text-align: right; }

div.footer a { color: rgb(136, 136, 136); }

p.caption { font-family: inherit; font-size: inherit; }

div.relations { display: none; }

div.sphinxsidebar a { color: rgb(68, 68, 68); text-decoration: none; border-bottom: 1px dotted rgb(153, 153, 153); }

div.sphinxsidebar a:hover { border-bottom: 1px solid rgb(153, 153, 153); }

div.sphinxsidebarwrapper { padding: 18px 10px; }

div.sphinxsidebarwrapper p.logo { padding: 0px; margin: -10px 0px 0px; text-align: center; }

div.sphinxsidebarwrapper h1.logo { margin-top: -10px; margin-bottom: 5px; text-align: left; }

div.sphinxsidebarwrapper h1.logo-name { margin-top: 0px; }

div.sphinxsidebarwrapper p.blurb { margin-top: 0px; font-style: normal; }

div.sphinxsidebar h3, div.sphinxsidebar h4 { font-family: "Times New Roman", Times, serif; color: rgb(68, 68, 68); font-size: 24px; font-weight: normal; margin: 0px 0px 5px; padding: 0px; }

div.sphinxsidebar h4 { font-size: 20px; }

div.sphinxsidebar h3 a { color: rgb(68, 68, 68); }

div.sphinxsidebar p.logo a, div.sphinxsidebar h3 a, div.sphinxsidebar p.logo a:hover, div.sphinxsidebar h3 a:hover { border: none; }

div.sphinxsidebar p { color: rgb(85, 85, 85); margin: 10px 0px; }

div.sphinxsidebar ul { margin: 10px 0px; padding: 0px; color: rgb(0, 0, 0); }

div.sphinxsidebar ul li.toctree-l1 > a { font-size: 120%; }

div.sphinxsidebar ul li.toctree-l2 > a { font-size: 110%; }

div.sphinxsidebar input { border: 1px solid rgb(204, 204, 204); font-family: "Times New Roman", Times, serif; font-size: 1em; }

div.sphinxsidebar hr { border: none; height: 1px; color: rgb(170, 170, 170); background: rgb(170, 170, 170); text-align: left; margin-left: 0px; width: 50%; }

div.sphinxsidebar .badge { border-bottom: none; }

div.sphinxsidebar .badge:hover { border-bottom: none; }

div.sphinxsidebar h3.donation { margin-top: 10px; }

a { color: rgb(0, 75, 107); text-decoration: underline; }

a:hover { color: rgb(109, 65, 0); text-decoration: underline; }

div.body h1, div.body h2, div.body h3, div.body h4, div.body h5, div.body h6 { font-family: "Times New Roman", Times, serif; font-weight: normal; margin: 30px 0px 10px; padding: 0px; }

div.body h1 { margin-top: 0px; padding-top: 0px; font-size: 240%; }

div.body h2 { font-size: 180%; }

div.body h3 { font-size: 150%; }

div.body h4 { font-size: 130%; }

div.body h5 { font-size: 100%; }

div.body h6 { font-size: 100%; }

a.headerlink { color: rgb(221, 221, 221); padding: 0px 4px; text-decoration: none; }

a.headerlink:hover { color: rgb(68, 68, 68); background: rgb(234, 234, 234); }

div.body p, div.body dd, div.body li { line-height: 1.4em; }

div.admonition { margin: 20px 0px; padding: 10px 30px; background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.admonition tt.xref, div.admonition code.xref, div.admonition a tt { background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(250, 250, 250); }

div.admonition p.admonition-title { font-family: "Times New Roman", Times, serif; font-weight: normal; font-size: 24px; margin: 0px 0px 10px; padding: 0px; line-height: 1; }

div.admonition p.last { margin-bottom: 0px; }

div.highlight { background-color: rgb(255, 255, 255); }

dt:target, .highlight { background: rgb(250, 243, 232); }

div.warning { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.danger { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); box-shadow: rgb(213, 44, 44) 2px 2px 4px; }

div.error { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); box-shadow: rgb(213, 44, 44) 2px 2px 4px; }

div.caution { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.attention { background-color: rgb(255, 204, 204); border: 1px solid rgb(255, 170, 170); }

div.important { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.note { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.tip { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.hint { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.seealso { background-color: rgb(238, 238, 238); border: 1px solid rgb(204, 204, 204); }

div.topic { background-color: rgb(238, 238, 238); }

p.admonition-title { display: inline; }

p.admonition-title::after { content: ":"; }

pre, tt, code { font-family: Consolas, Menlo, "DejaVu Sans Mono", "Bitstream Vera Sans Mono", monospace; font-size: 0.9em; }

.hll { background-color: rgb(255, 255, 204); margin: 0px -12px; padding: 0px 12px; display: block; }

img.screenshot { }

tt.descname, tt.descclassname, code.descname, code.descclassname { font-size: 0.95em; }

tt.descname, code.descname { padding-right: 0.08em; }

img.screenshot { box-shadow: rgb(238, 238, 238) 2px 2px 4px; }

table.docutils { border: 1px solid rgb(136, 136, 136); box-shadow: rgb(238, 238, 238) 2px 2px 4px; }

table.docutils td, table.docutils th { border: 1px solid rgb(136, 136, 136); padding: 0.25em 0.7em; }

table.field-list, table.footnote { border: none; box-shadow: none; }

table.footnote { margin: 15px 0px; width: 100%; border: 1px solid rgb(238, 238, 238); background: rgb(253, 253, 253); font-size: 0.9em; }

table.footnote + table.footnote { margin-top: -15px; border-top: none; }

table.field-list th { padding: 0px 0.8em 0px 0px; }

table.field-list td { padding: 0px; }

table.field-list p { margin-bottom: 0.8em; }

.field-name { hyphens: manual; }

table.footnote td.label { width: 0.1px; padding: 0.3em 0px 0.3em 0.5em; }

table.footnote td { padding: 0.3em 0.5em; }

dl { margin: 0px; padding: 0px; }

dl dd { margin-left: 30px; }

blockquote { margin: 0px 0px 0px 30px; padding: 0px; }

ul, ol { margin: 10px 0px 10px 30px; padding: 0px; }

pre { background: rgb(238, 238, 238); padding: 7px 30px; margin: 15px 0px; line-height: 1.3em; }

div.viewcode-block:target { background: rgb(255, 255, 221); }

dl pre, blockquote pre, li pre { margin-left: 0px; padding-left: 30px; }

tt, code { background-color: white; color: rgb(34, 34, 34); }

tt.xref, code.xref, a tt { background-color: rgb(251, 251, 251); border-bottom: 1px solid rgb(255, 255, 255); }

a.reference { text-decoration: none; border-bottom: 1px dotted rgb(0, 75, 107); }

a.image-reference, a.image-reference:hover { border-bottom: none; }

a.reference:hover { border-bottom: 1px solid rgb(109, 65, 0); }

a.footnote-reference { text-decoration: none; font-size: 0.7em; vertical-align: top; border-bottom: 1px dotted rgb(0, 75, 107); }

a.footnote-reference:hover { border-bottom: 1px solid rgb(109, 65, 0); }

a:hover tt, a:hover code { background: rgb(238, 238, 238); }

@media screen and (max-width: 870px) {
  div.sphinxsidebar { display: none; }
  div.document { width: 100%; }
  div.documentwrapper { margin: 0px; }
  div.bodywrapper { margin: 0px; }
  ul { margin-left: 0px; }
  li > ul { margin-left: 30px; }
  .document { width: auto; }
  .footer { width: auto; }
  .bodywrapper { margin: 0px; }
  .footer { width: auto; }
  .github { display: none; }
}

@media screen and (max-width: 875px) {
  body { margin: 0px; padding: 20px 30px; }
  div.documentwrapper { float: none; background: rgb(255, 255, 255); }
  div.sphinxsidebar { display: block; float: none; width: 102.5%; margin: 50px -30px -20px; padding: 10px 20px; background: rgb(51, 51, 51); color: rgb(255, 255, 255); }
  div.sphinxsidebar h3, div.sphinxsidebar h4, div.sphinxsidebar p, div.sphinxsidebar h3 a { color: rgb(255, 255, 255); }
  div.sphinxsidebar a { color: rgb(170, 170, 170); }
  div.sphinxsidebar p.logo { display: none; }
  div.document { width: 100%; margin: 0px; }
  div.footer { display: none; }
  div.bodywrapper { margin: 0px; }
  div.body { min-height: 0px; padding: 0px; }
  .rtd_doc_footer { display: none; }
  .document { width: auto; }
  .footer { width: auto; }
  .footer { width: auto; }
  .github { display: none; }
}

.revsys-inline { display: none !important; }

div#changelog > div.section > ul > li > p:only-child { margin-bottom: 0px; }

table.docutils.citation, table.docutils.citation td, table.docutils.citation th { border: none; box-shadow: none; }

.related { line-height: 30px; width: 100%; font-size: 0.9rem; }

.related.top { border-bottom: 1px solid rgb(238, 238, 238); margin-bottom: 20px; }

.related.bottom { border-top: 1px solid rgb(238, 238, 238); }

.related ul { padding: 0px; margin: 0px; list-style: none; }

.related li { display: inline; }

nav#rellinks { float: right; }

nav#rellinks li + li::before { content: "|"; }

nav#breadcrumbs li + li::before { content: "»"; }

@media print {
  div.related { display: none; }
}
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY----
Content-Type: text/css
Content-Transfer-Encoding: binary
Content-Location: https://leanprover-community.github.io/logic_and_proof/_static/basic.css

@charset "utf-8";

div.clearer { clear: both; }

div.section::after { display: block; content: ""; clear: left; }

div.related { width: 100%; font-size: 90%; }

div.related h3 { display: none; }

div.related ul { margin: 0px; padding: 0px 0px 0px 10px; list-style: none; }

div.related li { display: inline; }

div.related li.right { float: right; margin-right: 5px; }

div.sphinxsidebarwrapper { padding: 10px 5px 0px 10px; }

div.sphinxsidebar { float: left; width: 230px; margin-left: -100%; font-size: 90%; overflow-wrap: break-word; }

div.sphinxsidebar ul { list-style: none; }

div.sphinxsidebar ul ul, div.sphinxsidebar ul.want-points { margin-left: 20px; list-style: square; }

div.sphinxsidebar ul ul { margin-top: 0px; margin-bottom: 0px; }

div.sphinxsidebar form { margin-top: 10px; }

div.sphinxsidebar input { border: 1px solid rgb(152, 219, 204); font-family: sans-serif; font-size: 1em; }

div.sphinxsidebar #searchbox form.search { overflow: hidden; }

div.sphinxsidebar #searchbox input[type="text"] { float: left; width: 80%; padding: 0.25em; box-sizing: border-box; }

div.sphinxsidebar #searchbox input[type="submit"] { float: left; width: 20%; border-left: none; padding: 0.25em; box-sizing: border-box; }

img { border: 0px; max-width: 100%; }

ul.search { margin: 10px 0px 0px 20px; padding: 0px; }

ul.search li { padding: 5px 0px 5px 20px; background-image: url("file.png"); background-repeat: no-repeat; background-position: 0px 7px; }

ul.search li a { font-weight: bold; }

ul.search li div.context { color: rgb(136, 136, 136); margin: 2px 0px 0px 30px; text-align: left; }

ul.keywordmatches li.goodmatch a { font-weight: bold; }

table.contentstable { width: 90%; margin-left: auto; margin-right: auto; }

table.contentstable p.biglink { line-height: 150%; }

a.biglink { font-size: 1.3em; }

span.linkdescr { font-style: italic; padding-top: 5px; font-size: 90%; }

table.indextable { width: 100%; }

table.indextable td { text-align: left; vertical-align: top; }

table.indextable ul { margin-top: 0px; margin-bottom: 0px; list-style-type: none; }

table.indextable > tbody > tr > td > ul { padding-left: 0em; }

table.indextable tr.pcap { height: 10px; }

table.indextable tr.cap { margin-top: 10px; background-color: rgb(242, 242, 242); }

img.toggler { margin-right: 3px; margin-top: 3px; cursor: pointer; }

div.modindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

div.genindex-jumpbox { border-top: 1px solid rgb(221, 221, 221); border-bottom: 1px solid rgb(221, 221, 221); margin: 1em 0px; padding: 0.4em; }

table.modindextable td { padding: 2px; border-collapse: collapse; }

div.body { min-width: 450px; max-width: 800px; }

div.body p, div.body dd, div.body li, div.body blockquote { hyphens: auto; }

a.headerlink { visibility: hidden; }

a.brackets::before, span.brackets > a::before { content: "["; }

a.brackets::after, span.brackets > a::after { content: "]"; }

h1:hover > a.headerlink, h2:hover > a.headerlink, h3:hover > a.headerlink, h4:hover > a.headerlink, h5:hover > a.headerlink, h6:hover > a.headerlink, dt:hover > a.headerlink, caption:hover > a.headerlink, p.caption:hover > a.headerlink, div.code-block-caption:hover > a.headerlink { visibility: visible; }

div.body p.caption { text-align: inherit; }

div.body td { text-align: left; }

.first { margin-top: 0px !important; }

p.rubric { margin-top: 30px; font-weight: bold; }

img.align-left, figure.align-left, .figure.align-left, object.align-left { clear: left; float: left; margin-right: 1em; }

img.align-right, figure.align-right, .figure.align-right, object.align-right { clear: right; float: right; margin-left: 1em; }

img.align-center, figure.align-center, .figure.align-center, object.align-center { display: block; margin-left: auto; margin-right: auto; }

img.align-default, figure.align-default, .figure.align-default { display: block; margin-left: auto; margin-right: auto; }

.align-left { text-align: left; }

.align-center { text-align: center; }

.align-default { text-align: center; }

.align-right { text-align: right; }

div.sidebar, aside.sidebar { margin: 0px 0px 0.5em 1em; border: 1px solid rgb(221, 221, 187); padding: 7px; background-color: rgb(255, 255, 238); width: 40%; float: right; clear: right; overflow-x: auto; }

p.sidebar-title { font-weight: bold; }

div.admonition, div.topic, blockquote { clear: left; }

div.topic { border: 1px solid rgb(204, 204, 204); padding: 7px; margin: 10px 0px; }

p.topic-title { font-size: 1.1em; font-weight: bold; margin-top: 10px; }

div.admonition { margin-top: 10px; margin-bottom: 10px; padding: 7px; }

div.admonition dt { font-weight: bold; }

p.admonition-title { margin: 0px 10px 5px 0px; font-weight: bold; }

div.body p.centered { text-align: center; margin-top: 25px; }

div.sidebar > :last-child, aside.sidebar > :last-child, div.topic > :last-child, div.admonition > :last-child { margin-bottom: 0px; }

div.sidebar::after, aside.sidebar::after, div.topic::after, div.admonition::after, blockquote::after { display: block; content: ""; clear: both; }

table.docutils { margin-top: 10px; margin-bottom: 10px; border: 0px; border-collapse: collapse; }

table.align-center { margin-left: auto; margin-right: auto; }

table.align-default { margin-left: auto; margin-right: auto; }

table caption span.caption-number { font-style: italic; }

table caption span.caption-text { }

table.docutils td, table.docutils th { padding: 1px 8px 1px 5px; border-width: 0px 0px 1px; border-top-style: initial; border-top-color: initial; border-left-style: initial; border-left-color: initial; border-right-style: initial; border-right-color: initial; border-bottom-style: solid; border-bottom-color: rgb(170, 170, 170); }

table.footnote td, table.footnote th { border: 0px !important; }

th { text-align: left; padding-right: 5px; }

table.citation { border-left: 1px solid gray; margin-left: 1px; }

table.citation td { border-bottom: none; }

th > :first-child, td > :first-child { margin-top: 0px; }

th > :last-child, td > :last-child { margin-bottom: 0px; }

div.figure, figure { margin: 0.5em; padding: 0.5em; }

div.figure p.caption, figcaption { padding: 0.3em; }

div.figure p.caption span.caption-number, figcaption span.caption-number { font-style: italic; }

div.figure p.caption span.caption-text, figcaption span.caption-text { }

table.field-list td, table.field-list th { border: 0px !important; }

.field-list ul { margin: 0px; padding-left: 1em; }

.field-list p { margin: 0px; }

.field-name { hyphens: manual; }

table.hlist { margin: 1em 0px; }

table.hlist td { vertical-align: top; }

ol.arabic { list-style: decimal; }

ol.loweralpha { list-style: lower-alpha; }

ol.upperalpha { list-style: upper-alpha; }

ol.lowerroman { list-style: lower-roman; }

ol.upperroman { list-style: upper-roman; }

:not(li) > ol > li:first-child > :first-child, :not(li) > ul > li:first-child > :first-child { margin-top: 0px; }

:not(li) > ol > li:last-child > :last-child, :not(li) > ul > li:last-child > :last-child { margin-bottom: 0px; }

ol.simple ol p, ol.simple ul p, ul.simple ol p, ul.simple ul p { margin-top: 0px; }

ol.simple > li:not(:first-child) > p, ul.simple > li:not(:first-child) > p { margin-top: 0px; }

ol.simple p, ul.simple p { margin-bottom: 0px; }

dl.footnote > dt, dl.citation > dt { float: left; margin-right: 0.5em; }

dl.footnote > dd, dl.citation > dd { margin-bottom: 0em; }

dl.footnote > dd::after, dl.citation > dd::after { content: ""; clear: both; }

dl.field-list { display: grid; grid-template-columns: fit-content(30%) auto; }

dl.field-list > dt { font-weight: bold; word-break: break-word; padding-left: 0.5em; padding-right: 5px; }

dl.field-list > dt::after { content: ":"; }

dl.field-list > dd { padding-left: 0.5em; margin-top: 0em; margin-left: 0em; margin-bottom: 0em; }

dl { margin-bottom: 15px; }

dd > :first-child { margin-top: 0px; }

dd ul, dd table { margin-bottom: 10px; }

dd { margin-top: 3px; margin-bottom: 10px; margin-left: 30px; }

dl > dd:last-child, dl > dd:last-child > :last-child { margin-bottom: 0px; }

dt:target, span.highlighted { background-color: rgb(251, 229, 78); }

rect.highlighted { fill: rgb(251, 229, 78); }

dl.glossary dt { font-weight: bold; font-size: 1.1em; }

.optional { font-size: 1.3em; }

.sig-paren { font-size: larger; }

.versionmodified { font-style: italic; }

.system-message { background-color: rgb(255, 221, 170); padding: 5px; border: 3px solid red; }

.footnote:target { background-color: rgb(255, 255, 170); }

.line-block { display: block; margin-top: 1em; margin-bottom: 1em; }

.line-block .line-block { margin-top: 0px; margin-bottom: 0px; margin-left: 1.5em; }

.guilabel, .menuselection { font-family: sans-serif; }

.accelerator { text-decoration: underline; }

.classifier { font-style: oblique; }

.classifier::before { font-style: normal; margin: 0.5em; content: ":"; }

abbr, acronym { border-bottom: 1px dotted; cursor: help; }

pre { overflow: auto hidden; }

pre, div[class*="highlight-"] { clear: both; }

span.pre { hyphens: none; }

div[class*="highlight-"] { margin: 1em 0px; }

td.linenos pre { border: 0px; background-color: transparent; color: rgb(170, 170, 170); }

table.highlighttable { display: block; }

table.highlighttable tbody { display: block; }

table.highlighttable tr { display: flex; }

table.highlighttable td { margin: 0px; padding: 0px; }

table.highlighttable td.linenos { padding-right: 0.5em; }

table.highlighttable td.code { flex: 1 1 0%; overflow: hidden; }

.highlight .hll { display: block; }

div.highlight pre, table.highlighttable pre { margin: 0px; }

div.code-block-caption + div { margin-top: 0px; }

div.code-block-caption { margin-top: 1em; padding: 2px 5px; font-size: small; }

div.code-block-caption code { background-color: transparent; }

table.highlighttable td.linenos, span.linenos, div.doctest > div.highlight span.gp { user-select: none; }

div.code-block-caption span.caption-number { padding: 0.1em 0.3em; font-style: italic; }

div.code-block-caption span.caption-text { }

div.literal-block-wrapper { margin: 1em 0px; }

code.descname { background-color: transparent; font-weight: bold; font-size: 1.2em; }

code.descclassname { background-color: transparent; }

code.xref, a code { background-color: transparent; font-weight: bold; }

h1 code, h2 code, h3 code, h4 code, h5 code, h6 code { background-color: transparent; }

.viewcode-link { float: right; }

.viewcode-back { float: right; font-family: sans-serif; }

div.viewcode-block:target { margin: -1px -10px; padding: 0px 10px; }

img.math { vertical-align: middle; }

div.body div.math p { text-align: center; }

span.eqno { float: right; }

span.eqno a.headerlink { position: absolute; z-index: 1; }

div.math:hover a.headerlink { visibility: visible; }

@media print {
  div.document, div.documentwrapper, div.bodywrapper { width: 100%; margin: 0px !important; }
  div.sphinxsidebar, div.related, div.footer, #top-link { display: none; }
}
------MultipartBoundary--drSnEy8YQi6KBRYFip5KV9LZSkMa4b2SW9nMySG9pY------
